[
  {
    "phasename": "MetaPlatform Dashboard Embedding",
    "phaseid": "AMV-1.4",
    "WT Projects": "WT-UX14",
    "status": "Planned",
    "notes": "StepTaskOutput4.1Import AgentMesh.tsx into MetaPlatformDashboard.tsxRendered diagram within dashboard4.2Link view filter to agent registry card (Agent Tracker)Interactive dashboard toggle4.3Add dispatch overlay when MetaPlatform agent is clickedActionable UI hook4.4Enable live-sync toggle in Meta contextRuntime control layer",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Live Status + Semantic Tags",
    "phaseid": "AMV-1.3",
    "WT Projects": "WT-UX14",
    "status": "deprecated)Updated JSON3.2Add visual styling for active/planned/deprecated edgesEdge color coding3.3Pull live state from GitHub / Claude Dispatcher status (future)Runtime sync hooks (optional)3.4Add RAG status badge overlays where applicableOptional Governance overlay",
    "notes": "StepTaskOutput3.1Add status field to each link (e.g.",
    "startDate": "planned",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Dynamic Component (React)",
    "phaseid": "AMV-1.2",
    "WT Projects": "WT-UX14",
    "status": "Governance)UI filters2.5Connect diagram hover/click events to metadata or modal detailInteraction layer2.6Log component and source config in Template TrackerGovernance linkage",
    "notes": "StepTaskOutput2.1Create AgentMesh.tsx component scaffoldComponent file2.2Create source-of-truth file integrationMap.jsonJSON registry2.3Render diagram using Mermaid wrapper (@mermaid-js/react) or custom D3Live diagram inside WT UI2.4Add toggle views (CodeOps",
    "startDate": "Runtime",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Static Diagram Prototype",
    "phaseid": "AMV-1.1",
    "WT Projects": "WT-UX14",
    "status": "WT UI",
    "notes": "StepTaskOutput1.1Define core entities (Claude",
    "startDate": "GitHub",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Mobile + Cross Project",
    "phaseid": "WT-5.4",
    "WT Projects": "WT-UX8",
    "status": "",
    "notes": "WT 5.4 – Mobile + Cross-Project View",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Responsive updates to core components",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Timeline: add global view with filters by tag/status",
    "phaseid": "",
    "WT Projects": "Planned",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Collaboration & Alert",
    "phaseid": "WT-5.3",
    "WT Projects": "WT-UX8",
    "status": "",
    "notes": "WT 5.3 – Collaboration & Alerts",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Add inline comment threads per PhaseStep",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Support user mentions and task ownership",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Build Slack/email notification connector",
    "phaseid": "",
    "WT Projects": "Planned",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Rule Engine MVP",
    "phaseid": "WT-5.2",
    "WT Projects": "WT-UX8",
    "status": "",
    "notes": "WT 5.2 – Rule Engine MVP",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Define Rule",
    "phaseid": "Trigger",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "Action data types"
  },
  {
    "phasename": "• Implement Rule builder UI + logic processor",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Link rules to Step events and Logs",
    "phaseid": "",
    "WT Projects": "Planned",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Kanban & Timeline Foundations",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "WT-5.1",
    "WT Projects": "WT-UX8",
    "status": "",
    "notes": "WT 5.1 – Kanban & Timeline Foundations",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Add startDate",
    "phaseid": "dueDate",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "statusLastUpdated fields"
  },
  {
    "phasename": "• Create Kanban UI: drag/drop PhaseSteps grouped by status",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Create Gantt UI: timeline bar per PhaseStep",
    "phaseid": "",
    "WT Projects": "Planned",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Slash Command + Memory Ops",
    "phaseid": "WT-5.7 ",
    "WT Projects": "WT-UX8",
    "status": "Wombat Track – Gizmo",
    "notes": "Slash commands",
    "startDate": "recall and context injection",
    "endDate": "",
    "RAG": "Amber"
  },
  {
    "phasename": "Real-Time Dispatch",
    "phaseid": "WT-5.6 ",
    "WT Projects": "WT-UX8",
    "status": "July 23",
    "notes": "2025",
    "startDate": "Wombat Track – Gizmo",
    "endDate": "July 25",
    "RAG": "Green"
  },
  {
    "phasename": "GovernanceLog Hook",
    "phaseid": "WT-5.5 ",
    "WT Projects": "WT-UX8",
    "status": "July 21",
    "notes": "2025",
    "startDate": "Wombat Track – Gizmo",
    "endDate": "July 22",
    "RAG": "Green"
  },
  {
    "phasename": "GizmoConsole UI Integration ",
    "phaseid": "WT-5.4",
    "WT Projects": "WT-UX8",
    "status": "and dispatch hook",
    "notes": "2025",
    "startDate": "styling",
    "endDate": "July 21",
    "RAG": "Green"
  },
  {
    "phasename": "Logo and Brand visual identity",
    "phaseid": "Orb-1.3 ",
    "WT Projects": "WT-UX12",
    "status": "",
    "notes": "The conversation about Orbis branding might be stored in:",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "1. Project Memory: ./CLAUDE.md (team-shared)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "2. User Memory: ~/.claude/CLAUDE.md (your personal memory)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "● Bash(ls -la ~/.claude/ 2>/dev/null || echo No ~/.claude directory found)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "⎿  total 4",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "drwxr-xr-x 1 jtaylor jtaylor  104 Jul 26 14:15 .",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "drwxr-xr-x 1 jtaylor jtaylor  522 Jul 28 13:03 ..",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "… +5 lines (ctrl+r to expand)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "● Bash(find ~/.claude -name http://claude.md/ -o -name *.md | head -10)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "⎿  (No content)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "● List(../../.claude/projects)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "⎿  Listed 29 paths (ctrl+r to expand)",
    "phaseid": "WP-UX13",
    "WT Projects": "2000",
    "status": "",
    "notes": "Design Principles (https://www.notion.so/Design-Principles-23ee1901e36e80d99b34fe4f9df8e231?pvs=21)",
    "startDate": "",
    "endDate": "In Progress",
    "RAG": "January 1"
  },
  {
    "phasename": "Wireframes",
    "phaseid": "Orb-1.4 ",
    "WT Projects": "WT-UX12",
    "status": "2000",
    "notes": "",
    "startDate": "January 1",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Logo Vision",
    "phaseid": "Orb-1.2 ",
    "WT Projects": "WT-UX12",
    "status": "",
    "notes": "🌌 ORBIS BRAND CONCEPT EVOLUTIONS",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔵 1. Orbis Core",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“The center of intelligent systems.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Circular",
    "phaseid": "recursive",
    "WT Projects": "memory",
    "status": "",
    "notes": "and system orchestration.",
    "startDate": "",
    "endDate": "AI interaction",
    "RAG": "fundamental. This name embodies the philosophical nucleus of Orbis — a semantic engine driving governance"
  },
  {
    "phasename": "✴️ Core Themes:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Cognition loops (Hofstadter’s “Strange Loop”)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Autopoiesis — systems that regenerate themselves",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Governance kernel — a semantic OS at the heart of digital infrastructure",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Circular logic → Rational coherence → Auditability",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🌈 Visual Mood:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Minimalist",
    "phaseid": "high-contrast",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Monoline circle glyphs / stacked concentric rings",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Echoes of operating system boot loaders or schematic cores",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔤 Logo Direction:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Stylised “O” with pulsing center",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Typography: geometric sans (e.g.",
    "phaseid": "Space Grotesk / Inter / Satoshi)",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Variant: 0rbis Core (logo glyph only)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔥 2. Orbis Forge",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“The intelligence foundry.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Symbolic of both heat and transformation",
    "phaseid": "Forge reflects a platform where AI and human intent co-create new systems. It's not passive — it’s molten",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "shaping intelligence like ancient smiths shaped metal."
  },
  {
    "phasename": "✴️ Core Themes:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Techno-alchemy — crafting AI tools from raw prompts and system intent",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Industrial → Digital revolution parallel",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Agentic systems forged into tools",
    "phaseid": "protocols",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "workflows"
  },
  {
    "phasename": "• Signals to founders",
    "phaseid": "builders",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and creators"
  },
  {
    "phasename": "🌈 Visual Mood:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Warm copper / forged steel tones",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Hammer-and-spark motifs",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Glowing ember or furnace-core visuals",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Modular UI “ingots” that combine into features",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔤 Logo Direction:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Wordmark with flare accents on “F”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Symbol: Anvil + Orbit",
    "phaseid": "or “O” encircling a flame glyph",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Font: Sturdy but refined — consider Degular",
    "phaseid": "Neue Haas",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "Founders Grotesk"
  },
  {
    "phasename": "🔁 3. Orbis Loop (Honourable Mention)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“I am a strange loop.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "A self-observing system. Less grounded than Core or Forge",
    "phaseid": "but poetic and AI-native.",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Could be used as a product or feature name later (e.g.",
    "phaseid": "Orbis Loop: Lifecycle Autopilot)",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧬 SHARED DESIGN SYSTEM ELEMENTS (All Variants)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧠 Voice & Language:ElementStyleCopyControlled",
    "phaseid": "system-aware",
    "WT Projects": "“Core threads” (Core)",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "semanticTonePrecision with calm clarityAgents“Forged intelligence” (Forge)"
  },
  {
    "phasename": "🎨 Shared Color FoundationRoleColorBackground#0C0C0E (Obsidian Black)Accent A#D77B28 (Copper Ember – Forge)Accent B#1C5D99 (Nebula Blue – Core)Surface#F2F0E6 (Lumen Cream)Status#3FB8AF (Signal Teal)Trace Layer#B3B6B7 (Orbit Gray)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧩 Shared UI Concepts",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Governance Thread View → Like metal wire drawn through structure",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Prompt Console = Foundry Surface (Forge) or Semantic Kernel (Core)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Visual Tags = alloy tokens / stackable schema",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Runtime Indicators = heat map (Forge) or pulse ring (Core)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🏁 Summary & Next Step OptionsNameSymbolismToneFuture SimplicityStrong Use CasesOrbis CoreNucleus",
    "phaseid": "self-governing loopElegant",
    "WT Projects": "governance platformOrbis ForgeTransformation",
    "status": "",
    "notes": "founder-friendly✅ Iconic as Forge → OrbisTooling",
    "startDate": "dev infra",
    "endDate": "AI smithingCreative",
    "RAG": "systemic✅ Easily collapses to OrbisOS"
  },
  {
    "phasename": "Orbis Design",
    "phaseid": "Orb-1.1",
    "WT Projects": "WT-UX12",
    "status": "",
    "notes": "🌌 ORBIS BRAND CONCEPT EVOLUTIONS",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔵 1. Orbis Core",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“The center of intelligent systems.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Circular",
    "phaseid": "recursive",
    "WT Projects": "memory",
    "status": "",
    "notes": "and system orchestration.",
    "startDate": "",
    "endDate": "AI interaction",
    "RAG": "fundamental. This name embodies the philosophical nucleus of Orbis — a semantic engine driving governance"
  },
  {
    "phasename": "✴️ Core Themes:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Cognition loops (Hofstadter’s “Strange Loop”)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Autopoiesis — systems that regenerate themselves",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Governance kernel — a semantic OS at the heart of digital infrastructure",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Circular logic → Rational coherence → Auditability",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🌈 Visual Mood:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Minimalist",
    "phaseid": "high-contrast",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Monoline circle glyphs / stacked concentric rings",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Echoes of operating system boot loaders or schematic cores",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔤 Logo Direction:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Stylised “O” with pulsing center",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Typography: geometric sans (e.g.",
    "phaseid": "Space Grotesk / Inter / Satoshi)",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Variant: 0rbis Core (logo glyph only)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔥 2. Orbis Forge",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“The intelligence foundry.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Symbolic of both heat and transformation",
    "phaseid": "Forge reflects a platform where AI and human intent co-create new systems. It's not passive — it’s molten",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "shaping intelligence like ancient smiths shaped metal."
  },
  {
    "phasename": "✴️ Core Themes:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Techno-alchemy — crafting AI tools from raw prompts and system intent",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Industrial → Digital revolution parallel",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Agentic systems forged into tools",
    "phaseid": "protocols",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "workflows"
  },
  {
    "phasename": "• Signals to founders",
    "phaseid": "builders",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and creators"
  },
  {
    "phasename": "🌈 Visual Mood:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Warm copper / forged steel tones",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Hammer-and-spark motifs",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Glowing ember or furnace-core visuals",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Modular UI “ingots” that combine into features",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔤 Logo Direction:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Wordmark with flare accents on “F”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Symbol: Anvil + Orbit",
    "phaseid": "or “O” encircling a flame glyph",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Font: Sturdy but refined — consider Degular",
    "phaseid": "Neue Haas",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "Founders Grotesk"
  },
  {
    "phasename": "🔁 3. Orbis Loop (Honourable Mention)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "“I am a strange loop.”",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "A self-observing system. Less grounded than Core or Forge",
    "phaseid": "but poetic and AI-native.",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Could be used as a product or feature name later (e.g.",
    "phaseid": "Orbis Loop: Lifecycle Autopilot)",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧬 SHARED DESIGN SYSTEM ELEMENTS (All Variants)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧠 Voice & Language:ElementStyleCopyControlled",
    "phaseid": "system-aware",
    "WT Projects": "“Core threads” (Core)",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "semanticTonePrecision with calm clarityAgents“Forged intelligence” (Forge)"
  },
  {
    "phasename": "🎨 Shared Color FoundationRoleColorBackground#0C0C0E (Obsidian Black)Accent A#D77B28 (Copper Ember – Forge)Accent B#1C5D99 (Nebula Blue – Core)Surface#F2F0E6 (Lumen Cream)Status#3FB8AF (Signal Teal)Trace Layer#B3B6B7 (Orbit Gray)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧩 Shared UI Concepts",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Governance Thread View → Like metal wire drawn through structure",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Prompt Console = Foundry Surface (Forge) or Semantic Kernel (Core)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Visual Tags = alloy tokens / stackable schema",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Runtime Indicators = heat map (Forge) or pulse ring (Core)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🏁 Summary & Next Step OptionsNameSymbolismToneFuture SimplicityStrong Use CasesOrbis CoreNucleus",
    "phaseid": "self-governing loopElegant",
    "WT Projects": "governance platformOrbis ForgeTransformation",
    "status": "",
    "notes": "founder-friendly✅ Iconic as Forge → OrbisTooling",
    "startDate": "dev infra",
    "endDate": "AI smithingCreative",
    "RAG": "systemic✅ Easily collapses to OrbisOS"
  },
  {
    "phasename": "Doc Module Enhancements",
    "phaseid": "DM-1.1",
    "WT Projects": "WT-UX9",
    "status": "Template",
    "notes": "Feature EnhancementsPage / LocationComponentActionIntegrationStatusNotesDocsEditor.tsxClaude DispatcherReplace mock AI with live Claude endpoint✅ Claude🔜 To implementUse dispatchClaude(promptType",
    "startDate": ".json export optionsNone✅ Markdown doneAdd format toggle buttonsDocsEditor.tsxClaude Prompt TemplatesCentralise reusable GPT prompt libraryWT Claude Dispatcher🔜 PhaseSteps + Docs use same promptsDocsEditor.tsxSave IndicatorsAdd persistent toast or log on successful saveNone✅ Basic save indicator presentEnhance visibilityDocsEditor.tsxAI Suggest → GovernanceLogAuto-log AI summaries directly on usageWT Internal🔜 Stubbed in placeConfirm logging schema 🔍 Metadata Schema Audit — DocsEntryFieldTypeSourceCompletionNotestitlestringUser input✅docTypeenumDropdown (SOP",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔄 Proposed Groupings (Docs Dashboard Filters)FilterValuesRequired?DocTypeSOP",
    "phaseid": "Project Spec",
    "WT Projects": "Template✅ProjectAll WT projects✅PhaseLinked phases✅FeatureComposer features✅TagsCustom tags🧪",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "Checklist"
  },
  {
    "phasename": "🧱 Infrastructure DependenciesServiceRequired ForNotesClaude (live)AI editing",
    "phaseid": "summarising",
    "WT Projects": "WT-UX9",
    "status": "",
    "notes": "Planned",
    "startDate": "",
    "endDate": "",
    "RAG": "scaffoldingUse Claude Dispatcher endpointDriveMemoryBackup + versioned doc archiveMust support .md + metadataMemoryPluginAnchors for long-term recallWill be replaced by WT-native RAGGovernanceLogAll actions + versionsCore WT integrationWT AuthPermissions / user-based accessEnforce view/edit rightsOptional: NotionExport index + MD filesConsider backup only"
  },
  {
    "phasename": "Doc Module Implementation",
    "phaseid": "DM-1.0",
    "WT Projects": "WT-UX9",
    "status": "Planned",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "MetaValidator Sys",
    "phaseid": "WT-3.3",
    "WT Projects": "Infrastructure",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "CI/CD (https://www.notion.so/Infrastructure-CI-CD-23de1901e36e80cdae85dc296ceea755?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Status: 🔵 Planned Objective: Build CLI and CI-integrated validator to enforce governance compliance in project metadata and structure",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Key Steps (Planned):",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "1. 🔲 Build Validator Engine (WTMetaValidator.ts)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "2. 🔲 Add rules for markdown",
    "phaseid": "step counts",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "RAG enforcement"
  },
  {
    "phasename": "3. 🔲 Hook into CI pipeline or Git pre-push",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "4. 🔲 Post failures to ExecutionLog with suggested backlog tasks",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Side Quest (Planned):",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Create reusable prompt scaffolder for validator errors",
    "phaseid": "WP-UX9",
    "WT Projects": "2000",
    "status": "",
    "notes": "Infrastructure",
    "startDate": "",
    "endDate": "Done",
    "RAG": "January 1"
  },
  {
    "phasename": "CI/CD Pipeline Mig",
    "phaseid": "WT-3.2",
    "WT Projects": "Infrastructure",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "CI/CD (https://www.notion.so/Infrastructure-CI-CD-23de1901e36e80cdae85dc296ceea755?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Status: ✅ Complete Objective: Formalise deployment workflow with rollback",
    "phaseid": "governance logging",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and CI validation"
  },
  {
    "phasename": "Key Steps:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "1. ✅ Create reusable CI pipeline (ci.yml",
    "phaseid": "deploy.yml)",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "2. ✅ Configure deploy + rollback",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "3. ✅ Add structured governance hooks",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "4. ✅ Integrate RAG signals post-deploy",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Side Quest (Complete):",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Claude refactor of legacy deploy scripts and log writers",
    "phaseid": "WP-UX10",
    "WT Projects": "2000",
    "status": "",
    "notes": "Infrastructure",
    "startDate": "",
    "endDate": "Planned",
    "RAG": "January 1"
  },
  {
    "phasename": "Adv Testing Infra",
    "phaseid": "WT-3.1 ",
    "WT Projects": "Infrastructure",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "CI/CD (https://www.notion.so/Infrastructure-CI-CD-23de1901e36e80cdae85dc296ceea755?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Status: 🟡 In Progress Objective: Implement CI-integrated Puppeteer test suite with standardised coverage and logging",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Key Steps:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "1. ✅ Implement Puppeteer-based test suite (Phase Tracker",
    "phaseid": "Dispatcher",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "Dashboard)"
  },
  {
    "phasename": "2. ✅ Integrate GitHub Action test runner",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "3. ⚠️ Standardise coverage thresholds",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "4. ⚠️ Add failure logging + RAG dashboard visibility",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Side Quest (Planned):",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Develop Puppeteer screenshot diff utility for visual regression",
    "phaseid": "WP-UX11",
    "WT Projects": "2000",
    "status": "",
    "notes": "Infrastructure",
    "startDate": "",
    "endDate": "Planned",
    "RAG": "January 1"
  },
  {
    "phasename": "Arch Reconciliation",
    "phaseid": "WT-3.0",
    "WT Projects": "Infrastructure",
    "status": "",
    "notes": "December 1",
    "startDate": "📦 Overview",
    "endDate": "CI/CD (https://www.notion.so/Infrastructure-CI-CD-23de1901e36e80cdae85dc296ceea755?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "This document summarizes the implementation and governance outcomes of WT Phase 3.x",
    "phaseid": "covering Phases WT-3.0 to WT-3.3. The purpose of Phase 3.x is to establish robust developer infrastructure",
    "WT Projects": "and governance-enforced quality controls across the Wombat Track platform.",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "CI/CD automation"
  },
  {
    "phasename": "✅ Phase Breakdown",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "WT-3.0 – Architecture Reconciliation",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Status: ✅ Complete Summary:",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Refactored orbis-* naming to wombat-console",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Unified phase hierarchy under WT naming",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Enhanced UX vertical nesting: Project > Phase > Step",
    "phaseid": "WP-UX12",
    "WT Projects": "2000",
    "status": "",
    "notes": "Infrastructure",
    "startDate": "",
    "endDate": "Complete",
    "RAG": "January 1"
  },
  {
    "phasename": "Post-Mortem - regression analysis",
    "phaseid": "PM-1.1",
    "WT Projects": "RECON-9",
    "status": "Complete",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Post Mortem - rectify",
    "phaseid": "PM 2.1",
    "WT Projects": "RECON-9",
    "status": "",
    "notes": "📘 Session Summary",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "This session surfaced and resolved critical Git integrity",
    "phaseid": "sidebar recovery",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and CI build reliability issues. The robustness of these workflows is essential for the long-term viability of the MetaPlatform and Wombat Track as an AI-governed SDLC nucleus."
  },
  {
    "phasename": "✅ Confirmed IssuesIDIssueImpactStatus001Sidebar commit (64a589c) was unintentionally overwrittenHigh – loss of local work and visual logic✅ Recovery complete002Direct push to main bypassed PR reviewHigh – violated SDLC safeguards🛠️ PR review policy reinforced003Git operations not guided → user uncertaintyHigh – SDLC risk for MetaPlatform✅ Gizmo now owns all Git workflows004lucide-react not installed after Claude restoreHigh – broke Vercel production build✅ Pending fix via npm install + commit005Missing CI safety check for new dependenciesMedium – future risk🔄 Pending CI enhancement006No Git pre-checkout safety scriptsMedium – context loss on branch switch🔄 Add http://wt-safe-checkout.sh/007No GovernanceLog entry for recovery eventMedium – traceability gap🔄 Pending log creation008Recovery not logged as PhaseStep in WTMedium🔄 Needs WT-5.1 entry",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🛠️ Fix Actions TakenActionDescription✅ Created sidebar-recovery-branchSafely restored lost logic from commit 64a589c✅ Claude selectively reintegrated sidebar UI + logicPreserved Claude scaffold",
    "phaseid": "restored visual hierarchy✅ Gizmo assigned as GitOps and PR reviewerEnsures controlled merges",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "version integrity✅ Full PR plan and GovernanceLog scaffold generatedSemantic traceability restored✅ Seed script generated for WT PhasePlanEnables traceable UI feature linking"
  },
  {
    "phasename": "🔄 Pending Fixes / ImprovementsIDFixDescriptionF001Install lucide-reactRequired for production build to succeedF002Commit + push package.json",
    "phaseid": "package-lock.jsonFinalise sidebar icon fixF003Create GovernanceLog entry for sidebar recoveryCapture key decisions + traceable eventF004Update WT-5.x PhasePlan to include sidebar recoveryInclude all PhaseSteps tied to UI fixF005Add pre-checkout script (http://wt-safe-checkout.sh/)Prevents work loss when switching branchesF006Add CI rule to catch missing dependenciese.g.",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "validate imports vs package.json"
  },
  {
    "phasename": "🧠 Optional EnhancementsEnhancementBenefitGit PR automation for ClaudeClaude commits auto-tagged",
    "phaseid": "PRs generated without push to mainwt-recovery-checker.ts scriptDetect unmerged/dangling commits and prevent data lossReal-time Git/Gizmo sync layer in MetaPlatformPush/pull status updates surfaced in UIBuild-stage AI warning systemDetects missing modules or unresolved imports before deploy",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧭 MetaPlatform ImpactAreaRisk if UnresolvedResolution PathSDLC EnforcementMetaPlatform cannot offer true governance without Git integrity✅ Assign GitOps to Gizmo + CI rulesRuntime Build StabilityBreaks “self-healing system” promise if prod build fails silently🔄 Add automated dependency check + lock auditTrust in AI CollaborationAI agents must not bypass governance (e.g.",
    "phaseid": "push to main)✅ Require PR layer with Gizmo as reviewerDeveloper ConfidenceLoss of work reduces dev velocity",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "faith in automation🔄 Git pre-checkout and recovery monitoringArtefact TraceabilityMetaPlatform requires memory + log sync🔄 Log sidebar recovery + link to WT-5.1 PhaseStep"
  },
  {
    "phasename": "📌 Suggested Phase EntryPhaseNamePurposeWT-6.0GitOps + Runtime IntegrityImplement full guardrails for GitHub",
    "phaseid": "Dev environment",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and build pipeline integrity"
  },
  {
    "phasename": "📂 Artefacts Generated",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• http://sidebar-recovery-pr-plan.md/",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• http://sidebar-recovery-diff-summary.md/",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• sidebarRecoveryPhasePlan.ts",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Claude prompt for selective reintroduction",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Claude prompt for lucide-react install fix",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Git workflow policy (for inclusion in http://git-workflow.md/)",
    "phaseid": "",
    "WT Projects": "Complete",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Post-mortem - sidebar rendering failure (https://www.notion.so/Post-mortem-sidebar-rendering-failure-23ee1901e36e8000a4e2f117bb1bbfad?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Data Taxonomy",
    "phaseid": "WP-1.2",
    "WT Projects": "WT-UX1",
    "status": "",
    "notes": "Tag data using structured taxonomy",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8137a195dad4fc3c2969?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e81ae9c9fcdf031dc5d46?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e81209f7be82646197560?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e81ca8353c8b78687ea31?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8138ac74f21f38df3755?pvs=21",
    "phaseid": "WP-UX2",
    "WT Projects": "2000",
    "status": "",
    "notes": "WT MemSync Implementation (https://www.notion.so/WT-MemSync-Implementation-23ee1901e36e800bb279c50c177e4e2a?pvs=21)",
    "startDate": "",
    "endDate": "Active",
    "RAG": "January 1"
  },
  {
    "phasename": "Agent Protocol Sync",
    "phaseid": "WP-1.4",
    "WT Projects": "WT-UX1",
    "status": "",
    "notes": "🤝 Define Message Types",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23ce1901e36e80b980e3de9693a794a2?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23ce1901e36e800092b8dea9bd01d4fa?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23ce1901e36e80f9b926e811585a0a47?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e81f19354f40da684c301?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8109b38ff1089b8ae018?pvs=21",
    "phaseid": "WP-UX4",
    "WT Projects": "2000",
    "status": "",
    "notes": "WT MemSync Implementation (https://www.notion.so/WT-MemSync-Implementation-23ee1901e36e800bb279c50c177e4e2a?pvs=21)",
    "startDate": "",
    "endDate": "Active",
    "RAG": "January 1"
  },
  {
    "phasename": "Memory Push",
    "phaseid": "WP-1.6",
    "WT Projects": "WT-UX1",
    "status": "",
    "notes": "# 💽Unstructured Data",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8046a103de4a184d48a7?pvs=21https://www.notion.so/23de1901e36e80508edee2e0ecc105d3?pvs=21https://www.notion.so/23de1901e36e80218c31c5284c2fbf9c?pvs=21https://www.notion.so/23de1901e36e8024a138dabd27edd421?pvs=21https://www.notion.so/23de1901e36e800d81a7f6f5c62022b6?pvs=21https://www.notion.so/23de1901e36e8126bd71f9c49b6af071?pvs=21https://www.notion.so/23de1901e36e81859deec1a52fb6c958?pvs=21https://www.notion.so/23de1901e36e81fc9e6ee94fc3b8e926?pvs=21",
    "phaseid": "WP-UX6",
    "WT Projects": "2000",
    "status": "",
    "notes": "WT MemSync Implementation (https://www.notion.so/WT-MemSync-Implementation-23ee1901e36e800bb279c50c177e4e2a?pvs=21)",
    "startDate": "",
    "endDate": "Active",
    "RAG": "January 1"
  },
  {
    "phasename": "Self-governance App",
    "phaseid": "WT-2.0 ",
    "WT Projects": "WT-UX15",
    "status": "",
    "notes": "🌟 Purpose",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Establish Wombat Track as its own project governance and management environment — tracking the WT app’s own evolution within the WT platform.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "This project formalises the goal of replacing local artefacts and external documentation with WT-native project management",
    "phaseid": "execution",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "and governance capabilities."
  },
  {
    "phasename": "🧭 Strategic Goal",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Migrate all planning",
    "phaseid": "execution",
    "WT Projects": "and governance activities of the WT app into the WT platform itself.",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "documentation"
  },
  {
    "phasename": "Wombat Track must be used to manage Wombat Track.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "📘 Project SummaryElementDescriptionProject NameWT Self-Managed App MigrationLeadGizmo (AI) + JacksonStart Date2025-07-25Status🟡 In ProgressGovernanceLog RefSelf-Management Initiative (Proposal + Phase Logs)",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🧠 Governance Hooks",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Proposal: WT should manage itself.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Decisions: Logged at each project intake and schema change.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Changes: Linked to data model PRs.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Reviews: Every feature must have its own GovernanceLog.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🛡️ Integrity Requirements",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Every WT feature/project must be traceable in WT.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• No markdown-only artefacts should exist outside WT unless exported.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Claude and Gizmo must both log AI actions to GovernanceLog.",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "✅ Blocker CheckAreaStatusNotesData Model❌ IncompleteNeeds 3 new data types + extensionsUI Surfaces⚠️ PartialMostly functional",
    "phaseid": "needs richer metadata fieldsGovernance Logging✅ CompleteJust needs more usageAI Prompt Hooks✅ AvailableClaude and Gizmo ready to trigger create/import",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "🔚 Output Goals",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Every active WT artefact tracked as WT project",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• Self-documented change history",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• MetaPlatform fully monitored from within WT",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "• WT becomes a self-reflexive governance operating system",
    "phaseid": "",
    "WT Projects": "Complete",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
    "RAG": ""
  },
  {
    "phasename": "Operational Loop",
    "phaseid": "WT-2.4",
    "WT Projects": "WT-UX15",
    "status": "",
    "notes": "🚀 Phase 4: Operational LoopStepTaskOutput4.1Run future features using WT nativelyE.g.",
    "startDate": "Docs Module enhancements4.2Claude auto-generates PhasePlans and Governance entriesAI-authored entries4.3Agent Mesh manages visual layer of dependenciesRuntime visualisation4.4WT manages its own versioning and deployment logsSelf-documenting infra",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Metaproject Activation",
    "phaseid": "WT-2.3",
    "WT Projects": "WT-UX15",
    "status": "",
    "notes": "🔁 Phase 3: MetaProject ActivationStepTaskOutput3.1Ingest current WT artefacts (Agent Mesh",
    "startDate": "etc.) as projectsWT-native planning entries3.2Rebuild GovernanceLog from markdown historyTrue WT governance archive3.3Build default dashboards for WT internal projectsView progress from within app3.4Claude prompt layer: “Scaffold as WT Project”Prompt-based self-registration",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Gov Enhancement",
    "phaseid": "WT-2.2",
    "WT Projects": "WT-UX15",
    "status": "governanceLinksUpdated Project and Phase schemas2.2Add support for CIWorkflow",
    "notes": "🛠️ Phase 2: WT App EnhancementsStepTaskOutput2.1Add fields: techStack",
    "startDate": "repoRefs",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Gov Analysis",
    "phaseid": "WT-2.1",
    "WT Projects": "WT-UX15",
    "status": "",
    "notes": "📍 Phases & Steps",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "✅ Phase 1: Assessment & Gap AnalysisStepTaskOutput1.1Evaluate WT surfaces vs artefact requirementsCompatibility matrix1.2Identify missing fields for Plan",
    "phaseid": "Execute",
    "WT Projects": "GovernStructured recommendations1.3Propose data model changesAgent",
    "status": "Complete",
    "notes": "ExternalService data types1.4Confirm blockersNone beyond data model and UX additions",
    "startDate": "",
    "endDate": "AgentConnection",
    "RAG": "Document"
  },
  {
    "phasename": "Runtime enforcement",
    "phaseid": "SDLC-2.0 ",
    "WT Projects": "WT-UX6",
    "status": "traceability enforcement✅ Required GatesPR link confirmation",
    "notes": "🧭 Runtime Enforcement: SDLC vs PDLCAreaSDLC (Software)PDLC (Product/Project)🔄 Claude RoleScaffold & PR creationTrigger agent-based product specs🧠 Gizmo RoleMerge enforcement",
    "startDate": "CI verificationGovernance logging",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "✅ From WT-6.0 onward",
    "phaseid": "all SDLC flows are runtime-enforced using this model.",
    "WT Projects": "January 1",
    "status": "",
    "notes": "In Progress",
    "startDate": "",
    "endDate": "2000",
    "RAG": "WP-UX8"
  },
  {
    "phasename": "WT-8.0.1 – SDLC Visibility Layer",
    "phaseid": "WP-1.1",
    "WT Projects": "compliance state",
    "status": "",
    "notes": "Create UI surface and metadata visibility for SDLC guardrails",
    "startDate": "and technical risk score",
    "endDate": "",
    "RAG": "Green"
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Expected Outcome: Users and agents can query guardrails",
    "phaseid": "see CI risk score",
    "WT Projects": "and propose mitigations",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "view enforcement history"
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Tags: sdlc-governance",
    "phaseid": "oApp-migration",
    "WT Projects": "wt-8.0",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "runtime-risk"
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Linked DBs: wt-sdlc-visibility-spec",
    "phaseid": "wt-sdlc-guardrails",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": "wt-tech-debt-register"
  },
  {
    "phasename": "",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Canonical: true",
    "phaseid": "WP-UX1",
    "WT Projects": "2000",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "Planned",
    "RAG": "January 1"
  },
  {
    "phasename": "RAG Dashboard + Sync",
    "phaseid": "WP-1.3",
    "WT Projects": "",
    "status": "",
    "notes": "🔒 Mark Notion as RAG Source of Truth",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e80209fb8f912636baa3e?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e80be9bf4c2c5163bc68b?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e80c9a221ecddd1eeece5?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8143a44cf87588bf730b?pvs=21",
    "phaseid": "",
    "WT Projects": "",
    "status": "",
    "notes": "",
    "startDate": "",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "https://www.notion.so/23de1901e36e8141ba08e61ee8fe0879?pvs=21",
    "phaseid": "WP-UX3",
    "WT Projects": "2000",
    "status": "",
    "notes": "WT MemSync Implementation (https://www.notion.so/WT-MemSync-Implementation-23ee1901e36e800bb279c50c177e4e2a?pvs=21)",
    "startDate": "",
    "endDate": "Active",
    "RAG": "January 1"
  },
  {
    "phasename": "Agent Protocol Sync",
    "phaseid": "WP-1.5",
    "WT Projects": "WP-UX5",
    "status": "2000",
    "notes": "",
    "startDate": "January 1",
    "endDate": "",
    "RAG": ""
  },
  {
    "phasename": "Runtime Agent Awareness",
    "phaseid": "WT-6.1",
    "WT Projects": "last prompt time",
    "status": "`lastPromptTime`",
    "notes": "This phase enables real-time visibility into AI agent activity (Claude and Gizmo) within the Orbis UI. It includes UI enhancements to display agent status",
    "startDate": "and activity metrics. Backend tracking of `agentStatus`",
    "endDate": "",
    "RAG": ""
  }
]