[
  {
    "view_name": "v_actionstep_matter_management",
    "base_table": "actionstep.matters",
    "sql_query": "\n        SELECT \n          m.matter_number as matter_id,\n          m.matter_name,\n          p.display_name as client_name,\n          m.matter_status,\n          m.date_opened,\n          rp.display_name as responsible_partner,\n          t.due_date as deadline_date,\n          t.task_type as deadline_type,\n          ap.display_name as assigned_fee_earner,\n          t.priority as priority_level,\n          doc.document_count,\n          doc.reviewed_count,\n          dp.production_status,\n          ca.appearance_date as court_date,\n          ca.court_name,\n          ca.hearing_type,\n          ca.attending_participant as attending_counsel,\n          cc.conflict_status,\n          cc.check_date,\n          cc.checked_by_participant as checked_by,\n          m.practice_area\n        FROM matters m\n        LEFT JOIN participants p ON m.client_id = p.participant_id\n        LEFT JOIN participants rp ON m.responsible_partner_id = rp.participant_id\n        LEFT JOIN tasks t ON m.matter_id = t.matter_id\n        LEFT JOIN participants ap ON t.assigned_participant_id = ap.participant_id\n        LEFT JOIN (\n          SELECT matter_id, COUNT(*) as document_count, \n                 SUM(CASE WHEN review_status = 'reviewed' THEN 1 ELSE 0 END) as reviewed_count\n          FROM documents \n          GROUP BY matter_id\n        ) doc ON m.matter_id = doc.matter_id\n        LEFT JOIN document_productions dp ON m.matter_id = dp.matter_id\n        LEFT JOIN court_appearances ca ON m.matter_id = ca.matter_id\n        LEFT JOIN conflict_checks cc ON m.matter_id = cc.matter_id\n      ",
    "fields": [
      {
        "field_name": "matter_id",
        "sql_expression": "matter_id",
        "data_type": "STRING"
      },
      {
        "field_name": "matter_name",
        "sql_expression": "matter_name",
        "data_type": "STRING"
      },
      {
        "field_name": "client_name",
        "sql_expression": "client_name",
        "data_type": "STRING"
      },
      {
        "field_name": "matter_status",
        "sql_expression": "matter_status",
        "data_type": "STRING"
      },
      {
        "field_name": "date_opened",
        "sql_expression": "date_opened",
        "data_type": "DATE"
      },
      {
        "field_name": "responsible_partner",
        "sql_expression": "responsible_partner",
        "data_type": "STRING"
      },
      {
        "field_name": "deadline_date",
        "sql_expression": "deadline_date",
        "data_type": "DATE"
      },
      {
        "field_name": "deadline_type",
        "sql_expression": "deadline_type",
        "data_type": "STRING"
      },
      {
        "field_name": "assigned_fee_earner",
        "sql_expression": "assigned_fee_earner",
        "data_type": "STRING"
      },
      {
        "field_name": "priority_level",
        "sql_expression": "priority_level",
        "data_type": "STRING"
      },
      {
        "field_name": "practice_area",
        "sql_expression": "practice_area",
        "data_type": "STRING"
      }
    ]
  },
  {
    "view_name": "v_actionstep_financials",
    "base_table": "actionstep.invoices",
    "sql_query": "\n        SELECT \n          c.participant_id as client_id,\n          c.display_name as client_name,\n          SUM(CASE WHEN i.payment_status = 'paid' THEN i.total_amount ELSE 0 END) as total_revenue,\n          'current_month' as billing_period,\n          COUNT(DISTINCT m.matter_id) as matter_count,\n          SUM(CASE WHEN i.payment_status != 'paid' THEN i.total_amount ELSE 0 END) as outstanding_balance,\n          i.invoice_id,\n          i.invoice_amount,\n          i.invoice_date,\n          i.payment_status,\n          DATEDIFF(CURRENT_DATE, i.invoice_date) as days_outstanding,\n          m.matter_id,\n          m.matter_name,\n          SUM(te.billable_amount) as total_fees,\n          SUM(d.cost_amount) as total_costs,\n          ((SUM(te.billable_amount) - SUM(d.cost_amount)) / SUM(te.billable_amount) * 100) as profit_margin,\n          ta.trust_account_id,\n          ta.current_balance as account_balance,\n          ta.last_reconciliation_date as last_reconciled,\n          ta.reconciliation_status,\n          wip.wip_amount,\n          wip.aging_bucket,\n          mb.budgeted_amount,\n          (SUM(te.billable_amount) + SUM(d.amount)) as actual_amount,\n          (((SUM(te.billable_amount) + SUM(d.amount)) - mb.budgeted_amount) / mb.budgeted_amount * 100) as variance_percentage,\n          CASE \n            WHEN (SUM(te.billable_amount) + SUM(d.amount)) > mb.budgeted_amount THEN 'Over Budget'\n            WHEN (SUM(te.billable_amount) + SUM(d.amount)) < mb.budgeted_amount * 0.9 THEN 'Under Budget'\n            ELSE 'On Budget'\n          END as budget_status,\n          d.disbursement_id,\n          d.disbursement_amount,\n          d.disbursement_type,\n          d.reimbursement_status,\n          pa.practice_area,\n          SUM(pa_rev.revenue_amount) as revenue_amount,\n          AVG(pa_rev.avg_matter_value) as avg_matter_value,\n          pa_rev.growth_rate\n        FROM participants c\n        LEFT JOIN matters m ON c.participant_id = m.client_id\n        LEFT JOIN invoices i ON m.matter_id = i.matter_id\n        LEFT JOIN time_entries te ON m.matter_id = te.matter_id\n        LEFT JOIN disbursements d ON m.matter_id = d.matter_id\n        LEFT JOIN trust_accounts ta ON c.participant_id = ta.client_id\n        LEFT JOIN matter_budgets mb ON m.matter_id = mb.matter_id\n        LEFT JOIN (\n          SELECT matter_id, SUM(billable_amount) as wip_amount,\n                 CASE \n                   WHEN DATEDIFF(CURRENT_DATE, entry_date) <= 30 THEN '0-30 days'\n                   WHEN DATEDIFF(CURRENT_DATE, entry_date) <= 60 THEN '31-60 days'\n                   WHEN DATEDIFF(CURRENT_DATE, entry_date) <= 90 THEN '61-90 days'\n                   ELSE '90+ days'\n                 END as aging_bucket\n          FROM time_entries \n          WHERE invoice_id IS NULL\n          GROUP BY matter_id\n        ) wip ON m.matter_id = wip.matter_id\n        LEFT JOIN practice_areas pa ON m.practice_area_id = pa.practice_area_id\n        LEFT JOIN practice_area_revenue pa_rev ON pa.practice_area_id = pa_rev.practice_area_id\n        WHERE c.participant_type = 'client'\n        GROUP BY c.participant_id, i.invoice_id, d.disbursement_id\n      ",
    "fields": [
      {
        "field_name": "client_id",
        "sql_expression": "client_id",
        "data_type": "STRING"
      },
      {
        "field_name": "client_name",
        "sql_expression": "client_name",
        "data_type": "STRING"
      },
      {
        "field_name": "total_revenue",
        "sql_expression": "total_revenue",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "billing_period",
        "sql_expression": "billing_period",
        "data_type": "STRING"
      },
      {
        "field_name": "matter_count",
        "sql_expression": "matter_count",
        "data_type": "INTEGER"
      },
      {
        "field_name": "outstanding_balance",
        "sql_expression": "outstanding_balance",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "invoice_amount",
        "sql_expression": "invoice_amount",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "total_fees",
        "sql_expression": "total_fees",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "total_costs",
        "sql_expression": "total_costs",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "profit_margin",
        "sql_expression": "profit_margin",
        "data_type": "NUMERIC"
      }
    ]
  },
  {
    "view_name": "v_actionstep_workforce",
    "base_table": "actionstep.time_entries",
    "sql_query": "\n        SELECT \n          p.participant_id as fee_earner_id,\n          p.display_name as fee_earner_name,\n          SUM(te.billable_hours) as billable_hours,\n          SUM(te.non_billable_hours) as non_billable_hours,\n          te.entry_date,\n          p.standard_rate as hourly_rate,\n          (SUM(te.billable_hours) / p.target_hours * 100) as utilization_rate,\n          p.target_hours,\n          (SUM(te.billable_hours) + SUM(te.non_billable_hours)) as actual_hours,\n          p.department,\n          SUM(te.billable_amount) as monthly_billings,\n          (SUM(collected_amount) / SUM(te.billable_amount) * 100) as realization_rate,\n          COUNT(DISTINCT CASE WHEN p.originating_partner_id = p.participant_id THEN c.client_id END) as client_origination\n        FROM participants p\n        LEFT JOIN time_entries te ON p.participant_id = te.fee_earner_id\n        LEFT JOIN matters m ON te.matter_id = m.matter_id\n        LEFT JOIN participants c ON m.client_id = c.participant_id\n        WHERE p.participant_type IN ('partner', 'associate', 'paralegal')\n        GROUP BY p.participant_id, te.entry_date\n      ",
    "fields": [
      {
        "field_name": "fee_earner_id",
        "sql_expression": "fee_earner_id",
        "data_type": "STRING"
      },
      {
        "field_name": "fee_earner_name",
        "sql_expression": "fee_earner_name",
        "data_type": "STRING"
      },
      {
        "field_name": "billable_hours",
        "sql_expression": "billable_hours",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "utilization_rate",
        "sql_expression": "utilization_rate",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "monthly_billings",
        "sql_expression": "monthly_billings",
        "data_type": "NUMERIC"
      }
    ]
  },
  {
    "view_name": "v_actionstep_performance",
    "base_table": "actionstep.client_surveys",
    "sql_query": "\n        SELECT \n          c.participant_id as client_id,\n          c.display_name as client_name,\n          AVG(cs.satisfaction_rating) as satisfaction_score,\n          cs.survey_date,\n          cs.feedback_category,\n          comm.communication_date,\n          comm.communication_type,\n          AVG(DATEDIFF(comm.response_date, comm.inquiry_date) * 24) as response_time_hours,\n          p.display_name as fee_earner_name,\n          tasks.tasks_completed,\n          tasks.tasks_pending,\n          (tasks.tasks_completed / (tasks.tasks_completed + tasks.tasks_pending) * 100) as completion_rate,\n          AVG(DATEDIFF(tasks.completion_date, tasks.assignment_date)) as avg_completion_time\n        FROM participants c\n        LEFT JOIN client_surveys cs ON c.participant_id = cs.client_id\n        LEFT JOIN communications comm ON c.participant_id = comm.client_id\n        LEFT JOIN participants p ON comm.fee_earner_id = p.participant_id\n        LEFT JOIN (\n          SELECT \n            fee_earner_id,\n            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as tasks_completed,\n            SUM(CASE WHEN status IN ('pending', 'in_progress') THEN 1 ELSE 0 END) as tasks_pending,\n            completion_date,\n            assignment_date\n          FROM tasks\n          GROUP BY fee_earner_id\n        ) tasks ON p.participant_id = tasks.fee_earner_id\n        WHERE c.participant_type = 'client'\n        GROUP BY c.participant_id, cs.survey_date, comm.communication_date\n      ",
    "fields": [
      {
        "field_name": "client_id",
        "sql_expression": "client_id",
        "data_type": "STRING"
      },
      {
        "field_name": "satisfaction_score",
        "sql_expression": "satisfaction_score",
        "data_type": "NUMERIC"
      },
      {
        "field_name": "tasks_completed",
        "sql_expression": "tasks_completed",
        "data_type": "INTEGER"
      },
      {
        "field_name": "completion_rate",
        "sql_expression": "completion_rate",
        "data_type": "NUMERIC"
      }
    ]
  }
]