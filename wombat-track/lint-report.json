[{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/api/executionLogAPI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/api/integrationHealthAPI.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_prompt' is defined but never used.","line":168,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/GizmoConsole.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockClaudeDispatcher' is assigned a value but never used.","line":155,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockGizmoDispatcher' is assigned a value but never used.","line":178,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Send, Bot, Zap, Loader2, RotateCcw, Copy, ChevronDown, Save, Settings, Wifi, WifiOff } from 'lucide-react';\nimport { useProjectContext } from '../contexts/ProjectContext';\nimport { logAIConsoleInteraction } from '../utils/governanceLogger';\nimport { handleAIPrompt, getDispatcherStatus } from '../lib/aiDispatchers';\n\nexport type AIAgent = 'claude' | 'gizmo';\n\nexport interface ConsoleMessage {\n  id: string;\n  sender: 'user' | AIAgent;\n  content: string;\n  timestamp: string;\n  agentName?: string;\n  isLoading?: boolean;\n  isLogged?: boolean;\n  logId?: string;\n  isLive?: boolean;\n  responseTime?: number;\n}\n\nexport interface GizmoConsoleProps {\n  className?: string;\n  onPrompt?: (prompt: string, agent: AIAgent, context?: any) => Promise<string>;\n  initialAgent?: AIAgent;\n  placeholder?: string;\n  maxHeight?: string;\n  // Governance logging context\n  projectId?: string;\n  phaseStepId?: string;\n  promptType?: string;\n  autoLog?: boolean;\n  userId?: string;\n}\n\nconst AGENT_CONFIGS = {\n  claude: {\n    icon: Bot,\n    name: 'Claude',\n    color: 'bg-blue-500',\n    hoverColor: 'hover:bg-blue-600',\n    textColor: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n    borderColor: 'border-blue-200'\n  },\n  gizmo: {\n    icon: Zap,\n    name: 'Gizmo',\n    color: 'bg-purple-500',\n    hoverColor: 'hover:bg-purple-600',\n    textColor: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n    borderColor: 'border-purple-200'\n  }\n};\n\nexport const GizmoConsole: React.FC<GizmoConsoleProps> = ({\n  className = '',\n  onPrompt,\n  initialAgent = 'claude',\n  placeholder = 'Type your message...',\n  maxHeight = 'max-h-96',\n  projectId,\n  phaseStepId,\n  promptType = 'general',\n  autoLog = false,\n  userId = 'current-user'\n}) => {\n  const [messages, setMessages] = useState<ConsoleMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [selectedAgent, setSelectedAgent] = useState<AIAgent>(initialAgent);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showAgentDropdown, setShowAgentDropdown] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [autoLogEnabled, setAutoLogEnabled] = useState(autoLog);\n  const [dispatcherStatus, setDispatcherStatus] = useState(getDispatcherStatus());\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Project context for governance logging\n  const { logGovernanceEvent } = useProjectContext();\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Focus textarea on component mount\n  useEffect(() => {\n    textareaRef.current?.focus();\n  }, []);\n\n  const createMessage = (\n    sender: 'user' | AIAgent,\n    content: string,\n    agentName?: string,\n    isLoading = false,\n    isLogged = false,\n    logId?: string,\n    isLive = false,\n    responseTime?: number\n  ): ConsoleMessage => ({\n    id: `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    sender,\n    content,\n    timestamp: new Date().toISOString(),\n    agentName,\n    isLoading,\n    isLogged,\n    logId,\n    isLive,\n    responseTime\n  });\n\n  const logConversationToGovernance = async (\n    prompt: string,\n    response: string,\n    agent: AIAgent,\n    isLive = false,\n    responseTime?: number\n  ): Promise<string | null> => {\n    try {\n      const governanceEvent = logAIConsoleInteraction({\n        projectId,\n        phaseStepId,\n        agent,\n        prompt,\n        response,\n        promptType,\n        triggeredBy: userId,\n        isLive,\n        responseTime\n      });\n      \n      // Add to governance log via context\n      logGovernanceEvent(governanceEvent);\n      \n      return governanceEvent.id;\n    } catch (error) {\n      console.error('Failed to log conversation to governance:', error);\n      return null;\n    }\n  };\n\n  const markMessagesAsLogged = (userMessageId: string, aiMessageId: string, logId: string) => {\n    setMessages(prev => prev.map(msg => {\n      if (msg.id === userMessageId || msg.id === aiMessageId) {\n        return { ...msg, isLogged: true, logId };\n      }\n      return msg;\n    }));\n  };\n\n  const mockClaudeDispatcher = async (prompt: string): Promise<string> => {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n    \n    // Mock Claude-like responses\n    const responses = [\n      `I understand you're asking about: \"${prompt.slice(0, 50)}${prompt.length > 50 ? '...' : ''}\"\\n\\nHere's my analysis and recommendations for your Wombat Track project:`,\n      `Based on your input, I can help you with this task. Let me break this down:`,\n      `I'd be happy to assist with that. Here's what I recommend:`,\n      `That's an interesting question about your project. Let me provide some insights:`\n    ];\n    \n    const baseResponse = responses[Math.floor(Math.random() * responses.length)];\n    const details = [\n      '\\n\\n• This aligns well with your current Phase 3 MetaProject Activation',\n      '\\n• Consider the integration with your AgentMesh architecture',\n      '\\n• This could enhance your governance logging capabilities',\n      '\\n• I recommend documenting this in your project metadata'\n    ];\n    \n    return baseResponse + details.slice(0, Math.floor(Math.random() * 3) + 1).join('');\n  };\n\n  const mockGizmoDispatcher = async (prompt: string): Promise<string> => {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1500));\n    \n    return `🔧 Gizmo Analysis:\\n\\nPrompt processed: \"${prompt}\"\\n\\n⚡ Quick Actions Available:\\n• Code scaffolding\\n• Template generation\\n• Workflow automation\\n\\n🔮 This integration is coming soon in Phase WT-5.4!`;\n  };\n\n  const handleSubmit = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage = createMessage('user', inputValue.trim());\n    const loadingMessage = createMessage(selectedAgent, '', AGENT_CONFIGS[selectedAgent].name, true);\n    \n    setMessages(prev => [...prev, userMessage, loadingMessage]);\n    setInputValue('');\n    setIsLoading(true);\n\n    const startTime = Date.now();\n\n    try {\n      let response: string;\n      let isLive = false;\n      \n      if (onPrompt) {\n        // Use custom prompt handler\n        response = await onPrompt(userMessage.content, selectedAgent);\n        isLive = false; // Custom handler doesn't guarantee live status\n      } else {\n        // Use real AI dispatchers\n        const dispatchContext = {\n          projectId,\n          phaseStepId,\n          promptType,\n          userId\n        };\n        \n        response = await handleAIPrompt(userMessage.content, selectedAgent, dispatchContext);\n        isLive = dispatcherStatus[selectedAgent]?.isLive || false;\n      }\n\n      const responseTime = Date.now() - startTime;\n\n      // Create response message with performance data\n      const responseMessage = createMessage(\n        selectedAgent, \n        response, \n        AGENT_CONFIGS[selectedAgent].name,\n        false, // isLoading\n        false, // isLogged\n        undefined, // logId\n        isLive,\n        responseTime\n      );\n      \n      // Auto-log if enabled\n      let logId: string | null = null;\n      if (autoLogEnabled) {\n        logId = await logConversationToGovernance(\n          userMessage.content, \n          response, \n          selectedAgent,\n          isLive,\n          responseTime\n        );\n      }\n\n      // Remove loading message and add actual response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const updatedUserMessage = logId ? { ...userMessage, isLogged: true, logId } : userMessage;\n        const updatedResponseMessage = logId ? { ...responseMessage, isLogged: true, logId } : responseMessage;\n        return [...withoutLoading.slice(0, -1), updatedUserMessage, updatedResponseMessage];\n      });\n      \n      // Update dispatcher status if needed\n      setDispatcherStatus(getDispatcherStatus());\n      \n    } catch (error) {\n      console.error('AI Console error:', error);\n      const errorTime = Date.now() - startTime;\n      \n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorMessage = createMessage(\n          selectedAgent, \n          'Sorry, there was an error processing your request. Please try again.', \n          AGENT_CONFIGS[selectedAgent].name,\n          false, // isLoading\n          false, // isLogged\n          undefined, // logId\n          false, // isLive\n          errorTime\n        );\n        return [...withoutLoading, errorMessage];\n      });\n    } finally {\n      setIsLoading(false);\n      textareaRef.current?.focus();\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const copyMessage = (content: string) => {\n    navigator.clipboard.writeText(content);\n  };\n\n  const saveLatestExchangeToLog = async () => {\n    const reversedMessages = [...messages].reverse();\n    const latestUserMessage = reversedMessages.find(msg => msg.sender === 'user' && !msg.isLogged);\n    const latestAIMessage = reversedMessages.find(msg => msg.sender !== 'user' && !msg.isLogged && !msg.isLoading);\n    \n    if (latestUserMessage && latestAIMessage) {\n      const logId = await logConversationToGovernance(\n        latestUserMessage.content,\n        latestAIMessage.content,\n        latestAIMessage.sender as AIAgent,\n        latestAIMessage.isLive,\n        latestAIMessage.responseTime\n      );\n      \n      if (logId) {\n        markMessagesAsLogged(latestUserMessage.id, latestAIMessage.id, logId);\n      }\n    }\n  };\n\n  const saveAllToLog = async () => {\n    const exchanges: { user: ConsoleMessage; ai: ConsoleMessage }[] = [];\n    \n    // Group messages into exchanges\n    for (let i = 0; i < messages.length - 1; i++) {\n      const current = messages[i];\n      const next = messages[i + 1];\n      \n      if (current.sender === 'user' && next.sender !== 'user' && !next.isLoading && !current.isLogged) {\n        exchanges.push({ user: current, ai: next });\n      }\n    }\n    \n    // Log each exchange\n    for (const exchange of exchanges) {\n      const logId = await logConversationToGovernance(\n        exchange.user.content,\n        exchange.ai.content,\n        exchange.ai.sender as AIAgent,\n        exchange.ai.isLive,\n        exchange.ai.responseTime\n      );\n      \n      if (logId) {\n        markMessagesAsLogged(exchange.user.id, exchange.ai.id, logId);\n      }\n    }\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const renderMessage = (message: ConsoleMessage) => {\n    const isUser = message.sender === 'user';\n    const agentConfig = !isUser ? AGENT_CONFIGS[message.sender as AIAgent] : null;\n    const AgentIcon = agentConfig?.icon;\n\n    if (message.isLoading) {\n      return (\n        <div key={message.id} className=\"flex items-start space-x-3 mb-4\">\n          <div className={`w-8 h-8 rounded-full ${agentConfig?.color} flex items-center justify-center flex-shrink-0`}>\n            {AgentIcon && <AgentIcon className=\"w-4 h-4 text-white\" />}\n          </div>\n          <div className={`flex-1 ${agentConfig?.bgColor} ${agentConfig?.borderColor} border rounded-lg p-3`}>\n            <div className=\"flex items-center space-x-2\">\n              <Loader2 className=\"w-4 h-4 animate-spin text-gray-500\" />\n              <span className=\"text-sm text-gray-600\">{message.agentName} is thinking...</span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div key={message.id} className={`flex items-start space-x-3 mb-4 ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>\n        <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n          isUser ? 'bg-gray-500' : agentConfig?.color\n        }`}>\n          {isUser ? (\n            <span className=\"text-white text-sm font-medium\">U</span>\n          ) : (\n            AgentIcon && <AgentIcon className=\"w-4 h-4 text-white\" />\n          )}\n        </div>\n        \n        <div className={`flex-1 max-w-[80%] ${\n          isUser \n            ? 'bg-gray-100 border-gray-200' \n            : `${agentConfig?.bgColor} ${agentConfig?.borderColor}`\n        } border rounded-lg p-3 group`}>\n          <div className=\"flex items-center justify-between mb-1\">\n            <span className={`text-xs font-medium ${\n              isUser ? 'text-gray-600' : agentConfig?.textColor\n            }`}>\n              {isUser ? 'You' : message.agentName}\n            </span>\n            <div className=\"flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <span className=\"text-xs text-gray-500\">\n                {formatTimestamp(message.timestamp)}\n                {message.responseTime && (\n                  <span className=\"ml-1 text-gray-400\">({message.responseTime}ms)</span>\n                )}\n              </span>\n              {!isUser && message.isLive !== undefined && (\n                <span className={`text-xs font-medium ${message.isLive ? 'text-green-600' : 'text-amber-600'}`} \n                      title={message.isLive ? 'Live API response' : 'Fallback response'}>\n                  {message.isLive ? '🟢 Live' : '🟡 Fallback'}\n                </span>\n              )}\n              {message.isLogged && (\n                <span className=\"text-xs text-blue-600 font-medium\" title={`Logged to governance (ID: ${message.logId})`}>\n                  📝 Logged\n                </span>\n              )}\n              <button\n                onClick={() => copyMessage(message.content)}\n                className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                title=\"Copy message\"\n              >\n                <Copy className=\"w-3 h-3\" />\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">\n            {message.content}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg shadow-sm flex flex-col ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Bot className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"font-semibold text-gray-900\">AI Console</h3>\n          </div>\n          \n          {/* Agent Selector */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowAgentDropdown(!showAgentDropdown)}\n              className={`flex items-center space-x-2 px-3 py-1.5 rounded-lg border text-sm font-medium transition-colors ${\n                AGENT_CONFIGS[selectedAgent].color\n              } ${AGENT_CONFIGS[selectedAgent].hoverColor} text-white`}\n              disabled={isLoading}\n            >\n              <div className=\"flex items-center space-x-1\">\n                {dispatcherStatus[selectedAgent]?.isLive ? (\n                  <Wifi className=\"w-3 h-3\" title=\"Live API connection\" />\n                ) : (\n                  <WifiOff className=\"w-3 h-3\" title=\"Fallback mode\" />\n                )}\n                <span>{AGENT_CONFIGS[selectedAgent].name}</span>\n              </div>\n              <ChevronDown className=\"w-3 h-3\" />\n            </button>\n            \n            {showAgentDropdown && (\n              <div className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-[120px]\">\n                {(Object.keys(AGENT_CONFIGS) as AIAgent[]).map((agent) => {\n                  const config = AGENT_CONFIGS[agent];\n                  const IconComponent = config.icon;\n                  \n                  return (\n                    <button\n                      key={agent}\n                      onClick={() => {\n                        setSelectedAgent(agent);\n                        setShowAgentDropdown(false);\n                      }}\n                      className={`w-full flex items-center justify-between px-3 py-2 text-sm hover:bg-gray-50 transition-colors first:rounded-t-lg last:rounded-b-lg ${\n                        selectedAgent === agent ? 'bg-gray-100 font-medium' : ''\n                      }`}\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <IconComponent className={`w-4 h-4 ${config.textColor}`} />\n                        <span>{config.name}</span>\n                      </div>\n                      {dispatcherStatus[agent]?.isLive ? (\n                        <Wifi className=\"w-3 h-3 text-green-500\" title=\"Live\" />\n                      ) : (\n                        <WifiOff className=\"w-3 h-3 text-gray-400\" title=\"Fallback\" />\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-xs text-gray-500\">\n            {messages.length} messages\n          </span>\n          \n          {/* Governance Logging Controls */}\n          {messages.length > 0 && (\n            <>\n              <button\n                onClick={saveLatestExchangeToLog}\n                disabled={isLoading}\n                className=\"text-blue-500 hover:text-blue-700 transition-colors disabled:opacity-50\"\n                title=\"Save latest exchange to governance log\"\n              >\n                <Save className=\"w-4 h-4\" />\n              </button>\n              \n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowSettings(!showSettings)}\n                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                  title=\"Governance settings\"\n                >\n                  <Settings className=\"w-4 h-4\" />\n                </button>\n                \n                {showSettings && (\n                  <div className=\"absolute top-full right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-[200px] p-3\">\n                    <div className=\"space-y-3\">\n                      <label className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={autoLogEnabled}\n                          onChange={(e) => setAutoLogEnabled(e.target.checked)}\n                          className=\"rounded\"\n                        />\n                        <span className=\"text-sm\">Auto-log conversations</span>\n                      </label>\n                      \n                      <button\n                        onClick={() => {\n                          saveAllToLog();\n                          setShowSettings(false);\n                        }}\n                        disabled={isLoading}\n                        className=\"w-full text-left text-sm text-blue-600 hover:text-blue-800 transition-colors disabled:opacity-50\"\n                      >\n                        Save all to governance log\n                      </button>\n                      \n                      {(projectId || phaseStepId) && (\n                        <div className=\"text-xs text-gray-500 pt-2 border-t\">\n                          <div>Project: {projectId || 'None'}</div>\n                          <div>Phase/Step: {phaseStepId || 'None'}</div>\n                          <div>Type: {promptType}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n          \n          <button\n            onClick={clearMessages}\n            disabled={messages.length === 0 || isLoading}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors disabled:opacity-50\"\n            title=\"Clear messages\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className={`flex-1 p-4 overflow-y-auto ${maxHeight} min-h-[200px]`}>\n        {messages.length === 0 ? (\n          <div className=\"flex items-center justify-center h-32 text-gray-500\">\n            <div className=\"text-center\">\n              <Bot className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" />\n              <p className=\"text-sm\">Start a conversation with {AGENT_CONFIGS[selectedAgent].name}</p>\n              <p className=\"text-xs text-gray-400 mt-1\">Type a message below to begin</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            {messages.map(renderMessage)}\n            <div ref={messagesEndRef} />\n          </>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex space-x-3\">\n          <textarea\n            ref={textareaRef}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            rows={2}\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none\"\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSubmit}\n            disabled={!inputValue.trim() || isLoading}\n            className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2 ${\n              !inputValue.trim() || isLoading\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : `${AGENT_CONFIGS[selectedAgent].color} ${AGENT_CONFIGS[selectedAgent].hoverColor} text-white`\n            }`}\n          >\n            {isLoading ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <Send className=\"w-4 h-4\" />\n            )}\n          </button>\n        </div>\n        \n        <div className=\"flex items-center justify-between mt-2\">\n          <div className=\"text-xs text-gray-500\">\n            Press Enter to send, Shift+Enter for new line\n          </div>\n          <div className=\"flex items-center space-x-2 text-xs text-gray-400\">\n            <span>Connected to {AGENT_CONFIGS[selectedAgent].name}</span>\n            {dispatcherStatus[selectedAgent]?.isLive ? (\n              <span className=\"text-green-600 font-medium\">🟢 Live</span>\n            ) : (\n              <span className=\"text-amber-600 font-medium\">🟡 Fallback</span>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/GovernanceLogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/PhasePlanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/ProjectComposerView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/ProjectDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/ProjectSidebarSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/SendToGitHubButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/StepCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/SubAppDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/ClaudePromptButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[263,266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[263,266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[350,353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[350,353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Bot, Send, Loader2, Sparkles, Edit, RefreshCw } from 'lucide-react';\n\nexport interface ClaudePromptButtonProps {\n  type: 'ask' | 'scaffold' | 'revise' | 'analyze';\n  label?: string;\n  prompt?: string;\n  context?: any;\n  disabled?: boolean;\n  loading?: boolean;\n  onPrompt: (prompt: string, context?: any) => Promise<string>;\n  onResponse?: (response: string) => void;\n  className?: string;\n  testId?: string;\n}\n\nconst BUTTON_CONFIGS = {\n  ask: {\n    icon: Bot,\n    label: 'Ask Claude',\n    color: 'bg-blue-500 hover:bg-blue-600 text-white',\n    placeholder: 'Ask Claude a question...'\n  },\n  scaffold: {\n    icon: Sparkles,\n    label: 'AI Scaffold',\n    color: 'bg-purple-500 hover:bg-purple-600 text-white',\n    placeholder: 'What would you like to scaffold?'\n  },\n  revise: {\n    icon: Edit,\n    label: 'Revise with AI',\n    color: 'bg-amber-500 hover:bg-amber-600 text-white',\n    placeholder: 'How should this be revised?'\n  },\n  analyze: {\n    icon: RefreshCw,\n    label: 'AI Analysis',\n    color: 'bg-green-500 hover:bg-green-600 text-white',\n    placeholder: 'What should be analyzed?'\n  }\n};\n\nexport const ClaudePromptButton: React.FC<ClaudePromptButtonProps> = ({\n  type,\n  label,\n  prompt: initialPrompt = '',\n  context,\n  disabled = false,\n  loading = false,\n  onPrompt,\n  onResponse,\n  className = '',\n  testId\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [prompt, setPrompt] = useState(initialPrompt);\n  const [response, setResponse] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const config = BUTTON_CONFIGS[type];\n  const IconComponent = config.icon;\n\n  const handleSubmit = async () => {\n    if (!prompt.trim() || isLoading) return;\n\n    try {\n      setIsLoading(true);\n      const result = await onPrompt(prompt, context);\n      setResponse(result);\n      onResponse?.(result);\n    } catch (error) {\n      console.error('Claude prompt error:', error);\n      setResponse('Sorry, there was an error processing your request.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  if (!isExpanded) {\n    return (\n      <button\n        onClick={() => setIsExpanded(true)}\n        disabled={disabled || loading}\n        className={`inline-flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${\n          disabled || loading \n            ? 'bg-gray-300 text-gray-500 cursor-not-allowed' \n            : config.color\n        } ${className}`}\n        data-testid={testId}\n      >\n        {loading ? (\n          <Loader2 className=\"w-4 h-4 animate-spin\" />\n        ) : (\n          <IconComponent className=\"w-4 h-4\" />\n        )}\n        <span>{label || config.label}</span>\n      </button>\n    );\n  }\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg shadow-lg p-4 space-y-4 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <IconComponent className=\"w-5 h-5 text-gray-600\" />\n          <h3 className=\"font-medium text-gray-900\">{label || config.label}</h3>\n        </div>\n        <button\n          onClick={() => {\n            setIsExpanded(false);\n            setResponse('');\n          }}\n          className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n        >\n          ✕\n        </button>\n      </div>\n\n      {/* Prompt Input */}\n      <div className=\"space-y-3\">\n        <textarea\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder={config.placeholder}\n          rows={3}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-vertical\"\n          disabled={isLoading}\n          data-testid={`${testId}-input`}\n        />\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-xs text-gray-500\">\n            Press Enter to send, Shift+Enter for new line\n          </div>\n          <button\n            onClick={handleSubmit}\n            disabled={!prompt.trim() || isLoading}\n            className={`inline-flex items-center space-x-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n              !prompt.trim() || isLoading\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : 'bg-blue-500 hover:bg-blue-600 text-white'\n            }`}\n            data-testid={`${testId}-submit`}\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"w-3 h-3 animate-spin\" />\n                <span>Processing...</span>\n              </>\n            ) : (\n              <>\n                <Send className=\"w-3 h-3\" />\n                <span>Send</span>\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Response Preview */}\n      {response && (\n        <div className=\"border-t border-gray-200 pt-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Bot className=\"w-4 h-4 text-blue-500\" />\n            <span className=\"text-sm font-medium text-gray-900\">Claude Response:</span>\n          </div>\n          <div \n            className=\"bg-gray-50 border border-gray-200 rounded-md p-3 text-sm text-gray-700 max-h-64 overflow-y-auto\"\n            data-testid={`${testId}-response`}\n          >\n            <pre className=\"whitespace-pre-wrap font-sans\">{response}</pre>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 mt-3\">\n            <button\n              onClick={() => navigator.clipboard.writeText(response)}\n              className=\"text-xs text-blue-600 hover:text-blue-800 transition-colors\"\n            >\n              Copy Response\n            </button>\n            <button\n              onClick={() => setResponse('')}\n              className=\"text-xs text-gray-600 hover:text-gray-800 transition-colors\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/GovernanceLogItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/HelpTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/PhaseBreadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/ProjectMetadata.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/SmartSuggestion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/StatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/common/StepEnhancements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/AIActionCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/AISummaryPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/AddFeatureModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/ExportPlanButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/FeatureTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/RAGBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/composer/SubAppSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/docs/AIPromptModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/docs/DocsEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/examples/GizmoConsoleExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/integration/IntegrationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/layout/AppLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/layout/BreadcrumbHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/layout/EnhancedProjectSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/layout/ProjectSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/layout/SubAppSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/mesh/AgentMesh.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":399,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14249,14252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14249,14252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Network, Plus, Edit, Trash2, Activity, Settings, X, Check } from 'lucide-react';\nimport type { Agent, AgentConnection, ExternalService, AgentCapability, AgentStatus, ConnectionDirection, AccessType, ConnectionStatus, ServiceType, ServiceStatus } from '../../types/agent';\n\ninterface AgentMeshProps {\n  className?: string;\n}\n\n// Mock data for demonstration\nconst mockAgents: Agent[] = [\n  {\n    id: 'claude-orchestrator',\n    name: 'Claude Orchestrator',\n    description: 'Main orchestration agent for project management',\n    icon: '🤖',\n    capabilities: ['orchestration', 'analysis', 'code_generation'],\n    currentStatus: 'active',\n    version: '1.0.0',\n    endpoint: 'https://api.anthropic.com/v1/claude',\n    createdAt: new Date().toISOString(),\n    lastActiveAt: new Date().toISOString()\n  },\n  {\n    id: 'github-agent',\n    name: 'GitHub Agent',\n    description: 'Manages repository operations and CI/CD workflows',\n    icon: '🐙',\n    capabilities: ['deployment', 'monitoring'],\n    currentStatus: 'active',\n    version: '2.1.0',\n    createdAt: new Date().toISOString(),\n    lastActiveAt: new Date(Date.now() - 5 * 60 * 1000).toISOString()\n  },\n  {\n    id: 'test-runner',\n    name: 'Test Runner Agent',\n    description: 'Automated testing and quality assurance',\n    icon: '🧪',\n    capabilities: ['testing', 'analysis'],\n    currentStatus: 'idle',\n    version: '1.5.2',\n    createdAt: new Date().toISOString()\n  }\n];\n\nconst mockConnections: AgentConnection[] = [\n  {\n    id: 'conn-1',\n    source: 'claude-orchestrator',\n    target: 'github-agent',\n    direction: 'bidirectional',\n    accessType: 'direct',\n    status: 'connected',\n    contextTags: ['deployment', 'orchestration'],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: 'conn-2',\n    source: 'github-agent',\n    target: 'test-runner',\n    direction: 'source_to_target',\n    accessType: 'webhook',\n    status: 'connected',\n    contextTags: ['testing', 'ci-cd'],\n    createdAt: new Date().toISOString()\n  }\n];\n\nconst mockServices: ExternalService[] = [\n  {\n    id: 'anthropic-api',\n    name: 'Anthropic API',\n    type: 'api',\n    status: 'operational',\n    docURL: 'https://docs.anthropic.com',\n    provider: 'Anthropic',\n    region: 'us-west-2',\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: 'github-api',\n    name: 'GitHub API',\n    type: 'api',\n    status: 'operational',\n    docURL: 'https://docs.github.com/rest',\n    provider: 'GitHub',\n    createdAt: new Date().toISOString()\n  }\n];\n\nconst STORAGE_KEY = 'wt-agent-mesh-store';\n\ninterface MeshData {\n  agents: Agent[];\n  connections: AgentConnection[];\n  services: ExternalService[];\n}\n\nexport const AgentMesh: React.FC<AgentMeshProps> = ({ className = '' }) => {\n  const [activeTab, setActiveTab] = useState<'agents' | 'connections' | 'services'>('agents');\n  const [agents, setAgents] = useState<Agent[]>(mockAgents);\n  const [connections, setConnections] = useState<AgentConnection[]>(mockConnections);\n  const [services, setServices] = useState<ExternalService[]>(mockServices);\n  const [showAddModal, setShowAddModal] = useState<'agent' | 'connection' | 'service' | null>(null);\n  const [editingItem, setEditingItem] = useState<{type: 'agent' | 'connection' | 'service', id: string} | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<{type: 'agent' | 'connection' | 'service', id: string} | null>(null);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n      case 'operational':\n      case 'connected':\n        return 'text-green-600 bg-green-100';\n      case 'idle':\n      case 'degraded':\n        return 'text-yellow-600 bg-yellow-100';\n      case 'error':\n      case 'outage':\n      case 'disconnected':\n        return 'text-red-600 bg-red-100';\n      case 'offline':\n      case 'maintenance':\n      case 'pending':\n        return 'text-gray-600 bg-gray-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      try {\n        const data: MeshData = JSON.parse(stored);\n        setAgents(data.agents || mockAgents);\n        setConnections(data.connections || mockConnections);\n        setServices(data.services || mockServices);\n      } catch (error) {\n        console.error('Failed to load stored mesh data:', error);\n      }\n    }\n  }, []);\n\n  // Save data to localStorage whenever state changes\n  useEffect(() => {\n    const data: MeshData = { agents, connections, services };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  }, [agents, connections, services]);\n\n  const handleEditItem = (type: 'agent' | 'connection' | 'service', id: string) => {\n    setEditingItem({ type, id });\n  };\n\n  const handleDeleteItem = (type: 'agent' | 'connection' | 'service', id: string) => {\n    setDeleteConfirm({ type, id });\n  };\n\n  const confirmDelete = () => {\n    if (!deleteConfirm) return;\n    \n    const { type, id } = deleteConfirm;\n    \n    switch (type) {\n      case 'agent':\n        setAgents(prev => prev.filter(item => item.id !== id));\n        // Also remove connections involving this agent\n        setConnections(prev => prev.filter(conn => conn.source !== id && conn.target !== id));\n        break;\n      case 'connection':\n        setConnections(prev => prev.filter(item => item.id !== id));\n        break;\n      case 'service':\n        setServices(prev => prev.filter(item => item.id !== id));\n        break;\n    }\n    \n    setDeleteConfirm(null);\n  };\n\n  const renderAgents = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          🧠 Agents\n        </h3>\n        <button \n          onClick={() => setShowAddModal('agent')}\n          className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Agent\n        </button>\n      </div>\n      \n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {agents.map((agent) => (\n          <div key={agent.id} className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-2xl\">{agent.icon}</span>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900\">{agent.name}</h4>\n                  <p className=\"text-sm text-gray-600\">{agent.description}</p>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => handleEditItem('agent', agent.id)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={() => handleDeleteItem('agent', agent.id)}\n                  className=\"text-gray-400 hover:text-red-600\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Status:</span>\n                <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(agent.currentStatus)}`}>\n                  {agent.currentStatus}\n                </span>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-1\">\n                {agent.capabilities.map((cap, index) => (\n                  <span key={index} className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                    {cap}\n                  </span>\n                ))}\n              </div>\n              \n              {agent.lastActiveAt && (\n                <div className=\"text-xs text-gray-500\">\n                  Last active: {new Date(agent.lastActiveAt).toLocaleTimeString()}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderConnections = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          🔗 Agent Connections\n        </h3>\n        <button \n          onClick={() => setShowAddModal('connection')}\n          className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Connection\n        </button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {connections.map((connection) => (\n          <div key={connection.id} className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-gray-900\">{connection.source}</span>\n                  <span className=\"text-gray-400\">\n                    {connection.direction === 'bidirectional' ? '↔' : \n                     connection.direction === 'source_to_target' ? '→' : '←'}\n                  </span>\n                  <span className=\"font-medium text-gray-900\">{connection.target}</span>\n                </div>\n                <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(connection.status)}`}>\n                  {connection.status}\n                </span>\n              </div>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => handleEditItem('connection', connection.id)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={() => handleDeleteItem('connection', connection.id)}\n                  className=\"text-gray-400 hover:text-red-600\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n              <span>Type: {connection.accessType}</span>\n              <div className=\"flex gap-1\">\n                {connection.contextTags.map((tag, index) => (\n                  <span key={index} className=\"bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs\">\n                    {tag}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderServices = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          📡 External Services\n        </h3>\n        <button \n          onClick={() => setShowAddModal('service')}\n          className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Service\n        </button>\n      </div>\n      \n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {services.map((service) => (\n          <div key={service.id} className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900\">{service.name}</h4>\n                <p className=\"text-sm text-gray-600 capitalize\">{service.type} service</p>\n                {service.provider && (\n                  <p className=\"text-xs text-gray-500\">by {service.provider}</p>\n                )}\n              </div>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => handleEditItem('service', service.id)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={() => handleDeleteItem('service', service.id)}\n                  className=\"text-gray-400 hover:text-red-600\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(service.status)}`}>\n                {service.status}\n              </span>\n              {service.docURL && (\n                <a \n                  href={service.docURL}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-800 text-sm\"\n                >\n                  Docs ↗\n                </a>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <Network className=\"w-6 h-6 text-blue-600\" />\n        <div>\n          <h2 className=\"text-xl font-bold text-gray-900\">Agent Mesh</h2>\n          <p className=\"text-gray-600\">Manage agents, connections, and external services</p>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {[\n            { id: 'agents', label: 'Agents', icon: Activity },\n            { id: 'connections', label: 'Connections', icon: Network },\n            { id: 'services', label: 'Services', icon: Settings }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setActiveTab(id as any)}\n              className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div>\n        {activeTab === 'agents' && renderAgents()}\n        {activeTab === 'connections' && renderConnections()}\n        {activeTab === 'services' && renderServices()}\n      </div>\n\n      {/* Add/Edit Modals */}\n      <AgentModal \n        isOpen={showAddModal === 'agent' || (editingItem?.type === 'agent')}\n        onClose={() => {\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        onSave={(agent) => {\n          if (editingItem?.type === 'agent') {\n            setAgents(prev => prev.map(a => a.id === agent.id ? agent : a));\n          } else {\n            setAgents(prev => [...prev, agent]);\n          }\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        agent={editingItem?.type === 'agent' ? agents.find(a => a.id === editingItem.id) : undefined}\n        agents={agents}\n      />\n\n      <ConnectionModal \n        isOpen={showAddModal === 'connection' || (editingItem?.type === 'connection')}\n        onClose={() => {\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        onSave={(connection) => {\n          if (editingItem?.type === 'connection') {\n            setConnections(prev => prev.map(c => c.id === connection.id ? connection : c));\n          } else {\n            setConnections(prev => [...prev, connection]);\n          }\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        connection={editingItem?.type === 'connection' ? connections.find(c => c.id === editingItem.id) : undefined}\n        agents={agents}\n      />\n\n      <ServiceModal \n        isOpen={showAddModal === 'service' || (editingItem?.type === 'service')}\n        onClose={() => {\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        onSave={(service) => {\n          if (editingItem?.type === 'service') {\n            setServices(prev => prev.map(s => s.id === service.id ? service : s));\n          } else {\n            setServices(prev => [...prev, service]);\n          }\n          setShowAddModal(null);\n          setEditingItem(null);\n        }}\n        service={editingItem?.type === 'service' ? services.find(s => s.id === editingItem.id) : undefined}\n      />\n\n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">Confirm Delete</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Are you sure you want to delete this {deleteConfirm.type}? This action cannot be undone.\n            </p>\n            <div className=\"flex justify-end gap-3\">\n              <button\n                onClick={() => setDeleteConfirm(null)}\n                className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={confirmDelete}\n                className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Modal Components\ninterface AgentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (agent: Agent) => void;\n  agent?: Agent;\n  agents: Agent[];\n}\n\nconst AgentModal: React.FC<AgentModalProps> = ({ isOpen, onClose, onSave, agent, agents }) => {\n  const [formData, setFormData] = useState<Partial<Agent>>({\n    id: '',\n    name: '',\n    description: '',\n    icon: '🤖',\n    capabilities: [],\n    currentStatus: 'idle',\n    version: '1.0.0',\n    endpoint: '',\n    createdAt: new Date().toISOString(),\n    lastActiveAt: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    if (agent) {\n      setFormData(agent);\n    } else {\n      setFormData({\n        id: '',\n        name: '',\n        description: '',\n        icon: '🤖',\n        capabilities: [],\n        currentStatus: 'idle',\n        version: '1.0.0',\n        endpoint: '',\n        createdAt: new Date().toISOString(),\n        lastActiveAt: new Date().toISOString()\n      });\n    }\n  }, [agent, isOpen]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.id) return;\n    \n    // Check for duplicate IDs (except when editing)\n    if (!agent && agents.some(a => a.id === formData.id)) {\n      alert('Agent ID already exists');\n      return;\n    }\n\n    onSave(formData as Agent);\n  };\n\n  const availableCapabilities: AgentCapability[] = ['code_generation', 'testing', 'deployment', 'monitoring', 'analysis', 'orchestration'];\n  const statusOptions: AgentStatus[] = ['active', 'idle', 'error', 'offline', 'maintenance'];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">{agent ? 'Edit Agent' : 'Add New Agent'}</h3>\n          <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">ID *</label>\n              <input\n                type=\"text\"\n                value={formData.id}\n                onChange={(e) => setFormData(prev => ({ ...prev, id: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n                disabled={!!agent}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Name *</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description</label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md h-20\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Icon</label>\n              <input\n                type=\"text\"\n                value={formData.icon}\n                onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={formData.currentStatus}\n                onChange={(e) => setFormData(prev => ({ ...prev, currentStatus: e.target.value as AgentStatus }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {statusOptions.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Version</label>\n              <input\n                type=\"text\"\n                value={formData.version}\n                onChange={(e) => setFormData(prev => ({ ...prev, version: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Endpoint</label>\n            <input\n              type=\"url\"\n              value={formData.endpoint}\n              onChange={(e) => setFormData(prev => ({ ...prev, endpoint: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Capabilities</label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {availableCapabilities.map(capability => (\n                <label key={capability} className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.capabilities?.includes(capability)}\n                    onChange={(e) => {\n                      const caps = formData.capabilities || [];\n                      if (e.target.checked) {\n                        setFormData(prev => ({ ...prev, capabilities: [...caps, capability] }));\n                      } else {\n                        setFormData(prev => ({ ...prev, capabilities: caps.filter(c => c !== capability) }));\n                      }\n                    }}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">{capability}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2\"\n            >\n              <Check className=\"w-4 h-4\" />\n              {agent ? 'Update' : 'Create'} Agent\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\ninterface ConnectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (connection: AgentConnection) => void;\n  connection?: AgentConnection;\n  agents: Agent[];\n}\n\nconst ConnectionModal: React.FC<ConnectionModalProps> = ({ isOpen, onClose, onSave, connection, agents }) => {\n  const [formData, setFormData] = useState<Partial<AgentConnection>>({\n    id: '',\n    source: '',\n    target: '',\n    direction: 'bidirectional',\n    accessType: 'direct',\n    status: 'pending',\n    contextTags: [],\n    createdAt: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    if (connection) {\n      setFormData(connection);\n    } else {\n      setFormData({\n        id: '',\n        source: '',\n        target: '',\n        direction: 'bidirectional',\n        accessType: 'direct',\n        status: 'pending',\n        contextTags: [],\n        createdAt: new Date().toISOString()\n      });\n    }\n  }, [connection, isOpen]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.id || !formData.source || !formData.target) return;\n    \n    onSave(formData as AgentConnection);\n  };\n\n  const directionOptions: ConnectionDirection[] = ['bidirectional', 'source_to_target', 'target_to_source'];\n  const accessOptions: AccessType[] = ['direct', 'proxy', 'gateway', 'webhook'];\n  const statusOptions: ConnectionStatus[] = ['connected', 'disconnected', 'pending', 'error'];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">{connection ? 'Edit Connection' : 'Add New Connection'}</h3>\n          <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Connection ID *</label>\n            <input\n              type=\"text\"\n              value={formData.id}\n              onChange={(e) => setFormData(prev => ({ ...prev, id: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              required\n              disabled={!!connection}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Source Agent *</label>\n              <select\n                value={formData.source}\n                onChange={(e) => setFormData(prev => ({ ...prev, source: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n              >\n                <option value=\"\">Select source agent</option>\n                {agents.map(agent => (\n                  <option key={agent.id} value={agent.id}>{agent.name}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Target Agent *</label>\n              <select\n                value={formData.target}\n                onChange={(e) => setFormData(prev => ({ ...prev, target: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n              >\n                <option value=\"\">Select target agent</option>\n                {agents.map(agent => (\n                  <option key={agent.id} value={agent.id}>{agent.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Direction</label>\n              <select\n                value={formData.direction}\n                onChange={(e) => setFormData(prev => ({ ...prev, direction: e.target.value as ConnectionDirection }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {directionOptions.map(dir => (\n                  <option key={dir} value={dir}>{dir.replace('_', ' ')}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Access Type</label>\n              <select\n                value={formData.accessType}\n                onChange={(e) => setFormData(prev => ({ ...prev, accessType: e.target.value as AccessType }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {accessOptions.map(access => (\n                  <option key={access} value={access}>{access}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={formData.status}\n                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as ConnectionStatus }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {statusOptions.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Context Tags (comma-separated)</label>\n            <input\n              type=\"text\"\n              value={formData.contextTags?.join(', ')}\n              onChange={(e) => setFormData(prev => ({ ...prev, contextTags: e.target.value.split(',').map(t => t.trim()).filter(t => t) }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n              placeholder=\"deployment, testing, monitoring\"\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2\"\n            >\n              <Check className=\"w-4 h-4\" />\n              {connection ? 'Update' : 'Create'} Connection\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\ninterface ServiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (service: ExternalService) => void;\n  service?: ExternalService;\n}\n\nconst ServiceModal: React.FC<ServiceModalProps> = ({ isOpen, onClose, onSave, service }) => {\n  const [formData, setFormData] = useState<Partial<ExternalService>>({\n    id: '',\n    name: '',\n    type: 'api',\n    status: 'operational',\n    docURL: '',\n    healthEndpoint: '',\n    version: '',\n    provider: '',\n    region: '',\n    createdAt: new Date().toISOString()\n  });\n\n  useEffect(() => {\n    if (service) {\n      setFormData(service);\n    } else {\n      setFormData({\n        id: '',\n        name: '',\n        type: 'api',\n        status: 'operational',\n        docURL: '',\n        healthEndpoint: '',\n        version: '',\n        provider: '',\n        region: '',\n        createdAt: new Date().toISOString()\n      });\n    }\n  }, [service, isOpen]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.id || !formData.name) return;\n    \n    onSave(formData as ExternalService);\n  };\n\n  const typeOptions: ServiceType[] = ['api', 'database', 'storage', 'messaging', 'monitoring', 'auth', 'cdn', 'compute'];\n  const statusOptions: ServiceStatus[] = ['operational', 'degraded', 'outage', 'maintenance', 'unknown'];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">{service ? 'Edit Service' : 'Add New Service'}</h3>\n          <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Service ID *</label>\n              <input\n                type=\"text\"\n                value={formData.id}\n                onChange={(e) => setFormData(prev => ({ ...prev, id: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n                disabled={!!service}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Service Name *</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Service Type</label>\n              <select\n                value={formData.type}\n                onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value as ServiceType }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {typeOptions.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={formData.status}\n                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as ServiceStatus }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              >\n                {statusOptions.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Provider</label>\n              <input\n                type=\"text\"\n                value={formData.provider}\n                onChange={(e) => setFormData(prev => ({ ...prev, provider: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Region</label>\n              <input\n                type=\"text\"\n                value={formData.region}\n                onChange={(e) => setFormData(prev => ({ ...prev, region: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Documentation URL</label>\n            <input\n              type=\"url\"\n              value={formData.docURL}\n              onChange={(e) => setFormData(prev => ({ ...prev, docURL: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Health Endpoint</label>\n              <input\n                type=\"url\"\n                value={formData.healthEndpoint}\n                onChange={(e) => setFormData(prev => ({ ...prev, healthEndpoint: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Version</label>\n              <input\n                type=\"text\"\n                value={formData.version}\n                onChange={(e) => setFormData(prev => ({ ...prev, version: e.target.value }))}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2\"\n            >\n              <Check className=\"w-4 h-4\" />\n              {service ? 'Update' : 'Create'} Service\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/orbis/OrbisDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/project/PhasePlanDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/project/ProjectSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/surfaces/DocumentSurface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentPhase' is defined but never used.","line":93,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPhaseChange' is defined but never used.","line":95,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onStepChange' is defined but never used.","line":96,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":116,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3318,3321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3318,3321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":197,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":197,"endColumn":73,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5679,6002],"text":"{ const blob = new Blob([doc.content], { type: 'text/markdown' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${doc.title.replace(/\\s+/g, '-').toLowerCase()}.md`;\n        a.click();\n        URL.revokeObjectURL(url);\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":198,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":198,"endColumn":47,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5679,6002],"text":"{ const blob = new Blob([doc.content], { type: 'text/markdown' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${doc.title.replace(/\\s+/g, '-').toLowerCase()}.md`;\n        a.click();\n        URL.revokeObjectURL(url);\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":199,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":199,"endColumn":47,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5679,6002],"text":"{ const blob = new Blob([doc.content], { type: 'text/markdown' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${doc.title.replace(/\\s+/g, '-').toLowerCase()}.md`;\n        a.click();\n        URL.revokeObjectURL(url);\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":305,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9752,9755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9752,9755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { FileText, Download, Save, Edit, Bot, Upload } from 'lucide-react';\nimport { StatusCard } from '../common/StatusCard';\nimport { ClaudePromptButton } from '../common/ClaudePromptButton';\nimport type { Project, Phase, PhaseStep as Step } from '../../types/phase';\n\ninterface DocumentSurfaceProps {\n  currentProject: Project | null;\n  currentPhase: Phase | null;\n  currentStep: Step | null;\n  onPhaseChange: (phase: Phase) => void;\n  onStepChange: (step: Step) => void;\n}\n\ninterface Document {\n  id: string;\n  title: string;\n  type: 'SOP' | 'Guide' | 'Requirements' | 'Design' | 'Notes';\n  content: string;\n  lastModified: string;\n  author: string;\n  projectId: string;\n  phaseId?: string;\n  stepId?: string;\n  tags: string[];\n  wordCount: number;\n  aiGenerated: boolean;\n}\n\nconst mockDocuments: Document[] = [\n  {\n    id: 'doc-1',\n    title: 'Development Environment Setup SOP',\n    type: 'SOP',\n    content: `# Development Environment Setup\n\n## Prerequisites\n- Node.js 18+\n- Docker Desktop\n- Git 2.3+\n\n## Setup Steps\n1. Clone the repository\n2. Install dependencies with npm install\n3. Configure environment variables\n4. Start development server\n\n## Verification\n- Run npm test to verify setup\n- Check that all services are running\n- Confirm database connection`,\n    lastModified: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n    author: 'dev-team',\n    projectId: 'proj-1',\n    phaseId: 'phase-2',\n    stepId: 'step-1',\n    tags: ['setup', 'development', 'SOP'],\n    wordCount: 89,\n    aiGenerated: false\n  },\n  {\n    id: 'doc-2',\n    title: 'API Integration Requirements',\n    type: 'Requirements',\n    content: `# API Integration Requirements\n\n## Overview\nThis document outlines the requirements for integrating with third-party APIs.\n\n## Functional Requirements\n- Support for REST API calls\n- Authentication token management\n- Rate limiting compliance\n- Error handling and retry logic\n\n## Non-Functional Requirements\n- 99.9% uptime\n- < 200ms response time\n- Secure data transmission\n- Comprehensive logging`,\n    lastModified: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n    author: 'product-team',\n    projectId: 'proj-1',\n    phaseId: 'phase-1',\n    tags: ['requirements', 'API', 'integration'],\n    wordCount: 67,\n    aiGenerated: true\n  }\n];\n\nexport const DocumentSurface: React.FC<DocumentSurfaceProps> = ({\n  currentProject,\n  currentPhase,\n  currentStep,\n  onPhaseChange,\n  onStepChange\n}) => {\n  const [activeTab, setActiveTab] = useState<'documents' | 'editor' | 'ai-assist'>('documents');\n  const [documents] = useState<Document[]>(mockDocuments);\n  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);\n  const [editorContent, setEditorContent] = useState('');\n  const [documentTitle, setDocumentTitle] = useState('');\n\n  if (!currentProject) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Project Selected</h3>\n          <p className=\"text-gray-600\">Select a project to manage documents.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleClaudePrompt = async (prompt: string, context?: any) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    if (prompt.toLowerCase().includes('sop')) {\n      return `I'll help you create a comprehensive SOP for \"${currentProject.name}\". Here's a structured template:\n\n# Standard Operating Procedure: ${currentStep?.name || 'Process Name'}\n\n## Purpose\nDefine the step-by-step process for completing this task efficiently and consistently.\n\n## Scope\nThis SOP applies to all team members working on ${currentProject.name}.\n\n## Prerequisites\n- Access to project resources\n- Required tools and permissions\n- Understanding of project context\n\n## Procedure\n1. **Preparation Phase**\n   - Review requirements and dependencies\n   - Gather necessary resources\n   - Set up working environment\n\n2. **Execution Phase**\n   - Follow the detailed steps below\n   - Document any deviations or issues\n   - Validate outputs at each checkpoint\n\n3. **Completion Phase**\n   - Verify all deliverables meet criteria\n   - Update project tracking systems\n   - Notify relevant stakeholders\n\n## Quality Gates\n- [ ] Requirements understood and documented\n- [ ] Implementation follows standards\n- [ ] Testing completed successfully\n- [ ] Documentation updated\n\n## References\n- Project requirements document\n- Technical specifications\n- Team collaboration guidelines\n\nWould you like me to expand on any particular section?`;\n    }\n\n    return `I can help you with documentation for \"${currentProject.name}\". Here are some suggestions:\n\n**Document Types I can help create:**\n- Standard Operating Procedures (SOPs)\n- Technical requirements\n- Design specifications\n- User guides and tutorials\n- Process documentation\n\n**AI Assistance Features:**\n- Generate document outlines\n- Expand bullet points into full sections\n- Review and improve existing content\n- Create templates for common document types\n- Suggest improvements for clarity and completeness\n\n**Best Practices:**\n- Keep documents concise and actionable\n- Use consistent formatting and structure\n- Include relevant examples and screenshots\n- Regular updates and version control\n- Clear ownership and review processes\n\nWhat type of document would you like me to help you create?`;\n  };\n\n  const handleExport = (format: 'markdown' | 'drive' | 'memory') => {\n    const doc = selectedDocument;\n    if (!doc) return;\n\n    switch (format) {\n      case 'markdown':\n        const blob = new Blob([doc.content], { type: 'text/markdown' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${doc.title.replace(/\\s+/g, '-').toLowerCase()}.md`;\n        a.click();\n        URL.revokeObjectURL(url);\n        break;\n      case 'drive':\n        alert('Google Drive export would be implemented here');\n        break;\n      case 'memory':\n        alert('MemoryPlugin export would be implemented here');\n        break;\n    }\n  };\n\n  const getDocumentStats = () => {\n    const projectDocs = documents.filter(doc => doc.projectId === currentProject.id);\n    const totalWords = projectDocs.reduce((sum, doc) => sum + doc.wordCount, 0);\n    const aiGeneratedCount = projectDocs.filter(doc => doc.aiGenerated).length;\n    const recentDocs = projectDocs.filter(doc => \n      new Date(doc.lastModified) > new Date(Date.now() - 24 * 60 * 60 * 1000)\n    ).length;\n\n    return {\n      totalDocuments: projectDocs.length,\n      totalWords,\n      aiGeneratedCount,\n      recentDocs\n    };\n  };\n\n  const stats = getDocumentStats();\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\" data-testid=\"document-surface\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-3\">\n              <FileText className=\"w-6 h-6 text-purple-600\" />\n              <span>Document Surface</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Rich-text SOP and AI-assisted documentation for {currentProject.name}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <ClaudePromptButton\n              type=\"scaffold\"\n              label=\"Generate Doc\"\n              onPrompt={handleClaudePrompt}\n              testId=\"document-ai-generate\"\n            />\n            <button className=\"flex items-center space-x-2 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\">\n              <Edit className=\"w-4 h-4\" />\n              <span>New Document</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <StatusCard\n            title=\"Total Documents\"\n            status=\"info\"\n            value={stats.totalDocuments}\n            description=\"In this project\"\n            testId=\"document-total-card\"\n          />\n          <StatusCard\n            title=\"Total Words\"\n            status=\"info\"\n            value={stats.totalWords}\n            description=\"Across all documents\"\n            testId=\"document-words-card\"\n          />\n          <StatusCard\n            title=\"AI Generated\"\n            status={stats.aiGeneratedCount > 0 ? 'success' : 'info'}\n            value={stats.aiGeneratedCount}\n            description={`${Math.round((stats.aiGeneratedCount / stats.totalDocuments) * 100)}% of total`}\n            testId=\"document-ai-card\"\n          />\n          <StatusCard\n            title=\"Recent Updates\"\n            status={stats.recentDocs > 0 ? 'success' : 'warning'}\n            value={stats.recentDocs}\n            description=\"Updated today\"\n            testId=\"document-recent-card\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\" role=\"tablist\">\n            {[\n              { id: 'documents', label: 'Document Library', icon: FileText },\n              { id: 'editor', label: 'Rich Text Editor', icon: Edit },\n              { id: 'ai-assist', label: 'AI Assistant', icon: Bot }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === id\n                    ? 'border-purple-500 text-purple-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n                data-testid={`document-tab-${id}`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'documents' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Document Library</h2>\n                <div className=\"flex items-center space-x-2\">\n                  <button className=\"flex items-center space-x-2 px-3 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm\">\n                    <Upload className=\"w-4 h-4\" />\n                    <span>Import</span>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {documents\n                  .filter(doc => doc.projectId === currentProject.id)\n                  .map((doc) => (\n                    <div\n                      key={doc.id}\n                      className={`bg-white border rounded-lg p-4 cursor-pointer hover:shadow-md transition-shadow ${\n                        selectedDocument?.id === doc.id ? 'border-purple-300 bg-purple-50' : 'border-gray-200'\n                      }`}\n                      onClick={() => setSelectedDocument(doc)}\n                      data-testid={`document-card-${doc.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className={`px-2 py-1 text-xs font-medium rounded-full ${\n                          doc.type === 'SOP' ? 'bg-blue-100 text-blue-700' :\n                          doc.type === 'Requirements' ? 'bg-green-100 text-green-700' :\n                          doc.type === 'Design' ? 'bg-purple-100 text-purple-700' :\n                          doc.type === 'Guide' ? 'bg-amber-100 text-amber-700' :\n                          'bg-gray-100 text-gray-700'\n                        }`}>\n                          {doc.type}\n                        </div>\n                        {doc.aiGenerated && (\n                          <div className=\"flex items-center space-x-1 text-xs text-purple-600\">\n                            <Bot className=\"w-3 h-3\" />\n                            <span>AI</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <h3 className=\"font-medium text-gray-900 mb-2 line-clamp-2\">\n                        {doc.title}\n                      </h3>\n\n                      <div className=\"text-sm text-gray-600 mb-3 line-clamp-3\">\n                        {doc.content.substring(0, 100)}...\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>{doc.wordCount} words</span>\n                        <span>{new Date(doc.lastModified).toLocaleDateString()}</span>\n                      </div>\n\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {doc.tags.slice(0, 3).map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"px-2 py-0.5 bg-gray-100 text-gray-600 rounded-full text-xs\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n              </div>\n\n              {/* Export Options */}\n              {selectedDocument && (\n                <div className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\">\n                  <h3 className=\"font-medium text-gray-900 mb-3\">\n                    Export: {selectedDocument.title}\n                  </h3>\n                  <div className=\"flex items-center space-x-3\">\n                    <button\n                      onClick={() => handleExport('markdown')}\n                      className=\"flex items-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      <span>Markdown</span>\n                    </button>\n                    <button\n                      onClick={() => handleExport('drive')}\n                      className=\"flex items-center space-x-2 px-3 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors text-sm\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      <span>Google Drive</span>\n                    </button>\n                    <button\n                      onClick={() => handleExport('memory')}\n                      className=\"flex items-center space-x-2 px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors text-sm\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                      <span>MemoryPlugin</span>\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'editor' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Rich Text Editor</h2>\n                <div className=\"flex items-center space-x-2\">\n                  <button className=\"flex items-center space-x-2 px-3 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors text-sm\">\n                    <Save className=\"w-4 h-4\" />\n                    <span>Save</span>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Document title...\"\n                  value={documentTitle}\n                  onChange={(e) => setDocumentTitle(e.target.value)}\n                  className=\"w-full px-4 py-2 text-lg font-medium border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                  data-testid=\"document-title-input\"\n                />\n\n                <div className=\"border border-gray-300 rounded-lg\">\n                  <div className=\"border-b border-gray-200 p-3 bg-gray-50\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"px-2 py-1 text-sm font-bold border border-gray-300 rounded hover:bg-gray-100\">\n                        B\n                      </button>\n                      <button className=\"px-2 py-1 text-sm italic border border-gray-300 rounded hover:bg-gray-100\">\n                        I\n                      </button>\n                      <button className=\"px-2 py-1 text-sm underline border border-gray-300 rounded hover:bg-gray-100\">\n                        U\n                      </button>\n                      <div className=\"w-px h-6 bg-gray-300\" />\n                      <button className=\"px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100\">\n                        H1\n                      </button>\n                      <button className=\"px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100\">\n                        H2\n                      </button>\n                      <button className=\"px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100\">\n                        List\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <textarea\n                    value={editorContent}\n                    onChange={(e) => setEditorContent(e.target.value)}\n                    placeholder=\"Start writing your document...\"\n                    rows={16}\n                    className=\"w-full p-4 border-none focus:outline-none resize-none font-mono text-sm\"\n                    data-testid=\"document-editor\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                  <span>{editorContent.split(/\\s+/).filter(word => word.length > 0).length} words</span>\n                  <span>Last saved: Never</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'ai-assist' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">AI Documentation Assistant</h2>\n                <div className=\"flex items-center space-x-2\">\n                  <Bot className=\"w-4 h-4 text-purple-500\" />\n                  <span className=\"text-sm text-gray-600\">Powered by Claude</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <ClaudePromptButton\n                  type=\"scaffold\"\n                  prompt=\"Create a comprehensive SOP template for this project phase\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"ai-sop-template\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"ask\"\n                  prompt=\"What documentation do we need for this project phase?\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"ai-doc-recommendations\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"revise\"\n                  prompt=\"Review and improve the existing documentation structure\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"ai-doc-review\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"analyze\"\n                  prompt=\"Analyze documentation gaps and suggest improvements\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\" \n                  testId=\"ai-gap-analysis\"\n                />\n              </div>\n\n              <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                <h3 className=\"font-medium text-purple-900 mb-2\">AI Documentation Tips</h3>\n                <ul className=\"text-sm text-purple-800 space-y-1\">\n                  <li>• Provide context about your project and current phase</li>\n                  <li>• Specify the type of documentation you need (SOP, guide, requirements)</li>\n                  <li>• Include target audience and complexity level</li>\n                  <li>• Ask for specific sections or formats you need</li>\n                  <li>• Request examples and templates for consistency</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/surfaces/ExecuteSurface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pause' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":72,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2307,2310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2307,2310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10066,10069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10066,10069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Play, Pause, CheckCircle, AlertTriangle, Clock, Flag, Activity } from 'lucide-react';\nimport { StatusCard } from '../common/StatusCard';\nimport { ClaudePromptButton } from '../common/ClaudePromptButton';\nimport { PhaseBreadcrumb } from '../common/PhaseBreadcrumb';\nimport type { Project, Phase, PhaseStep as Step } from '../../types/phase';\n\ninterface ExecuteSurfaceProps {\n  currentProject: Project | null;\n  currentPhase: Phase | null;\n  currentStep: Step | null;\n  onPhaseChange: (phase: Phase) => void;\n  onStepChange: (step: Step) => void;\n}\n\ninterface BlockerInfo {\n  id: string;\n  stepId: string;\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  reportedBy: string;\n  reportedAt: string;\n  status: 'open' | 'in_progress' | 'resolved';\n}\n\nconst mockBlockers: BlockerInfo[] = [\n  {\n    id: 'blocker-1',\n    stepId: 'step-2',\n    title: 'API Rate Limiting Issues',\n    description: 'Third-party API is rate limiting our requests, causing timeouts',\n    severity: 'high',\n    reportedBy: 'dev-team',\n    reportedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n    status: 'open'\n  },\n  {\n    id: 'blocker-2', \n    stepId: 'step-1',\n    title: 'Missing Dependencies',\n    description: 'Required environment configuration is not documented',\n    severity: 'medium',\n    reportedBy: 'qa-team',\n    reportedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n    status: 'in_progress'\n  }\n];\n\nexport const ExecuteSurface: React.FC<ExecuteSurfaceProps> = ({\n  currentProject,\n  currentPhase,\n  currentStep,\n  onPhaseChange,\n  onStepChange\n}) => {\n  const [activeTab, setActiveTab] = useState<'tracking' | 'steps' | 'blockers'>('tracking');\n  const [blockers] = useState<BlockerInfo[]>(mockBlockers);\n\n  if (!currentProject) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Activity className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Project Selected</h3>\n          <p className=\"text-gray-600\">Select a project to start execution tracking.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleClaudePrompt = async (prompt: string, context?: any) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    if (prompt.toLowerCase().includes('blocker')) {\n      return `I've analyzed the current blockers for \"${currentProject.name}\":\n\n**Critical Issues:**\n- API rate limiting is affecting development velocity\n- Missing environment configuration is blocking QA testing\n\n**Recommendations:**\n1. **Immediate Actions:**\n   - Implement exponential backoff for API calls\n   - Document all required environment variables\n   - Set up development API keys with higher limits\n\n2. **Process Improvements:**\n   - Add blocker escalation procedures\n   - Create dependency checklists for new phases\n   - Implement automated environment validation\n\n3. **Next Steps:**\n   - Schedule blocker review meeting with stakeholders\n   - Update project timeline to account for resolution time\n   - Consider parallel workstreams to minimize impact\n\nWould you like me to draft specific action items for any of these areas?`;\n    }\n\n    return `I can help you track and manage execution for \"${currentProject.name}\". Here are some insights:\n\n**Current Status:**\n- Project is ${currentProject.completionPercentage}% complete\n- Active phase: ${currentPhase?.name || 'None'}\n- Current step: ${currentStep?.name || 'None'}\n\n**Execution Recommendations:**\n1. Focus on completing blocked steps first\n2. Maintain regular checkpoint reviews\n3. Update progress tracking in real-time\n4. Flag dependencies early to prevent cascading delays\n\n**Key Metrics to Monitor:**\n- Step completion velocity\n- Blocker resolution time\n- Resource utilization\n- Quality gate pass rates\n\nWhat specific aspect would you like me to help you with?`;\n  };\n\n  const getExecutionStats = () => {\n    const allSteps = currentProject.phases.flatMap(phase => phase.steps || []);\n    const completedSteps = allSteps.filter(step => step.status === 'complete' || step.status === 'completed');\n    const inProgressSteps = allSteps.filter(step => step.status === 'in_progress');\n    const blockedSteps = allSteps.filter(step => step.status === 'blocked' || step.status === 'error');\n    const pendingSteps = allSteps.filter(step => step.status === 'not_started');\n\n    const activeBlockers = blockers.filter(blocker => blocker.status === 'open');\n    const criticalBlockers = activeBlockers.filter(blocker => blocker.severity === 'critical' || blocker.severity === 'high');\n\n    return {\n      totalSteps: allSteps.length,\n      completedSteps: completedSteps.length,\n      inProgressSteps: inProgressSteps.length,\n      blockedSteps: blockedSteps.length,\n      pendingSteps: pendingSteps.length,\n      activeBlockers: activeBlockers.length,\n      criticalBlockers: criticalBlockers.length,\n      completionRate: allSteps.length > 0 ? Math.round((completedSteps.length / allSteps.length) * 100) : 0\n    };\n  };\n\n  const stats = getExecutionStats();\n\n  const getStepActionButton = (step: Step) => {\n    switch (step.status) {\n      case 'not_started':\n        return (\n          <button className=\"flex items-center space-x-1 px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm\">\n            <Play className=\"w-3 h-3\" />\n            <span>Start</span>\n          </button>\n        );\n      case 'in_progress':\n        return (\n          <button className=\"flex items-center space-x-1 px-3 py-1 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors text-sm\">\n            <CheckCircle className=\"w-3 h-3\" />\n            <span>Complete</span>\n          </button>\n        );\n      case 'blocked':\n      case 'error':\n        return (\n          <button className=\"flex items-center space-x-1 px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors text-sm\">\n            <Flag className=\"w-3 h-3\" />\n            <span>Unblock</span>\n          </button>\n        );\n      case 'complete':\n      case 'completed':\n        return (\n          <span className=\"flex items-center space-x-1 px-3 py-1 bg-green-100 text-green-700 rounded-md text-sm\">\n            <CheckCircle className=\"w-3 h-3\" />\n            <span>Done</span>\n          </span>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getBlockerSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-amber-100 text-amber-800 border-amber-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\" data-testid=\"execute-surface\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-3\">\n              <Activity className=\"w-6 h-6 text-green-600\" />\n              <span>Execute Surface</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Track phases, trigger steps, and flag blockers for {currentProject.name}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <ClaudePromptButton\n              type=\"analyze\"\n              label=\"Analyze Progress\"\n              onPrompt={handleClaudePrompt}\n              testId=\"execute-ai-analyze\"\n            />\n            <button className=\"flex items-center space-x-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors\">\n              <Flag className=\"w-4 h-4\" />\n              <span>Flag Blocker</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <StatusCard\n            title=\"Completion Rate\"\n            status={stats.completionRate >= 80 ? 'success' : stats.completionRate >= 50 ? 'warning' : 'error'}\n            value={`${stats.completionRate}%`}\n            description={`${stats.completedSteps}/${stats.totalSteps} steps`}\n            testId=\"execute-completion-card\"\n          />\n          <StatusCard\n            title=\"In Progress\"\n            status=\"in_progress\"\n            value={stats.inProgressSteps}\n            description=\"Active steps\"\n            testId=\"execute-progress-card\"\n          />\n          <StatusCard\n            title=\"Blocked Steps\"\n            status={stats.blockedSteps > 0 ? 'error' : 'success'}\n            value={stats.blockedSteps}\n            description=\"Require attention\"\n            testId=\"execute-blocked-card\"\n          />\n          <StatusCard\n            title=\"Active Blockers\"\n            status={stats.criticalBlockers > 0 ? 'error' : stats.activeBlockers > 0 ? 'warning' : 'success'}\n            value={stats.activeBlockers}\n            description={`${stats.criticalBlockers} critical`}\n            testId=\"execute-blockers-card\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\" role=\"tablist\">\n            {[\n              { id: 'tracking', label: 'Phase Tracking', icon: Activity },\n              { id: 'steps', label: 'Step Management', icon: CheckCircle },\n              { id: 'blockers', label: 'Blockers', icon: AlertTriangle }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === id\n                    ? 'border-green-500 text-green-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n                data-testid={`execute-tab-${id}`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'tracking' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Phase Tracking</h2>\n                <ClaudePromptButton\n                  type=\"ask\"\n                  label=\"Get Insights\"\n                  onPrompt={handleClaudePrompt}\n                  testId=\"tracking-claude-ask\"\n                />\n              </div>\n              \n              <PhaseBreadcrumb\n                phases={currentProject.phases}\n                currentPhase={currentPhase}\n                currentStep={currentStep}\n                onPhaseSelect={onPhaseChange}\n                onStepSelect={onStepChange}\n                showSteps={false}\n                testId=\"execute-phase-breadcrumb\"\n              />\n\n              {/* Phase Progress Visualization */}\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h3 className=\"font-medium text-gray-900 mb-4\">Phase Progress Overview</h3>\n                <div className=\"space-y-3\">\n                  {currentProject.phases.map((phase) => {\n                    const phaseSteps = phase.steps || [];\n                    const completedCount = phaseSteps.filter(s => s.status === 'completed').length;\n                    const progress = phaseSteps.length > 0 ? (completedCount / phaseSteps.length) * 100 : 0;\n                    \n                    return (\n                      <div key={phase.id} className=\"flex items-center space-x-4\">\n                        <div className=\"w-32 text-sm font-medium text-gray-700\">\n                          {phase.name}\n                        </div>\n                        <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className={`h-2 rounded-full transition-all duration-300 ${\n                              progress === 100 ? 'bg-green-500' :\n                              progress > 0 ? 'bg-blue-500' : 'bg-gray-300'\n                            }`}\n                            style={{ width: `${progress}%` }}\n                          />\n                        </div>\n                        <div className=\"w-16 text-sm text-gray-600 text-right\">\n                          {Math.round(progress)}%\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'steps' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Step Management</h2>\n                <div className=\"text-sm text-gray-600\">\n                  {currentPhase ? `${currentPhase.steps?.length || 0} steps in ${currentPhase.name}` : 'No phase selected'}\n                </div>\n              </div>\n\n              {currentPhase && currentPhase.steps && currentPhase.steps.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {currentPhase.steps.map((step, index) => (\n                    <div\n                      key={step.id}\n                      className={`bg-white border rounded-lg p-4 hover:shadow-md transition-shadow ${\n                        step.id === currentStep?.id ? 'border-blue-300 bg-blue-50' : 'border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <span className=\"text-sm font-medium text-gray-500\">\n                              Step {index + 1}\n                            </span>\n                            {step.isSideQuest && (\n                              <span className=\"px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded-full\">\n                                Side Quest\n                              </span>\n                            )}\n                            <span className={`px-2 py-0.5 text-xs rounded-full font-medium ${\n                              step.status === 'complete' || step.status === 'completed' ? 'bg-green-100 text-green-700' :\n                              step.status === 'in_progress' ? 'bg-blue-100 text-blue-700' :\n                              step.status === 'blocked' || step.status === 'error' ? 'bg-red-100 text-red-700' :\n                              'bg-gray-100 text-gray-700'\n                            }`}>\n                              {step.status.replace('_', ' ')}\n                            </span>\n                          </div>\n                          \n                          <h3 className=\"text-lg font-medium text-gray-900 mb-1\">\n                            {step.name}\n                          </h3>\n                          \n                          {step.description && (\n                            <p className=\"text-gray-600 text-sm mb-2\">\n                              {step.description}\n                            </p>\n                          )}\n                          \n                          {step.stepInstruction && (\n                            <div className=\"text-xs text-gray-500 bg-gray-50 rounded p-2\">\n                              <strong>Instructions:</strong> {step.stepInstruction}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"ml-4 flex items-center space-x-2\">\n                          {getStepActionButton(step)}\n                          <button className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\">\n                            <Clock className=\"w-4 h-4\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Steps Available</h3>\n                  <p className=\"text-gray-600\">\n                    {currentPhase ? 'This phase has no steps configured.' : 'Select a phase to view its steps.'}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'blockers' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Active Blockers</h2>\n                <ClaudePromptButton\n                  type=\"analyze\"\n                  prompt=\"Analyze current blockers and suggest resolution strategies\"\n                  onPrompt={handleClaudePrompt}\n                  testId=\"blockers-claude-analyze\"\n                />\n              </div>\n\n              {blockers.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {blockers.map((blocker) => (\n                    <div\n                      key={blocker.id}\n                      className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <span className={`px-2 py-1 text-xs font-medium rounded-full border ${\n                              getBlockerSeverityColor(blocker.severity)\n                            }`}>\n                              {blocker.severity.toUpperCase()}\n                            </span>\n                            <span className=\"text-sm text-gray-500\">\n                              Step: {blocker.stepId}\n                            </span>\n                            <span className=\"text-sm text-gray-500\">\n                              {new Date(blocker.reportedAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          \n                          <h3 className=\"text-lg font-medium text-gray-900 mb-1\">\n                            {blocker.title}\n                          </h3>\n                          \n                          <p className=\"text-gray-600 text-sm mb-2\">\n                            {blocker.description}\n                          </p>\n                          \n                          <div className=\"text-xs text-gray-500\">\n                            Reported by: {blocker.reportedBy}\n                          </div>\n                        </div>\n                        \n                        <div className=\"ml-4 flex items-center space-x-2\">\n                          <button className=\"px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm\">\n                            Resolve\n                          </button>\n                          <button className=\"px-3 py-1 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm\">\n                            Update\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-12 h-12 text-green-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Active Blockers</h3>\n                  <p className=\"text-gray-600\">All blockers have been resolved. Great work!</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/surfaces/GovernSurface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentPhase' is defined but never used.","line":178,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentStep' is defined but never used.","line":179,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPhaseChange' is defined but never used.","line":180,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onStepChange' is defined but never used.","line":181,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":200,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6592,6595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6592,6595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":391,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13533,13536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13533,13536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Shield, Search, Filter, Bot, FileText, Calendar } from 'lucide-react';\nimport { StatusCard } from '../common/StatusCard';\nimport { ClaudePromptButton } from '../common/ClaudePromptButton';\nimport { GovernanceLogItem, type GovernanceLogEntry } from '../common/GovernanceLogItem';\nimport type { Project, Phase, PhaseStep as Step } from '../../types/phase';\n\ninterface GovernSurfaceProps {\n  currentProject: Project | null;\n  currentPhase: Phase | null;\n  currentStep: Step | null;\n  onPhaseChange: (phase: Phase) => void;\n  onStepChange: (step: Step) => void;\n}\n\nconst mockGovernanceEntries: GovernanceLogEntry[] = [\n  {\n    id: 'gov-1',\n    entryType: 'Review',\n    title: 'Phase 2 Development Review',\n    summary: 'Comprehensive review of development progress and quality gates',\n    details: `## Review Summary\nConducted thorough review of Phase 2 development activities:\n\n### Key Findings:\n- All critical features implemented on schedule\n- Code quality metrics exceed baseline requirements\n- Test coverage at 85% (target: 80%)\n- Documentation completeness at 90%\n\n### Decisions Made:\n1. Approved progression to next development milestone\n2. Allocated additional resources for performance optimization\n3. Scheduled stakeholder demo for next week\n\n### Action Items:\n- Update project timeline with revised estimates\n- Schedule security review with InfoSec team\n- Prepare client presentation materials\n\n### Risk Assessment:\n- Low risk: Technical implementation\n- Medium risk: Resource availability for Q4\n- High risk: Third-party API dependencies`,\n    author: 'project-manager',\n    timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n    projectId: 'proj-1',\n    phaseId: 'phase-2',\n    tags: ['review', 'development', 'quality'],\n    aiGenerated: false,\n    attachments: ['phase2-review-report.pdf', 'quality-metrics.xlsx']\n  },\n  {\n    id: 'gov-2',\n    entryType: 'AI_Session',\n    title: 'AI Risk Assessment for API Integration',\n    summary: 'Claude-generated analysis of risks associated with third-party API dependencies',\n    details: `## AI Risk Assessment Report\n\n### Analysis Scope:\nThird-party API integration risks for Complize Platform\n\n### Identified Risks:\n1. **Rate Limiting (High)**\n   - Current API limits may be insufficient for peak usage\n   - Mitigation: Implement caching and request batching\n\n2. **Service Availability (Medium)**\n   - SLA guarantees 99.5% uptime\n   - Mitigation: Implement fallback mechanisms and graceful degradation\n\n3. **Data Security (High)**\n   - Sensitive data transmitted via API\n   - Mitigation: End-to-end encryption and data minimization\n\n4. **Cost Escalation (Medium)**\n   - Usage-based pricing model\n   - Mitigation: Implement usage monitoring and alerts\n\n### Recommendations:\n- Establish monitoring dashboards for API health\n- Create incident response procedures\n- Negotiate better SLA terms with vendor\n- Implement circuit breaker patterns`,\n    author: 'claude-ai',\n    timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n    projectId: 'proj-1',\n    phaseId: 'phase-2',\n    stepId: 'step-2',\n    tags: ['AI', 'risk-assessment', 'API', 'security'],\n    aiGenerated: true\n  },\n  {\n    id: 'gov-3',\n    entryType: 'Decision',\n    title: 'Technology Stack Approval',\n    summary: 'Final approval of technology choices for platform implementation',\n    details: `## Technology Stack Decision\n\n### Approved Technologies:\n- **Frontend**: React 18 with TypeScript\n- **Backend**: Node.js with Express\n- **Database**: PostgreSQL with Redis cache\n- **Infrastructure**: AWS with Docker containers\n- **CI/CD**: GitHub Actions with automated testing\n\n### Decision Rationale:\n1. Team expertise and familiarity\n2. Strong community support and documentation\n3. Scalability and performance characteristics\n4. Integration capabilities with existing systems\n5. Long-term maintainability considerations\n\n### Alternatives Considered:\n- Vue.js (rejected due to team familiarity)\n- MongoDB (rejected due to ACID requirements)\n- Azure (rejected due to existing AWS infrastructure)\n\n### Implementation Timeline:\n- Setup and configuration: 2 weeks\n- Development environment: 1 week\n- Production deployment: 3 weeks`,\n    author: 'technical-lead',\n    timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    projectId: 'proj-1',\n    phaseId: 'phase-1',\n    tags: ['decision', 'technology', 'architecture'],\n    aiGenerated: false\n  },\n  {\n    id: 'gov-4',\n    entryType: 'Audit',\n    title: 'Security Compliance Audit',\n    summary: 'Quarterly security audit findings and compliance status',\n    details: `## Security Compliance Audit Report\n\n### Audit Scope:\n- Code security review\n- Infrastructure security assessment\n- Data protection compliance\n- Access control verification\n\n### Findings:\n#### Critical (0):\nNone identified\n\n#### High (1):\n- Insufficient logging for authentication events\n\n#### Medium (3):\n- Missing rate limiting on public APIs\n- Outdated dependency versions\n- Incomplete data retention policies\n\n#### Low (5):\n- Various minor configuration improvements\n\n### Compliance Status:\n- GDPR: Compliant\n- SOC2: Compliant with minor recommendations\n- ISO 27001: In progress (85% complete)\n\n### Remediation Plan:\n1. Immediate: Implement comprehensive audit logging\n2. Short-term: Update dependencies and implement rate limiting\n3. Long-term: Complete ISO 27001 certification process`,\n    author: 'security-team',\n    timestamp: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),\n    projectId: 'proj-1',\n    tags: ['audit', 'security', 'compliance'],\n    aiGenerated: false,\n    relatedEntries: ['gov-2']\n  }\n];\n\nexport const GovernSurface: React.FC<GovernSurfaceProps> = ({\n  currentProject,\n  currentPhase,\n  currentStep,\n  onPhaseChange,\n  onStepChange\n}) => {\n  const [activeTab, setActiveTab] = useState<'logs' | 'reviews' | 'audit'>('logs');\n  const [governanceEntries] = useState<GovernanceLogEntry[]>(mockGovernanceEntries);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n\n  if (!currentProject) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Project Selected</h3>\n          <p className=\"text-gray-600\">Select a project to view governance information.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleClaudePrompt = async (prompt: string, context?: any) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    if (prompt.toLowerCase().includes('audit')) {\n      return `I'll help you prepare for an audit of \"${currentProject.name}\". Here's a comprehensive audit framework:\n\n## Pre-Audit Preparation Checklist\n\n### Documentation Review:\n- [ ] Project charter and scope documents\n- [ ] Risk assessments and mitigation plans\n- [ ] Change management logs\n- [ ] Quality assurance reports\n- [ ] Security compliance documentation\n\n### Process Verification:\n- [ ] Development lifecycle adherence\n- [ ] Code review processes\n- [ ] Testing procedures and coverage\n- [ ] Deployment and rollback procedures\n- [ ] Incident response protocols\n\n### Compliance Assessment:\n- [ ] Regulatory requirements (GDPR, SOX, etc.)\n- [ ] Industry standards (ISO 27001, SOC2)\n- [ ] Internal policy compliance\n- [ ] Data protection measures\n- [ ] Access control verification\n\n### Key Areas of Focus:\n1. **Technical Controls**: Security implementations, monitoring systems\n2. **Operational Controls**: Processes, procedures, training\n3. **Administrative Controls**: Policies, governance structures\n\n### Audit Trail Requirements:\n- Complete change history\n- Decision rationale documentation\n- Approval workflows\n- Exception handling procedures\n- Performance metrics and KPIs\n\nWould you like me to elaborate on any specific audit area?`;\n    }\n\n    return `I can help you with governance activities for \"${currentProject.name}\". Here are some areas I can assist with:\n\n**Governance Support:**\n- Generate audit trails and compliance reports\n- Create risk assessment documentation\n- Draft governance review summaries\n- Analyze project compliance status\n\n**Review Activities:**\n- Quality gate assessments  \n- Phase completion reviews\n- Risk evaluation and mitigation\n- Decision documentation and rationale\n\n**Audit Preparation:**\n- Compliance checklists\n- Evidence collection guidance\n- Gap analysis and remediation plans\n- Audit response preparation\n\n**AI Insights:**\n- Pattern analysis across governance events\n- Risk trend identification\n- Compliance status monitoring\n- Automated report generation\n\nWhat specific governance activity would you like assistance with?`;\n  };\n\n  const getGovernanceStats = () => {\n    const projectEntries = governanceEntries.filter(entry => entry.projectId === currentProject.id);\n    const recentEntries = projectEntries.filter(entry =>\n      new Date(entry.timestamp) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    );\n    const aiGeneratedEntries = projectEntries.filter(entry => entry.aiGenerated);\n    const reviewsCount = projectEntries.filter(entry => entry.entryType === 'Review').length;\n    const auditsCount = projectEntries.filter(entry => entry.entryType === 'Audit').length;\n    const decisionsCount = projectEntries.filter(entry => entry.entryType === 'Decision').length;\n\n    return {\n      totalEntries: projectEntries.length,\n      recentEntries: recentEntries.length,\n      aiGeneratedEntries: aiGeneratedEntries.length,\n      reviewsCount,\n      auditsCount,\n      decisionsCount\n    };\n  };\n\n  const filteredEntries = governanceEntries\n    .filter(entry => entry.projectId === currentProject.id)\n    .filter(entry => filterType === 'all' || entry.entryType === filterType)\n    .filter(entry => \n      searchTerm === '' || \n      entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entry.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entry.tags?.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n  const stats = getGovernanceStats();\n\n  const handleViewEntry = (entryId: string) => {\n    console.log('View entry:', entryId);\n  };\n\n  const handleEditEntry = (entryId: string) => {\n    console.log('Edit entry:', entryId);\n  };\n\n  const handleDeleteEntry = (entryId: string) => {\n    console.log('Delete entry:', entryId);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\" data-testid=\"govern-surface\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-3\">\n              <Shield className=\"w-6 h-6 text-orange-600\" />\n              <span>Govern Surface</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Logs, reviews, and AI audit trails for {currentProject.name}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <ClaudePromptButton\n              type=\"analyze\"\n              label=\"AI Audit\"\n              onPrompt={handleClaudePrompt}\n              testId=\"govern-ai-audit\"\n            />\n            <button className=\"flex items-center space-x-2 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors\">\n              <FileText className=\"w-4 h-4\" />\n              <span>New Entry</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <StatusCard\n            title=\"Total Entries\"\n            status=\"info\"\n            value={stats.totalEntries}\n            description=\"Governance records\"\n            testId=\"govern-total-card\"\n          />\n          <StatusCard\n            title=\"Recent Activity\"\n            status={stats.recentEntries > 0 ? 'success' : 'warning'}\n            value={stats.recentEntries}\n            description=\"This week\"\n            testId=\"govern-recent-card\"\n          />\n          <StatusCard\n            title=\"AI Generated\"\n            status={stats.aiGeneratedEntries > 0 ? 'success' : 'info'}\n            value={stats.aiGeneratedEntries}\n            description={`${Math.round((stats.aiGeneratedEntries / stats.totalEntries) * 100)}% of total`}\n            testId=\"govern-ai-card\"\n          />\n          <StatusCard\n            title=\"Reviews\"\n            status=\"success\"\n            value={stats.reviewsCount}\n            description={`${stats.auditsCount} audits, ${stats.decisionsCount} decisions`}\n            testId=\"govern-reviews-card\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\" role=\"tablist\">\n            {[\n              { id: 'logs', label: 'Governance Logs', icon: FileText },\n              { id: 'reviews', label: 'Reviews & Decisions', icon: Calendar },\n              { id: 'audit', label: 'AI Audit Trail', icon: Bot }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === id\n                    ? 'border-orange-500 text-orange-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n                data-testid={`govern-tab-${id}`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Search and Filter Controls */}\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search governance entries...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500\"\n                data-testid=\"govern-search\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"w-4 h-4 text-gray-500\" />\n              <select\n                value={filterType}\n                onChange={(e) => setFilterType(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500\"\n                data-testid=\"govern-filter\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"Review\">Reviews</option>\n                <option value=\"Decision\">Decisions</option>\n                <option value=\"Change\">Changes</option>\n                <option value=\"AI_Session\">AI Sessions</option>\n                <option value=\"Audit\">Audits</option>\n                <option value=\"Risk_Assessment\">Risk Assessments</option>\n              </select>\n            </div>\n          </div>\n\n          {activeTab === 'logs' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  Governance Logs ({filteredEntries.length})\n                </h2>\n                <ClaudePromptButton\n                  type=\"ask\"\n                  label=\"Ask About Logs\"\n                  onPrompt={handleClaudePrompt}\n                  testId=\"logs-claude-ask\"\n                />\n              </div>\n\n              {filteredEntries.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {filteredEntries.map((entry) => (\n                    <GovernanceLogItem\n                      key={entry.id}\n                      entry={entry}\n                      onView={handleViewEntry}\n                      onEdit={handleEditEntry}\n                      onDelete={handleDeleteEntry}\n                      testId={`log-item-${entry.id}`}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Entries Found</h3>\n                  <p className=\"text-gray-600\">\n                    {searchTerm || filterType !== 'all' \n                      ? 'Try adjusting your search or filter criteria.'\n                      : 'No governance entries have been created yet.'\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'reviews' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Reviews & Decisions</h2>\n                <button className=\"flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>Schedule Review</span>\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-blue-900 mb-2\">Upcoming Reviews</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm text-blue-800\">Phase 3 Kickoff Review - Tomorrow</div>\n                    <div className=\"text-sm text-blue-800\">Security Audit - Next Week</div>\n                    <div className=\"text-sm text-blue-800\">Quarterly Governance Review - Next Month</div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-green-900 mb-2\">Recent Decisions</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm text-green-800\">Technology stack approved</div>\n                    <div className=\"text-sm text-green-800\">Budget allocation finalized</div>\n                    <div className=\"text-sm text-green-800\">Resource assignments confirmed</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {filteredEntries\n                  .filter(entry => entry.entryType === 'Review' || entry.entryType === 'Decision')\n                  .map((entry) => (\n                    <GovernanceLogItem\n                      key={entry.id}\n                      entry={entry}\n                      onView={handleViewEntry}\n                      onEdit={handleEditEntry}\n                      testId={`review-item-${entry.id}`}\n                    />\n                  ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'audit' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">AI Audit Trail</h2>\n                <ClaudePromptButton\n                  type=\"analyze\"\n                  prompt=\"Perform a comprehensive audit analysis of the current project governance\"\n                  onPrompt={handleClaudePrompt}\n                  testId=\"audit-comprehensive-analysis\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <ClaudePromptButton\n                  type=\"scaffold\"\n                  prompt=\"Generate an audit checklist for this project phase\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"audit-checklist\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"ask\"\n                  prompt=\"What are the key compliance requirements for this project?\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"audit-compliance\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"revise\"\n                  prompt=\"Review governance processes and suggest improvements\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"audit-improvements\"\n                />\n              </div>\n\n              <div className=\"space-y-4\">\n                {filteredEntries\n                  .filter(entry => entry.entryType === 'AI_Session' || entry.entryType === 'Audit')\n                  .map((entry) => (\n                    <GovernanceLogItem\n                      key={entry.id}\n                      entry={entry}\n                      onView={handleViewEntry}\n                      testId={`audit-item-${entry.id}`}\n                    />\n                  ))}\n              </div>\n\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                <h3 className=\"font-medium text-orange-900 mb-2\">AI Audit Capabilities</h3>\n                <ul className=\"text-sm text-orange-800 space-y-1\">\n                  <li>• Automated compliance checking against industry standards</li>\n                  <li>• Risk pattern analysis across project phases</li>\n                  <li>• Gap identification in governance processes</li>\n                  <li>• Audit trail validation and completeness verification</li>\n                  <li>• Continuous monitoring and alerting for compliance issues</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/surfaces/IntegrateSurface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentPhase' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentStep' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPhaseChange' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onStepChange' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":25,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[916,919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[916,919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Plug, Activity, RefreshCw, Network } from 'lucide-react';\nimport { OrbisDashboard } from '../orbis/OrbisDashboard';\nimport { AgentMesh } from '../mesh/AgentMesh';\nimport { StatusCard } from '../common/StatusCard';\nimport { ClaudePromptButton } from '../common/ClaudePromptButton';\nimport type { Project, Phase, PhaseStep as Step } from '../../types/phase';\n\ninterface IntegrateSurfaceProps {\n  currentProject: Project | null;\n  currentPhase: Phase | null;\n  currentStep: Step | null;\n  onPhaseChange: (phase: Phase) => void;\n  onStepChange: (step: Step) => void;\n}\n\nexport const IntegrateSurface: React.FC<IntegrateSurfaceProps> = ({\n  currentProject,\n  currentPhase,\n  currentStep,\n  onPhaseChange,\n  onStepChange\n}) => {\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'mesh'>('dashboard');\n  const handleClaudePrompt = async (prompt: string, context?: any) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    if (prompt.toLowerCase().includes('integration')) {\n      return `I can help you analyze and optimize your integrations for \"${currentProject?.name || 'your project'}\":\n\n**Integration Health Analysis:**\n- Monitor API response times and error rates\n- Track service dependencies and bottlenecks\n- Identify integration patterns and anti-patterns\n\n**Recommendations:**\n1. **Performance Optimization:**\n   - Implement circuit breakers for external APIs\n   - Add caching layers where appropriate\n   - Set up retry mechanisms with exponential backoff\n\n2. **Monitoring & Alerting:**\n   - Configure health check endpoints\n   - Set up automated monitoring dashboards\n   - Create alerting rules for critical failures\n\n3. **Best Practices:**\n   - Document API contracts and SLAs\n   - Implement graceful degradation strategies\n   - Regular integration testing and validation\n\n**Next Steps:**\n- Review current integration architecture\n- Implement monitoring for critical services\n- Set up automated health checks\n\nWhat specific integration challenges would you like help with?`;\n    }\n\n    return `I can help you with integration management for \"${currentProject?.name || 'your project'}\". Here are some areas I can assist with:\n\n**Integration Support:**\n- Health check automation and monitoring\n- API integration best practices\n- Service dependency analysis\n- Performance optimization strategies\n\n**Troubleshooting:**\n- Debug integration failures\n- Analyze error patterns and trends\n- Suggest fixes for common issues\n- Performance bottleneck identification\n\n**Planning:**\n- Integration architecture reviews\n- Service mesh recommendations\n- Scaling strategies for high-traffic APIs\n- Security considerations for external integrations\n\nWhat would you like help with today?`;\n  };\n\n  const handleHealthCheck = async () => {\n    console.log('Running health check for all integrations...');\n    // This would trigger the health check for all integrations\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log('Health check completed');\n  };\n\n  if (!currentProject) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Plug className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Project Selected</h3>\n          <p className=\"text-gray-600\">Select a project to view integrations.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\" data-testid=\"integrate-surface\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-3\">\n              <Plug className=\"w-6 h-6 text-purple-600\" />\n              <span>Integrate Surface</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              🔌 Integration Health monitoring and management for {currentProject.name}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <ClaudePromptButton\n              type=\"analyze\"\n              label=\"Analyze Integrations\"\n              onPrompt={handleClaudePrompt}\n              testId=\"integrate-ai-analyze\"\n            />\n            <button \n              onClick={handleHealthCheck}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              <span>Health Check</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <StatusCard\n            title=\"Integration Health\"\n            status=\"success\"\n            value=\"Healthy\"\n            description=\"All systems operational\"\n            testId=\"integrate-health-card\"\n          />\n          <StatusCard\n            title=\"Active Services\"\n            status=\"info\"\n            value=\"12\"\n            description=\"Connected integrations\"\n            testId=\"integrate-services-card\"\n          />\n          <StatusCard\n            title=\"Response Time\"\n            status=\"success\"\n            value=\"<200ms\"\n            description=\"Average API response\"\n            testId=\"integrate-response-card\"\n          />\n          <StatusCard\n            title=\"Uptime\"\n            status=\"success\"\n            value=\"99.9%\"\n            description=\"Last 30 days\"\n            testId=\"integrate-uptime-card\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\">\n            <button\n              onClick={() => setActiveTab('dashboard')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'dashboard'\n                  ? 'border-purple-500 text-purple-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"w-4 h-4\" />\n                <span>Integration Dashboard</span>\n              </div>\n            </button>\n            <button\n              onClick={() => setActiveTab('mesh')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'mesh'\n                  ? 'border-purple-500 text-purple-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <Network className=\"w-4 h-4\" />\n                <span>Agent Mesh</span>\n              </div>\n            </button>\n          </nav>\n        </div>\n        \n        <div className=\"p-6\">\n          {activeTab === 'dashboard' && (\n            <div>\n              <div className=\"mb-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900 flex items-center space-x-2 mb-2\">\n                  <Activity className=\"w-5 h-5 text-purple-600\" />\n                  <span>Integration Dashboard</span>\n                </h2>\n                <p className=\"text-sm text-gray-600\">\n                  Real-time monitoring of all system integrations and dependencies\n                </p>\n              </div>\n              <OrbisDashboard onHealthCheck={handleHealthCheck} />\n            </div>\n          )}\n          \n          {activeTab === 'mesh' && (\n            <AgentMesh />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/components/surfaces/PlanSurface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":48,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1638,1641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1638,1641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8795,8798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8795,8798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Plus, Layout, Target, Bot, Calendar, Users } from 'lucide-react';\nimport { StatusCard } from '../common/StatusCard';\nimport { ClaudePromptButton } from '../common/ClaudePromptButton';\nimport { PhaseBreadcrumb } from '../common/PhaseBreadcrumb';\nimport { ProgressBar } from '../common/ProgressBar';\nimport { HelpTooltip } from '../common/HelpTooltip';\nimport { SmartSuggestion } from '../common/SmartSuggestion';\nimport { EmptyState } from '../common/EmptyState';\nimport type { Project, Phase, PhaseStep as Step } from '../../types/phase';\n\ninterface PlanSurfaceProps {\n  currentProject: Project | null;\n  currentPhase: Phase | null;\n  currentStep: Step | null;\n  onPhaseChange: (phase: Phase) => void;\n  onStepChange: (step: Step) => void;\n}\n\nexport const PlanSurface: React.FC<PlanSurfaceProps> = ({\n  currentProject,\n  currentPhase,\n  currentStep,\n  onPhaseChange,\n  onStepChange\n}) => {\n  const [activeTab, setActiveTab] = useState<'composer' | 'phases' | 'scaffold'>('composer');\n\n  if (!currentProject) {\n    return (\n      <EmptyState\n        icon={Layout}\n        title=\"No Project Selected\"\n        description=\"Select a project from the sidebar to start planning your work surfaces and phases.\"\n        action={{\n          label: \"Create New Project\",\n          onClick: () => console.log(\"Create project clicked\"),\n          variant: \"primary\"\n        }}\n        secondaryAction={{\n          label: \"Browse Templates\",\n          onClick: () => console.log(\"Browse templates clicked\")\n        }}\n      />\n    );\n  }\n\n  const handleClaudePrompt = async (prompt: string, context?: any) => {\n    // Mock Claude API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    if (prompt.toLowerCase().includes('phase')) {\n      return `Based on your project \"${currentProject.name}\", I recommend the following phases:\n\n1. **Discovery & Requirements** (2-3 weeks)\n   - Stakeholder interviews\n   - Technical requirements gathering\n   - Risk assessment\n\n2. **Design & Architecture** (3-4 weeks)\n   - System design\n   - Database schema\n   - API specifications\n\n3. **Development** (8-12 weeks)\n   - Core feature implementation\n   - Integration development\n   - Testing framework setup\n\n4. **Testing & QA** (2-3 weeks)\n   - Unit and integration testing\n   - User acceptance testing\n   - Performance optimization\n\n5. **Deployment & Launch** (1-2 weeks)\n   - Production deployment\n   - Monitoring setup\n   - Go-live activities\n\nThis structure ensures comprehensive coverage while maintaining agility.`;\n    }\n\n    return `I can help you plan your project \"${currentProject.name}\". Here are some suggestions:\n\n**Project Planning Recommendations:**\n- Break down complex features into manageable phases\n- Define clear success criteria for each milestone\n- Identify dependencies and potential bottlenecks\n- Plan for iterative feedback and adjustments\n\n**Next Steps:**\n1. Review and prioritize feature requirements\n2. Create detailed phase plans with specific deliverables\n3. Set up governance checkpoints\n4. Define testing and quality gates\n\nWould you like me to elaborate on any of these areas?`;\n  };\n\n  const getProjectStats = () => {\n    const totalPhases = currentProject.phases.length;\n    const completedPhases = currentProject.phases.filter(p => p.status === 'completed').length;\n    const inProgressPhases = currentProject.phases.filter(p => p.status === 'in_progress').length;\n    const totalSteps = currentProject.phases.reduce((sum, phase) => sum + (phase.steps?.length || 0), 0);\n    const completedSteps = currentProject.phases.reduce((sum, phase) => \n      sum + (phase.steps?.filter(step => step.status === 'complete' || step.status === 'completed').length || 0), 0);\n\n    return {\n      totalPhases,\n      completedPhases,\n      inProgressPhases,\n      totalSteps,\n      completedSteps,\n      completionRate: totalSteps > 0 ? Math.round((completedSteps / totalSteps) * 100) : 0\n    };\n  };\n\n  const stats = getProjectStats();\n\n  return (\n    <div className=\"wt-section-spacing\" data-testid=\"plan-surface\">\n      {/* Smart Suggestions */}\n      {stats.completionRate < 20 && (\n        <SmartSuggestion\n          title=\"Get Started with AI Scaffolding\"\n          description=\"Let Claude help you create a complete project structure based on your requirements. This can save hours of planning time.\"\n          variant=\"tip\"\n          actions={[\n            {\n              label: \"Try AI Scaffold\",\n              onClick: () => setActiveTab('scaffold'),\n              variant: \"primary\"\n            },\n            {\n              label: \"Learn More\",\n              onClick: () => console.log(\"Learn more clicked\")\n            }\n          ]}\n        />\n      )}\n\n      {stats.totalPhases === 0 && (\n        <SmartSuggestion\n          title=\"Create Your First Phase\"\n          description=\"Break your project into manageable phases to track progress and organize work effectively.\"\n          variant=\"info\"\n          actions={[\n            {\n              label: \"Add Phase\",\n              onClick: () => console.log(\"Add phase clicked\"),\n              variant: \"primary\"\n            }\n          ]}\n        />\n      )}\n\n      {/* Header */}\n      <div className=\"wt-card wt-breathing-room mb-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <div className=\"flex items-center mb-2\" style={{ gap: 'var(--wt-space-3)' }}>\n              <h1 className=\"wt-heading-2 flex items-center\" style={{ gap: 'var(--wt-space-3)' }}>\n                <Layout className=\"w-6 h-6\" style={{ color: 'var(--wt-primary-600)' }} />\n                <span>Set Up</span>\n              </h1>\n              <HelpTooltip \n                content=\"The Set Up surface helps you plan your project structure, create phases, and use AI to scaffold your work.\"\n                position=\"right\"\n              />\n            </div>\n            <p className=\"wt-body-large\">\n              Composer, phase setup, and AI scaffolding for {currentProject.name}\n            </p>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\n            <ClaudePromptButton\n              type=\"scaffold\"\n              label=\"AI Scaffold\"\n              onPrompt={handleClaudePrompt}\n              testId=\"plan-ai-scaffold\"\n            />\n            <button className=\"wt-button-primary wt-focus-ring wt-mobile-full-width flex items-center justify-center gap-2\">\n              <Plus className=\"w-4 h-4\" />\n              <span>New Phase</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Project Progress Overview */}\n        <div className=\"wt-card mb-6\" style={{ padding: 'var(--wt-space-6)' }}>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"wt-heading-4\">Project Progress</h3>\n            <span className=\"wt-caption\">{stats.completedSteps} of {stats.totalSteps} steps complete</span>\n          </div>\n          <ProgressBar\n            value={stats.completionRate}\n            max={100}\n            variant={stats.completionRate >= 80 ? 'success' : stats.completionRate >= 50 ? 'default' : 'warning'}\n            showPercentage={true}\n            animated={true}\n          />\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 wt-section-spacing\">\n          <StatusCard\n            title=\"Active Phases\"\n            status=\"in_progress\"\n            value={stats.inProgressPhases}\n            description={`${stats.completedPhases} completed`}\n            testId=\"plan-phases-card\"\n          />\n          <StatusCard\n            title=\"Project Type\"\n            status=\"info\"\n            value={currentProject.projectType}\n            description={`Owner: ${currentProject.projectOwner}`}\n            testId=\"plan-type-card\"\n          />\n          <StatusCard\n            title=\"Status\"\n            status={currentProject.status === 'Active' ? 'success' : 'warning'}\n            value={currentProject.status}\n            description=\"Project health\"\n            testId=\"plan-status-card\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\" role=\"tablist\">\n            {[\n              { id: 'composer', label: 'Project Composer', icon: Target },\n              { id: 'phases', label: 'Phase Setup', icon: Calendar },\n              { id: 'scaffold', label: 'AI Scaffold', icon: Bot }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n                data-testid={`plan-tab-${id}`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'composer' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Project Composer</h2>\n                <ClaudePromptButton\n                  type=\"ask\"\n                  label=\"Ask Claude\"\n                  onPrompt={handleClaudePrompt}\n                  testId=\"composer-claude-ask\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-gray-900 mb-3\">Feature Planning</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Plan and organize features for your project with AI assistance.\n                  </p>\n                  <button className=\"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors\">\n                    Open Feature Composer\n                  </button>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-gray-900 mb-3\">Requirements</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Define and manage project requirements and acceptance criteria.\n                  </p>\n                  <button className=\"w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors\">\n                    Manage Requirements\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'phases' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Phase Setup</h2>\n                <button className=\"flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\">\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Add Phase</span>\n                </button>\n              </div>\n\n              <PhaseBreadcrumb\n                phases={currentProject.phases}\n                currentPhase={currentPhase}\n                currentStep={currentStep}\n                onPhaseSelect={onPhaseChange}\n                onStepSelect={onStepChange}\n                showSteps={true}\n                testId=\"plan-phase-breadcrumb\"\n              />\n            </div>\n          )}\n\n          {activeTab === 'scaffold' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">AI Scaffold</h2>\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-4 h-4 text-gray-400\" />\n                  <span className=\"text-sm text-gray-600\">Powered by Claude</span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <ClaudePromptButton\n                  type=\"scaffold\"\n                  prompt=\"Generate a comprehensive project plan with phases, milestones, and deliverables\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"scaffold-project-plan\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"analyze\"\n                  prompt=\"Analyze current project structure and suggest improvements\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"scaffold-analyze\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"ask\"\n                  prompt=\"What are the key risks and mitigation strategies for this project?\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"scaffold-risks\"\n                />\n                \n                <ClaudePromptButton\n                  type=\"revise\"\n                  prompt=\"Review and optimize the current phase structure\"\n                  onPrompt={handleClaudePrompt}\n                  className=\"w-full\"\n                  testId=\"scaffold-optimize\"\n                />\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h3 className=\"font-medium text-blue-900 mb-2\">AI Scaffolding Tips</h3>\n                <ul className=\"text-sm text-blue-800 space-y-1\">\n                  <li>• Be specific about your project goals and constraints</li>\n                  <li>• Include context about your team size and timeline</li>\n                  <li>• Mention any existing systems or dependencies</li>\n                  <li>• Ask for iterative refinements based on feedback</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/contexts/ProjectContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[423,426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[423,426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReactNode } from 'react';\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport type { Project, Phase, PhaseStep } from '../types/phase';\n\ninterface GovernanceEvent {\n  id: string;\n  phaseStepId: string;\n  newStatus: PhaseStep['status'];\n  triggeredBy: string;\n  eventType: 'StepStatusUpdated' | 'StepAdded' | 'StepRemoved' | 'PhaseUpdated';\n  timestamp: string;\n  details?: any;\n}\n\ninterface ProjectContextType {\n  projects: Project[];\n  activeProjectId: string | undefined;\n  governanceLog: GovernanceEvent[];\n  setProjects: (projects: Project[]) => void;\n  setActiveProjectId: (projectId: string) => void;\n  updatePhaseStep: (projectId: string, phaseId: string, stepId: string, updates: Partial<PhaseStep>) => void;\n  addPhaseStep: (projectId: string, phaseId: string, step: PhaseStep) => void;\n  removePhaseStep: (projectId: string, phaseId: string, stepId: string) => void;\n  updatePhase: (projectId: string, phaseId: string, updates: Partial<Phase>) => void;\n  logGovernanceEvent: (event: Omit<GovernanceEvent, 'id' | 'timestamp'>) => void;\n}\n\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\n\nexport const useProjectContext = () => {\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProjectContext must be used within a ProjectProvider');\n  }\n  return context;\n};\n\ninterface ProjectProviderProps {\n  children: ReactNode;\n  initialProjects?: Project[];\n  initialActiveProjectId?: string;\n}\n\nexport const ProjectProvider: React.FC<ProjectProviderProps> = ({ \n  children, \n  initialProjects = [], \n  initialActiveProjectId \n}) => {\n  const [projects, setProjects] = useState<Project[]>(initialProjects);\n  const [activeProjectId, setActiveProjectId] = useState<string | undefined>(initialActiveProjectId);\n  const [governanceLog, setGovernanceLog] = useState<GovernanceEvent[]>([]);\n\n  const logGovernanceEvent = useCallback((event: Omit<GovernanceEvent, 'id' | 'timestamp'>) => {\n    const newEvent: GovernanceEvent = {\n      ...event,\n      id: `gov-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString()\n    };\n    \n    setGovernanceLog(prev => [...prev, newEvent]);\n    console.log('[Governance Log]', newEvent);\n  }, []);\n\n  const updatePhaseStep = useCallback((projectId: string, phaseId: string, stepId: string, updates: Partial<PhaseStep>) => {\n    setProjects(prev => prev.map(project => {\n      if (project.id !== projectId) return project;\n      \n      return {\n        ...project,\n        phases: project.phases.map(phase => {\n          if (phase.id !== phaseId) return phase;\n          \n          return {\n            ...phase,\n            steps: phase.steps.map(step => {\n              if (step.id !== stepId) return step;\n              \n              // Log status changes\n              if (updates.status && updates.status !== step.status) {\n                logGovernanceEvent({\n                  phaseStepId: stepId,\n                  newStatus: updates.status,\n                  triggeredBy: 'current-user', // In real app, this would come from auth context\n                  eventType: 'StepStatusUpdated',\n                  details: {\n                    previousStatus: step.status,\n                    phaseId,\n                    projectId\n                  }\n                });\n              }\n              \n              return { ...step, ...updates };\n            })\n          };\n        })\n      };\n    }));\n  }, [logGovernanceEvent]);\n\n  const addPhaseStep = useCallback((projectId: string, phaseId: string, step: PhaseStep) => {\n    setProjects(prev => prev.map(project => {\n      if (project.id !== projectId) return project;\n      \n      return {\n        ...project,\n        phases: project.phases.map(phase => {\n          if (phase.id !== phaseId) return phase;\n          \n          logGovernanceEvent({\n            phaseStepId: step.id,\n            newStatus: step.status,\n            triggeredBy: 'current-user',\n            eventType: 'StepAdded',\n            details: {\n              stepName: step.name,\n              phaseId,\n              projectId\n            }\n          });\n          \n          return {\n            ...phase,\n            steps: [...phase.steps, step]\n          };\n        })\n      };\n    }));\n  }, [logGovernanceEvent]);\n\n  const removePhaseStep = useCallback((projectId: string, phaseId: string, stepId: string) => {\n    setProjects(prev => prev.map(project => {\n      if (project.id !== projectId) return project;\n      \n      return {\n        ...project,\n        phases: project.phases.map(phase => {\n          if (phase.id !== phaseId) return phase;\n          \n          const stepToRemove = phase.steps.find(s => s.id === stepId);\n          if (stepToRemove) {\n            logGovernanceEvent({\n              phaseStepId: stepId,\n              newStatus: stepToRemove.status,\n              triggeredBy: 'current-user',\n              eventType: 'StepRemoved',\n              details: {\n                stepName: stepToRemove.name,\n                phaseId,\n                projectId\n              }\n            });\n          }\n          \n          return {\n            ...phase,\n            steps: phase.steps.filter(step => step.id !== stepId)\n          };\n        })\n      };\n    }));\n  }, [logGovernanceEvent]);\n\n  const updatePhase = useCallback((projectId: string, phaseId: string, updates: Partial<Phase>) => {\n    setProjects(prev => prev.map(project => {\n      if (project.id !== projectId) return project;\n      \n      return {\n        ...project,\n        phases: project.phases.map(phase => {\n          if (phase.id !== phaseId) return phase;\n          \n          logGovernanceEvent({\n            phaseStepId: phaseId,\n            newStatus: 'not_started', // Phase-level event\n            triggeredBy: 'current-user',\n            eventType: 'PhaseUpdated',\n            details: {\n              updates,\n              projectId\n            }\n          });\n          \n          return { ...phase, ...updates };\n        })\n      };\n    }));\n  }, [logGovernanceEvent]);\n\n  const value: ProjectContextType = {\n    projects,\n    activeProjectId,\n    governanceLog,\n    setProjects,\n    setActiveProjectId,\n    updatePhaseStep,\n    addPhaseStep,\n    removePhaseStep,\n    updatePhase,\n    logGovernanceEvent\n  };\n\n  return (\n    <ProjectContext.Provider value={value}>\n      {children}\n    </ProjectContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/data/mockPrograms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/data/mockProjects.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[222,225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[222,225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Project } from '../types/models';\n\n// Extended project interface with program linking\ninterface MockProject extends Partial<Project> {\n  id: string;\n  title: string;\n  linkedProgramId: string;\n  phaseSteps?: any[];\n}\n\nexport const mockProjects: MockProject[] = [\n  {\n    id: 'proj-orbis-001',\n    title: 'Data Analytics Pipeline',\n    description: 'Core data processing and analytics infrastructure',\n    linkedProgramId: 'prog-orbis-001',\n    phaseSteps: [\n      { id: 'step-1', stepNumber: 1, stepInstruction: 'Set up data ingestion' },\n      { id: 'step-2', stepNumber: 2, stepInstruction: 'Implement analytics engine' },\n      { id: 'step-3', stepNumber: 3, stepInstruction: 'Create dashboard interface' }\n    ]\n  },\n  {\n    id: 'proj-orbis-002',\n    title: 'Intelligence Reporting',\n    description: 'Automated intelligence report generation system',\n    linkedProgramId: 'prog-orbis-001',\n    phaseSteps: [\n      { id: 'step-4', stepNumber: 1, stepInstruction: 'Design report templates' },\n      { id: 'step-5', stepNumber: 2, stepInstruction: 'Implement report generation' }\n    ]\n  },\n  {\n    id: 'proj-complize-001',\n    title: 'Compliance Management Core',\n    description: 'Central compliance tracking and management system',\n    linkedProgramId: 'prog-complize-001',\n    phaseSteps: [\n      { id: 'step-6', stepNumber: 1, stepInstruction: 'Define compliance framework' },\n      { id: 'step-7', stepNumber: 2, stepInstruction: 'Build tracking dashboard' },\n      { id: 'step-8', stepNumber: 3, stepInstruction: 'Implement audit trails' },\n      { id: 'step-9', stepNumber: 4, stepInstruction: 'Create compliance reports' }\n    ]\n  },\n  {\n    id: 'proj-complize-002',\n    title: 'Risk Assessment Module',\n    description: 'Automated risk assessment and mitigation planning',\n    linkedProgramId: 'prog-complize-001',\n    phaseSteps: [\n      { id: 'step-10', stepNumber: 1, stepInstruction: 'Define risk categories' },\n      { id: 'step-11', stepNumber: 2, stepInstruction: 'Build assessment engine' }\n    ]\n  },\n  {\n    id: 'proj-meta-001',\n    title: 'Platform Infrastructure',\n    description: 'Core platform services and infrastructure setup',\n    linkedProgramId: 'prog-metaplatform-001',\n    phaseSteps: [\n      { id: 'step-12', stepNumber: 1, stepInstruction: 'Plan infrastructure architecture' },\n      { id: 'step-13', stepNumber: 2, stepInstruction: 'Set up development environment' },\n      { id: 'step-14', stepNumber: 3, stepInstruction: 'Implement core services' }\n    ]\n  }\n];","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/lib/aiDispatchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/lib/getIntegrationHealth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IntegrationHealth {\n  id: string;\n  label: string;\n  status: 'healthy' | 'warning' | 'error' | 'unknown';\n  type: 'AI' | 'CI/CD' | 'Test' | 'Data';\n  category: 'AI' | 'CI/CD' | 'Test' | 'Data' | 'API' | 'Database' | 'Service' | 'Monitoring';\n  lastChecked: string; // ISO string\n  logUrl?: string;\n  responseTime?: number; // in milliseconds\n  uptime?: number; // percentage\n  metadata?: Record<string, any>;\n}\n\n// In-memory store for health data (in production, this would be a database)\nlet healthStore: IntegrationHealth[] = [\n  {\n    id: 'claude-api',\n    label: 'Claude API',\n    status: 'healthy',\n    type: 'AI',\n    category: 'AI',\n    lastChecked: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/claude-api',\n    responseTime: 150,\n    uptime: 99.9,\n    metadata: {\n      version: 'v1.0',\n      region: 'us-west-2',\n      requestsPerMinute: 42\n    }\n  },\n  {\n    id: 'chatgpt-api',\n    label: 'ChatGPT API',\n    status: 'healthy',\n    type: 'AI',\n    category: 'AI',\n    lastChecked: new Date(Date.now() - 3 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/chatgpt-api',\n    responseTime: 180,\n    uptime: 99.5,\n    metadata: {\n      version: 'gpt-4',\n      tokensPerMinute: 1500\n    }\n  },\n  {\n    id: 'github-actions',\n    label: 'GitHub Actions',\n    status: 'healthy',\n    type: 'CI/CD',\n    category: 'CI/CD',\n    lastChecked: new Date(Date.now() - 10 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/github-actions',\n    responseTime: 300,\n    uptime: 99.8,\n    metadata: {\n      activeWorkflows: 3,\n      lastDeployment: '2025-01-25T10:30:00Z'\n    }\n  },\n  {\n    id: 'claude-dispatcher',\n    label: 'Claude Dispatcher',\n    status: 'warning',\n    type: 'CI/CD',\n    category: 'CI/CD',\n    lastChecked: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/claude-dispatcher',\n    responseTime: 800,\n    uptime: 95.2,\n    metadata: {\n      queueSize: 15,\n      processingRate: 'slow',\n      lastError: 'Rate limit exceeded'\n    }\n  },\n  {\n    id: 'puppeteer-tests',\n    label: 'Puppeteer Tests',\n    status: 'healthy',\n    type: 'Test',\n    category: 'Test',\n    lastChecked: new Date(Date.now() - 2 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/puppeteer-tests',\n    responseTime: 2500,\n    uptime: 98.7,\n    metadata: {\n      testsRun: 127,\n      passRate: 94.5,\n      lastRun: '2025-01-25T11:45:00Z'\n    }\n  },\n  {\n    id: 'drive-memory',\n    label: 'Drive Memory',\n    status: 'error',\n    type: 'Data',\n    category: 'Data',\n    lastChecked: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/drive-memory',\n    responseTime: 5000,\n    uptime: 85.3,\n    metadata: {\n      storageUsed: '45GB',\n      syncStatus: 'failed',\n      lastSync: '2025-01-25T09:15:00Z',\n      error: 'Authentication expired'\n    }\n  },\n  {\n    id: 'memory-plugin',\n    label: 'Memory Plugin',\n    status: 'healthy',\n    type: 'Data',\n    category: 'Data',\n    lastChecked: new Date(Date.now() - 8 * 60 * 1000).toISOString(),\n    logUrl: 'https://logs.example.com/memory-plugin',\n    responseTime: 120,\n    uptime: 99.1,\n    metadata: {\n      documentsIndexed: 1423,\n      searchLatency: 45,\n      lastUpdate: '2025-01-25T11:52:00Z'\n    }\n  }\n];\n\n// Simulate real health checks (in production, these would be actual API calls)\nconst performHealthCheck = async (integration: IntegrationHealth): Promise<IntegrationHealth> => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));\n\n  // Simulate health check logic based on integration type\n  let newStatus: IntegrationHealth['status'] = 'healthy';\n  let responseTime = Math.random() * 300 + 100;\n\n  switch (integration.type) {\n    case 'AI':\n      // AI services might have rate limits or API issues\n      if (Math.random() < 0.1) newStatus = 'warning';\n      if (Math.random() < 0.05) newStatus = 'error';\n      responseTime = Math.random() * 500 + 100;\n      break;\n    \n    case 'CI/CD':\n      // CI/CD might have build failures or deployment issues\n      if (Math.random() < 0.15) newStatus = 'warning';\n      if (Math.random() < 0.08) newStatus = 'error';\n      responseTime = Math.random() * 1000 + 200;\n      break;\n    \n    case 'Test':\n      // Testing services might have infrastructure issues\n      if (Math.random() < 0.12) newStatus = 'warning';\n      if (Math.random() < 0.06) newStatus = 'error';\n      responseTime = Math.random() * 3000 + 1000;\n      break;\n    \n    case 'Data':\n      // Data services might have storage or sync issues\n      if (Math.random() < 0.2) newStatus = 'warning';\n      if (Math.random() < 0.1) newStatus = 'error';\n      responseTime = Math.random() * 2000 + 100;\n      break;\n  }\n\n  return {\n    ...integration,\n    status: newStatus,\n    lastChecked: new Date().toISOString(),\n    responseTime: Math.round(responseTime),\n    uptime: Math.max(85, Math.min(99.9, integration.uptime! + (Math.random() - 0.5) * 2))\n  };\n};\n\nexport const fetchIntegrationHealth = async (): Promise<IntegrationHealth[]> => {\n  // Return current health store data\n  return [...healthStore];\n};\n\nexport const refreshIntegrationHealth = async (integrationId?: string): Promise<IntegrationHealth[]> => {\n  if (integrationId) {\n    // Refresh specific integration\n    const integration = healthStore.find(item => item.id === integrationId);\n    if (integration) {\n      const updatedIntegration = await performHealthCheck(integration);\n      healthStore = healthStore.map(item => \n        item.id === integrationId ? updatedIntegration : item\n      );\n    }\n  } else {\n    // Refresh all integrations\n    const healthCheckPromises = healthStore.map(integration => performHealthCheck(integration));\n    const updatedIntegrations = await Promise.all(healthCheckPromises);\n    healthStore = updatedIntegrations;\n  }\n  \n  return [...healthStore];\n};\n\nexport const getIntegrationById = async (id: string): Promise<IntegrationHealth | null> => {\n  return healthStore.find(integration => integration.id === id) || null;\n};\n\nexport const updateIntegrationHealth = (id: string, updates: Partial<IntegrationHealth>): IntegrationHealth | null => {\n  const index = healthStore.findIndex(integration => integration.id === id);\n  if (index !== -1) {\n    healthStore[index] = { ...healthStore[index], ...updates };\n    return healthStore[index];\n  }\n  return null;\n};\n\n// Initialize with some random variation in timestamps and status\nconst initializeHealthStore = () => {\n  healthStore = healthStore.map(integration => ({\n    ...integration,\n    lastChecked: new Date(Date.now() - Math.random() * 30 * 60 * 1000).toISOString(), // Random within last 30 minutes\n    responseTime: Math.round(integration.responseTime! * (0.8 + Math.random() * 0.4)) // ±20% variation\n  }));\n};\n\n// Initialize on module load\ninitializeHealthStore();","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/lib/templateDispatcher.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'templateId' is defined but never used.","line":3,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'templateName' is defined but never used.","line":3,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":71}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Template dispatcher stub for dashboard compatibility\n\nexport const triggerTemplate = async (templateId: string, templateName: string) => {\n  // Mock implementation - return success\n  return {\n    success: true,\n    executionId: `exec-${Date.now()}`,\n    message: 'Template triggered successfully'\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/mockData/featureSeeds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/pages/DocsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/pages/OrbisDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/pages/PhasePlan.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PhaseStep' is defined but never used.","line":9,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// wombat-track/src/pages/PhasePlan.tsx\n// WT-3.7: Integrated with shared ProjectContext for synchronized planning and execution\nimport React, { useState } from 'react';\nimport { ProjectDashboard } from '../components/ProjectDashboard';\nimport { PhasePlanView } from '../components/PhasePlanView';\nimport { GovernanceLogViewer } from '../components/GovernanceLogViewer';\nimport ProjectSidebarSimple from '../components/ProjectSidebarSimple';\nimport { ProjectProvider, useProjectContext } from '../contexts/ProjectContext';\nimport type { Project, PhaseStep } from '../types/phase';\n\n// Mock project data for dashboard demonstration\nconst mockProjects: Project[] = [\n  {\n    id: 'complize-ui-retrofit',\n    name: 'Complize UI Retrofit',\n    description: 'Sidebar recovery and dashboard restoration for WT-3.3.1',\n    createdAt: '2025-07-24T10:00:00Z',\n    createdBy: 'jtaylor',\n    projectOwner: 'jtaylor',\n    projectType: 'Platform',\n    status: 'Active',\n    colorTag: 'purple',\n    phases: [\n      {\n        id: 'wt-3.3.1-dashboard-restore',\n        projectId: 'complize-ui-retrofit',\n        name: 'WT-3.3.1 – Project Dashboard Layout Restoration',\n        description: 'Reconstruct dashboard UI to match WT-2.9 reference',\n        order: 1,\n        ragStatus: 'green',\n        phaseType: 'Development',\n        steps: [\n          {\n            id: 'step-1',\n            phaseId: 'wt-3.3.1-dashboard-restore',\n            name: 'Restore ProjectDashboard.tsx with proper layout',\n            status: 'complete',\n            description: 'Reconstruct main dashboard component with sidebar integration',\n            stepInstruction: 'Restore ProjectDashboard.tsx with proper layout',\n            startedAt: '2025-07-24T10:00:00Z',\n            completedAt: '2025-07-24T10:30:00Z',\n            isSideQuest: false\n          },\n          {\n            id: 'step-2', \n            phaseId: 'wt-3.3.1-dashboard-restore',\n            name: 'Integrate ProjectSwitcher in header',\n            status: 'in_progress',\n            description: 'Add project switcher component to dashboard header',\n            stepInstruction: 'Integrate ProjectSwitcher in header',\n            startedAt: '2025-07-24T10:30:00Z',\n            isSideQuest: false\n          },\n          {\n            id: 'step-3',\n            phaseId: 'wt-3.3.1-dashboard-restore',\n            name: 'Add RAG status badges and phase hierarchy',\n            status: 'not_started',\n            description: 'Implement visual status indicators and nested phase structure',\n            stepInstruction: 'Add RAG status badges and phase hierarchy',\n            isSideQuest: false\n          }\n        ]\n      },\n      {\n        id: 'wt-3.3.2-testing',\n        projectId: 'complize-ui-retrofit',\n        name: 'WT-3.3.2 – Puppeteer Visual Testing',\n        description: 'Add automated visual regression tests',\n        order: 2,\n        ragStatus: 'amber',\n        phaseType: 'Testing',\n        steps: [\n          {\n            id: 'step-4',\n            phaseId: 'wt-3.3.2-testing',\n            name: 'Create project_dashboard_ui.spec.js',\n            status: 'not_started',\n            description: 'Puppeteer test for dashboard rendering and layout',\n            stepInstruction: 'Create project_dashboard_ui.spec.js',\n            templateId: 'puppeteer-ui-test',\n            isSideQuest: false\n          },\n          {\n            id: 'step-5',\n            phaseId: 'wt-3.3.2-testing',\n            name: 'Capture baseline screenshots',\n            status: 'not_started',\n            description: 'Generate reference screenshots for regression testing',\n            stepInstruction: 'Capture baseline screenshots',\n            isSideQuest: true\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 'metaplatform-migration',\n    name: 'MetaPlatform – Migration Console',\n    description: 'Legacy system migration and data transformation',\n    createdAt: '2025-07-20T14:00:00Z',\n    createdBy: 'system',\n    projectOwner: 'migration-team',\n    projectType: 'Migration',\n    status: 'Paused',\n    colorTag: 'blue',\n    wtTag: 'WT-META-CONSOLE',\n    phases: [\n      {\n        id: 'meta-phase-1',\n        projectId: 'metaplatform-migration',\n        name: 'Data Analysis & Schema Mapping',\n        description: 'Analyze existing data structures and create migration schemas',\n        order: 1,\n        ragStatus: 'red',\n        phaseType: 'Infrastructure',\n        steps: [\n          {\n            id: 'meta-step-1',\n            phaseId: 'meta-phase-1',\n            name: 'Legacy system audit',\n            status: 'complete',\n            description: 'Complete inventory of existing data structures',\n            stepInstruction: 'Legacy system audit',\n            completedAt: '2025-07-21T16:00:00Z',\n            isSideQuest: false\n          },\n          {\n            id: 'meta-step-2',\n            phaseId: 'meta-phase-1',\n            name: 'Schema transformation design',\n            status: 'error',\n            description: 'Design new schema structure - blocked on API changes',\n            stepInstruction: 'Schema transformation design',\n            startedAt: '2025-07-22T09:00:00Z',\n            isSideQuest: false\n          }\n        ]\n      }\n    ]\n  }\n];\n\nexport const PhasePlan: React.FC = () => {\n  const [showSidebar, setShowSidebar] = useState(true); // Show sidebar by default\n  const [viewMode, setViewMode] = useState<'dashboard' | 'planning'>('dashboard');\n  \n  const handleViewLogs = (executionId: string) => {\n    console.log(`[WT] Viewing logs for execution: ${executionId}`);\n    // Enhanced log viewing with user feedback\n    alert(`📊 Viewing execution logs for: ${executionId}\\n\\nIn a production environment, this would:\\n- Open detailed execution logs\\n- Show real-time status updates\\n- Display performance metrics\\n- Provide error diagnostics\\n\\nCheck console for current log details.`);\n  };\n\n  return (\n    <ProjectProvider initialProjects={mockProjects} initialActiveProjectId={mockProjects[0]?.id}>\n      <PhasePlanContent \n        showSidebar={showSidebar}\n        setShowSidebar={setShowSidebar}\n        viewMode={viewMode}\n        setViewMode={setViewMode}\n        handleViewLogs={handleViewLogs}\n      />\n    </ProjectProvider>\n  );\n};\n\n// Separate component to use context\nconst PhasePlanContent: React.FC<{\n  showSidebar: boolean;\n  setShowSidebar: (show: boolean) => void;\n  viewMode: 'dashboard' | 'planning';\n  setViewMode: (mode: 'dashboard' | 'planning') => void;\n  handleViewLogs: (executionId: string) => void;\n}> = ({ showSidebar, setShowSidebar, viewMode, setViewMode, handleViewLogs }) => {\n  const [showGovernanceLog, setShowGovernanceLog] = useState(false);\n  const { projects, activeProjectId, setActiveProjectId } = useProjectContext();\n  \n  // Convert projects to sidebar-compatible format\n  const sidebarProjects = projects.map(project => ({\n    id: project.id,\n    name: project.name,\n    description: project.description,\n    status: project.status,\n    phases: project.phases\n  }));\n  \n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar Panel */}\n      {showSidebar && (\n        <div className=\"w-80 flex-shrink-0\">\n          <ProjectSidebarSimple\n            projects={sidebarProjects}\n            selectedProjectId={activeProjectId || ''}\n            onProjectSelect={setActiveProjectId}\n          />\n        </div>\n      )}\n      \n      {/* Main Dashboard Area */}\n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {viewMode === 'dashboard' ? '📊 Project Dashboard' : '📝 Phase Planning'}\n              </h1>\n              <p className=\"text-gray-600\">\n                {viewMode === 'dashboard' \n                  ? 'Strategic project planning with tactical execution tracking'\n                  : 'Edit and organize project phases and steps'\n                }\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"bg-gray-100 p-1 rounded-md flex\">\n                <button\n                  onClick={() => setViewMode('dashboard')}\n                  className={`px-3 py-1 text-sm rounded transition-colors ${\n                    viewMode === 'dashboard'\n                      ? 'bg-white text-gray-900 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  Dashboard\n                </button>\n                <button\n                  onClick={() => setViewMode('planning')}\n                  className={`px-3 py-1 text-sm rounded transition-colors ${\n                    viewMode === 'planning'\n                      ? 'bg-white text-gray-900 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  Planning\n                </button>\n              </div>\n              <button\n                onClick={() => setShowGovernanceLog(!showGovernanceLog)}\n                className=\"px-3 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-md text-sm text-gray-700 transition-colors duration-200\"\n              >\n                📋 Governance Log\n              </button>\n              <button\n                onClick={() => setShowSidebar(!showSidebar)}\n                className=\"px-3 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-md text-sm text-gray-700 transition-colors duration-200\"\n              >\n                {showSidebar ? '← Hide Sidebar' : 'Show Sidebar →'}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-auto\">\n          <div className=\"h-full p-6\">\n            <div className={showGovernanceLog ? \"grid grid-cols-3 gap-6\" : \"\"}>\n              <div className={showGovernanceLog ? \"col-span-2\" : \"\"}>\n                {viewMode === 'dashboard' ? (\n                  <ProjectDashboard\n                    onViewLogs={handleViewLogs}\n                    readOnly={false}\n                  />\n                ) : activeProjectId ? (\n                  <PhasePlanView projectId={activeProjectId} />\n                ) : (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    Select a project to start planning\n                  </div>\n                )}\n              </div>\n              {showGovernanceLog && (\n                <div className=\"col-span-1\">\n                  <GovernanceLogViewer />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/agent.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1647,1650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1647,1650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Agent types for self-management and mesh coordination\nexport type AgentStatus = 'active' | 'idle' | 'error' | 'offline' | 'maintenance';\nexport type AgentCapability = 'code_generation' | 'testing' | 'deployment' | 'monitoring' | 'analysis' | 'orchestration';\n\nexport interface Agent {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  capabilities: AgentCapability[];\n  currentStatus: AgentStatus;\n  version?: string;\n  endpoint?: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  lastActiveAt?: string;\n}\n\nexport type ConnectionDirection = 'bidirectional' | 'source_to_target' | 'target_to_source';\nexport type AccessType = 'direct' | 'proxy' | 'gateway' | 'webhook';\nexport type ConnectionStatus = 'connected' | 'disconnected' | 'pending' | 'error';\n\nexport interface AgentConnection {\n  id: string;\n  source: string; // Agent ID\n  target: string; // Agent ID\n  direction: ConnectionDirection;\n  accessType: AccessType;\n  status: ConnectionStatus;\n  contextTags: string[];\n  bandwidth?: number;\n  latency?: number;\n  lastHealthCheck?: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n}\n\nexport type ServiceType = 'api' | 'database' | 'storage' | 'messaging' | 'monitoring' | 'auth' | 'cdn' | 'compute';\nexport type ServiceStatus = 'operational' | 'degraded' | 'outage' | 'maintenance' | 'unknown';\n\nexport interface ExternalService {\n  id: string;\n  name: string;\n  type: ServiceType;\n  status: ServiceStatus;\n  docURL?: string;\n  healthEndpoint?: string;\n  version?: string;\n  provider?: string;\n  region?: string;\n  dependencies?: string[]; // Other service IDs\n  metadata?: Record<string, any>;\n  createdAt: string;\n  lastStatusUpdate?: string;\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/docs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/feature.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/governance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Governance and logging types for self-management\nexport type GovernanceEventType = \n  | 'StepStatusUpdated' \n  | 'StepAdded' \n  | 'StepRemoved' \n  | 'PhaseUpdated'\n  | 'MeshChange'\n  | 'SystemUpgrade'\n  | 'AgentAction'\n  | 'AIConsoleInteraction';\n\nexport interface GovernanceEvent {\n  id: string;\n  phaseStepId: string;\n  newStatus?: string;\n  triggeredBy: string;\n  eventType: GovernanceEventType;\n  timestamp: string;\n  details?: any;\n  // Self-management enhancements\n  linkedProject?: string; // Project ID for filtering\n  linkedPhase?: string; // Phase ID for context\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n  agentId?: string; // For agent-triggered events\n  systemComponent?: string; // For system-level events\n  rollbackInfo?: {\n    canRollback: boolean;\n    rollbackSteps?: string[];\n    rollbackWindowMinutes?: number;\n  };\n}\n\nexport interface GovernanceFilter {\n  eventType?: GovernanceEventType | 'all';\n  linkedProject?: string | 'all';\n  linkedPhase?: string | 'all';\n  severity?: 'low' | 'medium' | 'high' | 'critical' | 'all';\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/integration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/phase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/project.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":5,"column":47,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":5,"endColumn":72},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":11,"column":45,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":11,"endColumn":68},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":22,"column":44,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":22,"endColumn":71}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Extended project types for the new Work Surfaces layout\nexport type { Project, Phase, PhaseStep as Step } from './phase';\n\n// Additional metadata for the new layout\nexport interface ExtendedProject extends Omit<import('./phase').Project, 'status'> {\n  status: 'Active' | 'On Hold' | 'Completed' | 'Archived';\n  completionPercentage?: number;\n  currentPhase?: string;\n}\n\nexport interface ExtendedPhase extends Omit<import('./phase').Phase, 'id' | 'projectId' | 'name' | 'description' | 'order' | 'steps'> {\n  id: string;\n  projectId: string;\n  name: string;\n  description: string;\n  order: number;\n  steps: ExtendedStep[];\n  status: 'not_started' | 'in_progress' | 'completed' | 'blocked' | 'on_hold';\n  completionPercentage?: number;\n}\n\nexport interface ExtendedStep extends Omit<import('./phase').PhaseStep, 'status'> {\n  status: 'not_started' | 'in_progress' | 'completed' | 'blocked';\n}\n\n// Re-export the original types as well for compatibility\nexport * from './phase';","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/types/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/aiHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used.","line":2,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'stepId' is defined but never used.","line":2,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkpointId' is defined but never used.","line":6,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'meetingId' is defined but never used.","line":10,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":51}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// const unused = [projectId, stepId, checkpointId, meetingId];\nexport async function generateStepInstruction(projectId: string, stepId: string): Promise<string> {\n  return Promise.resolve(\"AI-generated step instruction placeholder.\");\n}\n\nexport async function summariseRiskForCheckpoint(checkpointId: string): Promise<string> {\n  return Promise.resolve(\"AI-generated risk summary placeholder.\");\n}\n\nexport async function draftGovernanceLog(meetingId: string): Promise<string> {\n  return Promise.resolve(\"AI-generated governance log placeholder.\");\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/claudeGizmoComm.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[205,208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[205,208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs/promises';\nimport path from 'path';\n\nexport interface AIMessage {\n  id: string;\n  from: 'Claude' | 'Gizmo';\n  to: 'Claude' | 'Gizmo';\n  timestamp: string;\n  message: string;\n  context?: any;\n  status: 'pending' | 'read' | 'responded';\n  responseId?: string;\n}\n\nexport class ClaudeGizmoFileComm {\n  private commFile = path.join(process.cwd(), '.ai-communication/messages.json');\n\n  async sendMessage(message: Omit<AIMessage, 'id' | 'timestamp' | 'status'>) {\n    await this.ensureCommFile();\n    \n    const messages = await this.getAllMessages();\n    const newMessage: AIMessage = {\n      ...message,\n      id: `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n      status: 'pending'\n    };\n    \n    messages.push(newMessage);\n    await fs.writeFile(this.commFile, JSON.stringify(messages, null, 2));\n    \n    return newMessage;\n  }\n\n  async getUnreadMessages(recipient: 'Claude' | 'Gizmo'): Promise<AIMessage[]> {\n    const messages = await this.getAllMessages();\n    return messages.filter(m => m.to === recipient && m.status === 'pending');\n  }\n\n  async markAsRead(messageId: string) {\n    const messages = await this.getAllMessages();\n    const message = messages.find(m => m.id === messageId);\n    if (message) {\n      message.status = 'read';\n      await fs.writeFile(this.commFile, JSON.stringify(messages, null, 2));\n    }\n  }\n\n  async respondToMessage(originalId: string, response: string) {\n    const messages = await this.getAllMessages();\n    const original = messages.find(m => m.id === originalId);\n    \n    if (!original) throw new Error('Original message not found');\n    \n    const responseMessage: AIMessage = {\n      id: `resp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      from: original.to,\n      to: original.from,\n      timestamp: new Date().toISOString(),\n      message: response,\n      context: { inResponseTo: originalId },\n      status: 'pending',\n      responseId: originalId\n    };\n    \n    original.status = 'responded';\n    messages.push(responseMessage);\n    \n    await fs.writeFile(this.commFile, JSON.stringify(messages, null, 2));\n    return responseMessage;\n  }\n\n  private async getAllMessages(): Promise<AIMessage[]> {\n    try {\n      const content = await fs.readFile(this.commFile, 'utf-8');\n      return JSON.parse(content);\n    } catch {\n      return [];\n    }\n  }\n\n  private async ensureCommFile() {\n    const dir = path.dirname(this.commFile);\n    await fs.mkdir(dir, { recursive: true });\n    \n    try {\n      await fs.access(this.commFile);\n    } catch {\n      await fs.writeFile(this.commFile, '[]');\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/createNotionGovernanceEntry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3488,3491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3488,3491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4385,4388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4385,4388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4661,4664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4661,4664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createNotionClient } from './notionClient';\nimport type { GovernanceEvent } from '../types/governance';\n\nexport interface NotionGovernanceEntry {\n  title: string;\n  content: string;\n  project?: string;\n  phase?: string;\n  status?: string;\n  tags?: string[];\n  author?: string;\n  timestamp?: string;\n}\n\nexport interface GovernanceEntryConfig {\n  databaseId: string;\n  token?: string;\n}\n\nexport class NotionGovernanceHelper {\n  private notionClient;\n  private databaseId: string;\n\n  constructor(config: GovernanceEntryConfig) {\n    this.notionClient = createNotionClient(config.token);\n    this.databaseId = config.databaseId;\n  }\n\n  async getDatabaseSchema() {\n    try {\n      const database = await this.notionClient.queryDatabase({\n        database_id: this.databaseId,\n        page_size: 1,\n      });\n      \n      return database;\n    } catch (error) {\n      throw new Error(`Failed to get database schema: ${error}`);\n    }\n  }\n\n  async createGovernanceEntry(entry: NotionGovernanceEntry): Promise<any> {\n    try {\n      // Get database info to understand the schema\n      const response = await this.notionClient.queryDatabase({\n        database_id: this.databaseId,\n        page_size: 1,\n      });\n\n      console.log('Database properties available:', Object.keys(response.results[0]?.properties || {}));\n\n      // Create a flexible property mapping based on common Notion property names\n      const properties: any = {};\n\n      // Title property (required for all Notion pages)\n      properties['Name'] = {\n        title: [{ text: { content: entry.title } }]\n      };\n\n      // Try alternative title properties\n      if (!properties['Name']) {\n        properties['Title'] = {\n          title: [{ text: { content: entry.title } }]\n        };\n      }\n\n      // Add content as rich text\n      if (entry.content) {\n        properties['Content'] = {\n          rich_text: [{ text: { content: entry.content.substring(0, 2000) } }] // Notion has limits\n        };\n      }\n\n      // Add project if available\n      if (entry.project) {\n        properties['Project'] = {\n          rich_text: [{ text: { content: entry.project } }]\n        };\n      }\n\n      // Add phase if available\n      if (entry.phase) {\n        properties['Phase'] = {\n          rich_text: [{ text: { content: entry.phase } }]\n        };\n      }\n\n      // Add status if available\n      if (entry.status) {\n        properties['Status'] = {\n          rich_text: [{ text: { content: entry.status } }]\n        };\n      }\n\n      // Add timestamp if available\n      if (entry.timestamp) {\n        properties['Date'] = {\n          date: { start: entry.timestamp }\n        };\n      }\n\n      // Add author if available\n      if (entry.author) {\n        properties['Author'] = {\n          rich_text: [{ text: { content: entry.author } }]\n        };\n      }\n\n      // Add tags if available\n      if (entry.tags && entry.tags.length > 0) {\n        properties['Tags'] = {\n          rich_text: [{ text: { content: entry.tags.join(', ') } }]\n        };\n      }\n\n      const result = await this.notionClient.writePage({\n        parent: { database_id: this.databaseId },\n        properties\n      });\n\n      return {\n        success: true,\n        pageId: result.id,\n        url: result.url,\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  async createFromGovernanceEvent(event: GovernanceEvent): Promise<any> {\n    const entry: NotionGovernanceEntry = {\n      title: `${event.eventType}: ${event.id}`,\n      content: `Event: ${event.eventType}\nTriggered by: ${event.triggeredBy}\nPhase Step: ${event.phaseStepId}\nStatus: ${event.newStatus || 'N/A'}\nTimestamp: ${event.timestamp}\n\nDetails: ${JSON.stringify(event.details, null, 2)}\n\nRollback Info: ${event.rollbackInfo ? JSON.stringify(event.rollbackInfo, null, 2) : 'N/A'}`,\n      project: event.linkedProject,\n      phase: event.linkedPhase,\n      status: event.newStatus,\n      author: event.agentId || event.triggeredBy,\n      timestamp: event.timestamp,\n      tags: event.severity ? [event.severity, event.eventType] : [event.eventType]\n    };\n\n    return this.createGovernanceEntry(entry);\n  }\n}\n\n// Convenience function\nexport async function createNotionGovernanceEntry(\n  entry: NotionGovernanceEntry,\n  config: GovernanceEntryConfig\n): Promise<any> {\n  const helper = new NotionGovernanceHelper(config);\n  return helper.createGovernanceEntry(entry);\n}\n\n// Function to create from governance event\nexport async function createGovernanceEntryFromEvent(\n  event: GovernanceEvent,\n  config: GovernanceEntryConfig\n): Promise<any> {\n  const helper = new NotionGovernanceHelper(config);\n  return helper.createFromGovernanceEvent(event);\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/driveMemorySync.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GovernanceEvent' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[935,938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[935,938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1500,1503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1500,1503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2599,2602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2599,2602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2687,2690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2687,2690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3486,3489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3486,3489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3583,3586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3583,3586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'notionRecord' is assigned a value but never used.","line":169,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5198,5201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5198,5201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5204,5207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5204,5207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5229,5232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5229,5232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5442,5445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5442,5445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5448,5451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5448,5451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5516,5519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5516,5519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5624,5627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5624,5627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5806,5809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5806,5809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6131,6134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6131,6134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'key' is assigned a value but never used.","line":231,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6374,6377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6374,6377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'databaseId' is defined but never used.","line":240,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6513,6516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6513,6516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'properties' is assigned a value but never used.","line":241,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6541,6544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6541,6544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7037,7040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7037,7040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7622,7625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7622,7625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8111,8114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8111,8114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8597,8600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8597,8600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9007,9010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9007,9010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createNotionClient } from './notionClient';\nimport type { GovernanceEvent } from '../types/governance';\n\n// Retry utility with exponential backoff for QA robustness\nasync function withRetry<T>(fn: () => Promise<T>, retries = 3): Promise<T> {\n  let delay = 500;\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await fn();\n    } catch (e) {\n      if (i === retries - 1) throw e;\n      console.log(`⚠️  Retry ${i + 1}/${retries} after ${delay}ms...`);\n      await new Promise(res => setTimeout(res, delay));\n      delay *= 2;\n    }\n  }\n  throw new Error('Retry logic failed');\n}\n\nexport interface SyncMetadata {\n  lastSynced: string;\n  sourceSystem: 'Notion' | 'DriveMemory' | 'WombatTrack' | 'API';\n  recordOrigin: string;\n  syncDirection: 'notion-to-drive' | 'drive-to-notion' | 'bidirectional';\n}\n\nexport interface DriveMemoryRecord {\n  id: string;\n  type: 'governance' | 'project' | 'phase' | 'step';\n  content: any;\n  metadata: SyncMetadata;\n  tags?: string[];\n}\n\nexport interface NotionSyncConfig {\n  notionToken: string;\n  databaseIds: {\n    project?: string;\n    phase?: string;\n    phaseStep?: string;\n    governance?: string;\n  };\n}\n\nexport class DriveMemorySync {\n  private notionClient;\n  private config: NotionSyncConfig;\n\n  constructor(config: NotionSyncConfig) {\n    this.notionClient = createNotionClient(config.notionToken);\n    this.config = config;\n  }\n\n  // Sync from Notion to DriveMemory format\n  async exportFromNotion(\n    databaseId: string,\n    filters?: any\n  ): Promise<DriveMemoryRecord[]> {\n    try {\n      const response = await withRetry(() => \n        this.notionClient.queryDatabase({\n          database_id: databaseId,\n          filter: filters,\n        })\n      );\n\n      const records: DriveMemoryRecord[] = [];\n\n      for (const page of response.results) {\n        const record: DriveMemoryRecord = {\n          id: page.id,\n          type: this.inferTypeFromDatabase(databaseId),\n          content: this.extractPageContent(page),\n          metadata: {\n            lastSynced: new Date().toISOString(),\n            sourceSystem: 'Notion',\n            recordOrigin: `notion:${databaseId}:${page.id}`,\n            syncDirection: 'notion-to-drive',\n          },\n          tags: this.extractTags(page),\n        };\n        records.push(record);\n      }\n\n      return records;\n    } catch (error) {\n      throw new Error(`Failed to export from Notion: ${error}`);\n    }\n  }\n\n  // Sync from DriveMemory to Notion\n  async importToNotion(\n    records: DriveMemoryRecord[],\n    databaseId: string\n  ): Promise<{ success: number; failed: number; errors: any[] }> {\n    const results = {\n      success: 0,\n      failed: 0,\n      errors: [] as any[],\n    };\n\n    for (const record of records) {\n      try {\n        const properties = this.mapToNotionProperties(record, databaseId);\n        \n        await withRetry(() => \n          this.notionClient.writePage({\n            parent: { database_id: databaseId },\n            properties,\n          })\n        );\n\n        results.success++;\n      } catch (error) {\n        results.failed++;\n        results.errors.push({\n          recordId: record.id,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return results;\n  }\n\n  // Bidirectional sync with conflict resolution\n  async bidirectionalSync(\n    databaseId: string,\n    driveMemoryRecords: DriveMemoryRecord[]\n  ): Promise<{\n    imported: number;\n    exported: number;\n    conflicts: any[];\n  }> {\n    const results = {\n      imported: 0,\n      exported: 0,\n      conflicts: [] as any[],\n    };\n\n    // Get all Notion records\n    const notionRecords = await this.exportFromNotion(databaseId);\n\n    // Create maps for comparison\n    const notionMap = new Map(notionRecords.map(r => [r.id, r]));\n    const driveMap = new Map(driveMemoryRecords.map(r => [r.id, r]));\n\n    // Find records to import (in Drive but not in Notion)\n    for (const [id, driveRecord] of driveMap) {\n      if (!notionMap.has(id)) {\n        const importResult = await this.importToNotion([driveRecord], databaseId);\n        if (importResult.success > 0) {\n          results.imported++;\n        }\n      } else {\n        // Check for conflicts based on lastSynced\n        const notionRecord = notionMap.get(id)!;\n        if (this.hasConflict(driveRecord, notionRecord)) {\n          results.conflicts.push({\n            id,\n            driveLastSynced: driveRecord.metadata.lastSynced,\n            notionLastSynced: notionRecord.metadata.lastSynced,\n          });\n        }\n      }\n    }\n\n    // Export new Notion records\n    for (const [id, notionRecord] of notionMap) {\n      if (!driveMap.has(id)) {\n        results.exported++;\n      }\n    }\n\n    return results;\n  }\n\n  private inferTypeFromDatabase(databaseId: string): DriveMemoryRecord['type'] {\n    const { databaseIds } = this.config;\n    \n    if (databaseId === databaseIds.project) return 'project';\n    if (databaseId === databaseIds.phase) return 'phase';\n    if (databaseId === databaseIds.phaseStep) return 'step';\n    if (databaseId === databaseIds.governance) return 'governance';\n    \n    return 'governance'; // default\n  }\n\n  private extractPageContent(page: any): any {\n    const content: any = {};\n    \n    for (const [key, value] of Object.entries(page.properties)) {\n      content[key] = this.extractPropertyValue(value);\n    }\n    \n    return content;\n  }\n\n  private extractPropertyValue(property: any): any {\n    if (property.title) {\n      return property.title.map((t: any) => t.plain_text).join('');\n    }\n    if (property.rich_text) {\n      return property.rich_text.map((t: any) => t.plain_text).join('');\n    }\n    if (property.select) {\n      return property.select.name;\n    }\n    if (property.multi_select) {\n      return property.multi_select.map((s: any) => s.name);\n    }\n    if (property.date) {\n      return property.date.start;\n    }\n    if (property.checkbox) {\n      return property.checkbox;\n    }\n    if (property.number) {\n      return property.number;\n    }\n    if (property.url) {\n      return property.url;\n    }\n    return null;\n  }\n\n  private extractTags(page: any): string[] {\n    const tags: string[] = [];\n    \n    // Extract from multi_select properties\n    for (const [key, value] of Object.entries(page.properties)) {\n      if (value.multi_select) {\n        tags.push(...value.multi_select.map((s: any) => s.name));\n      }\n    }\n    \n    return tags;\n  }\n\n  private mapToNotionProperties(record: DriveMemoryRecord, databaseId: string): any {\n    const properties: any = {};\n    \n    // Map based on record type\n    switch (record.type) {\n      case 'governance':\n        return this.mapGovernanceProperties(record);\n      case 'project':\n        return this.mapProjectProperties(record);\n      case 'phase':\n        return this.mapPhaseProperties(record);\n      case 'step':\n        return this.mapStepProperties(record);\n      default:\n        return this.mapGenericProperties(record);\n    }\n  }\n\n  private mapGovernanceProperties(record: DriveMemoryRecord): any {\n    const content = record.content;\n    return {\n      'Event ID': {\n        title: [{ text: { content: record.id } }],\n      },\n      'Summary': {\n        rich_text: [{ text: { content: content.summary || '' } }],\n      },\n      'Source System': {\n        select: { name: record.metadata.sourceSystem },\n      },\n      'Last Synced': {\n        date: { start: record.metadata.lastSynced },\n      },\n      'MemoryPlugin Tags': {\n        multi_select: (record.tags || []).map(tag => ({ name: tag })),\n      },\n    };\n  }\n\n  private mapProjectProperties(record: DriveMemoryRecord): any {\n    const content = record.content;\n    return {\n      projectId: {\n        title: [{ text: { content: record.id } }],\n      },\n      title: {\n        rich_text: [{ text: { content: content.title || '' } }],\n      },\n      description: {\n        rich_text: [{ text: { content: content.description || '' } }],\n      },\n      status: content.status ? {\n        select: { name: content.status },\n      } : undefined,\n    };\n  }\n\n  private mapPhaseProperties(record: DriveMemoryRecord): any {\n    const content = record.content;\n    return {\n      phaseId: {\n        title: [{ text: { content: record.id } }],\n      },\n      title: {\n        rich_text: [{ text: { content: content.title || '' } }],\n      },\n      description: {\n        rich_text: [{ text: { content: content.description || '' } }],\n      },\n      status: content.status ? {\n        select: { name: content.status },\n      } : undefined,\n    };\n  }\n\n  private mapStepProperties(record: DriveMemoryRecord): any {\n    const content = record.content;\n    return {\n      phaseStepId: {\n        title: [{ text: { content: record.id } }],\n      },\n      stepInstruction: {\n        rich_text: [{ text: { content: content.instruction || '' } }],\n      },\n      stepNumber: content.stepNumber ? {\n        number: content.stepNumber,\n      } : undefined,\n    };\n  }\n\n  private mapGenericProperties(record: DriveMemoryRecord): any {\n    return {\n      id: {\n        title: [{ text: { content: record.id } }],\n      },\n      content: {\n        rich_text: [{ text: { content: JSON.stringify(record.content) } }],\n      },\n    };\n  }\n\n  private hasConflict(record1: DriveMemoryRecord, record2: DriveMemoryRecord): boolean {\n    const date1 = new Date(record1.metadata.lastSynced);\n    const date2 = new Date(record2.metadata.lastSynced);\n    \n    // If synced within 1 minute of each other, consider it a conflict\n    const timeDiff = Math.abs(date1.getTime() - date2.getTime());\n    return timeDiff < 60000; // 1 minute\n  }\n}\n\n// Export format for notion data\nexport interface NotionExportFormat {\n  version: '1.0';\n  exportDate: string;\n  databases: {\n    [databaseId: string]: {\n      name: string;\n      records: DriveMemoryRecord[];\n    };\n  };\n}\n\nexport async function exportNotionToJSON(\n  config: NotionSyncConfig\n): Promise<NotionExportFormat> {\n  const sync = new DriveMemorySync(config);\n  const exportData: NotionExportFormat = {\n    version: '1.0',\n    exportDate: new Date().toISOString(),\n    databases: {},\n  };\n\n  for (const [name, databaseId] of Object.entries(config.databaseIds)) {\n    if (databaseId) {\n      try {\n        const records = await sync.exportFromNotion(databaseId);\n        exportData.databases[databaseId] = {\n          name,\n          records,\n        };\n      } catch (error) {\n        console.error(`Failed to export ${name} database:`, error);\n      }\n    }\n  }\n\n  return exportData;\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/governanceLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/notionClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[336,339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[336,339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[351,354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[351,354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[548,551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[548,551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[720,723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[720,723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[739,742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[739,742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2508,2511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2508,2511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3629,3632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3629,3632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Client } from '@notionhq/client';\nimport type { \n  QueryDatabaseResponse,\n  GetPageResponse,\n  CreatePageResponse,\n  AppendBlockChildrenResponse\n} from '@notionhq/client/build/src/api-endpoints';\n\nexport interface NotionClientConfig {\n  auth: string;\n}\n\nexport interface DatabaseQueryParams {\n  database_id: string;\n  filter?: any;\n  sorts?: any[];\n  start_cursor?: string;\n  page_size?: number;\n}\n\nexport interface WritePageParams {\n  parent: { database_id: string } | { page_id: string };\n  properties: Record<string, any>;\n  children?: any[];\n}\n\nexport interface AppendPageParams {\n  page_id: string;\n  children: any[];\n}\n\nexport interface UpdatePageParams {\n  page_id: string;\n  properties?: Record<string, any>;\n  children?: any[];\n  replace_content?: boolean;\n}\n\nexport class NotionClient {\n  client: Client;\n\n  constructor(config: NotionClientConfig) {\n    this.client = new Client({\n      auth: config.auth,\n    });\n  }\n\n  async getPage(page_id: string): Promise<GetPageResponse> {\n    try {\n      const response = await this.client.pages.retrieve({ page_id });\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to get page ${page_id}: ${error}`);\n    }\n  }\n\n  async queryDatabase(params: DatabaseQueryParams): Promise<QueryDatabaseResponse> {\n    try {\n      const response = await this.client.databases.query(params);\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to query database ${params.database_id}: ${error}`);\n    }\n  }\n\n  async writePage(params: WritePageParams): Promise<CreatePageResponse> {\n    try {\n      const response = await this.client.pages.create(params);\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to create page: ${error}`);\n    }\n  }\n\n  async appendToPage(params: AppendPageParams): Promise<AppendBlockChildrenResponse> {\n    try {\n      const response = await this.client.blocks.children.append({\n        block_id: params.page_id,\n        children: params.children,\n      });\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to append to page ${params.page_id}: ${error}`);\n    }\n  }\n\n  async listDatabases(): Promise<any> {\n    try {\n      const response = await this.client.search({\n        filter: {\n          value: 'database',\n          property: 'object',\n        },\n      });\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to list databases: ${error}`);\n    }\n  }\n\n  async updatePage(params: UpdatePageParams): Promise<any> {\n    try {\n      // Update page properties if provided\n      let updateResponse = null;\n      if (params.properties) {\n        updateResponse = await this.client.pages.update({\n          page_id: params.page_id,\n          properties: params.properties,\n        });\n      }\n\n      // Handle content updates\n      if (params.children) {\n        if (params.replace_content) {\n          // Get existing blocks and delete them\n          const existingBlocks = await this.client.blocks.children.list({\n            block_id: params.page_id,\n          });\n          \n          // Delete existing blocks\n          for (const block of existingBlocks.results) {\n            await this.client.blocks.delete({\n              block_id: block.id,\n            });\n          }\n        }\n        \n        // Add new content\n        await this.client.blocks.children.append({\n          block_id: params.page_id,\n          children: params.children,\n        });\n      }\n\n      return updateResponse;\n    } catch (error) {\n      throw new Error(`Failed to update page ${params.page_id}: ${error}`);\n    }\n  }\n\n  async getUser(): Promise<any> {\n    try {\n      const response = await this.client.users.me({});\n      return response;\n    } catch (error) {\n      throw new Error(`Failed to get user info: ${error}`);\n    }\n  }\n}\n\nexport function createNotionClient(token?: string): NotionClient {\n  const notionToken = token || process.env.NOTION_TOKEN;\n  \n  if (!notionToken) {\n    throw new Error('NOTION_TOKEN is required. Set it as an environment variable or pass it directly.');\n  }\n\n  return new NotionClient({ auth: notionToken });\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/notionDatabaseCreator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/phaseStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/pollClaudeMessages.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Client } from '@notionhq/client';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst notion = new Client({ auth: process.env.NOTION_TOKEN });\nconst databaseId = process.env.NOTION_CLAUDE_GIZMO_DB_ID || '';\n\nexport async function pollClaudeMessages() {\n  if (!databaseId) {\n    console.error('❌ NOTION_CLAUDE_GIZMO_DB_ID not set in environment');\n    return;\n  }\n\n  try {\n    const response = await notion.databases.query({\n      database_id: databaseId,\n      filter: {\n        and: [\n          { property: 'Sender', select: { equals: 'Claude' } },\n          { property: 'Status', select: { equals: 'unread' } }\n        ]\n      }\n    });\n\n    console.log(`📬 Found ${response.results.length} unread messages from Claude`);\n\n    for (const result of response.results) {\n      const pageId = result.id;\n      const props = result.properties as any;\n      \n      const threadId = props['Thread ID']?.rich_text?.[0]?.plain_text || 'no-thread';\n      const message = props['Message']?.title?.[0]?.plain_text || '';\n      const fullContent = props['Full Content']?.rich_text?.[0]?.plain_text || '';\n      const context = props['Context']?.rich_text?.[0]?.plain_text || '';\n      const expectsResponse = props['Expects Response']?.checkbox || false;\n\n      console.log(`\\n📨 Message from Claude [${threadId}]:`);\n      console.log(`   Title: ${message}`);\n      console.log(`   Context: ${context}`);\n      console.log(`   Content: ${fullContent}`);\n      console.log(`   Expects Response: ${expectsResponse}`);\n\n      // Mark as read\n      await notion.pages.update({\n        page_id: pageId,\n        properties: {\n          Status: { select: { name: 'read' } }\n        }\n      });\n\n      // If expects response, create a response\n      if (expectsResponse) {\n        console.log('   ↩️  Sending response...');\n        \n        // Create response message\n        await notion.pages.create({\n          parent: { database_id: databaseId },\n          properties: {\n            'Message': {\n              title: [{ text: { content: `Re: ${message}` } }]\n            },\n            'Full Content': {\n              rich_text: [{ \n                text: { \n                  content: 'Confirmed — communication channel is operational. Gizmo received your message and can now communicate via this Notion database.' \n                } \n              }]\n            },\n            'Context': {\n              rich_text: [{ text: { content: context } }]\n            },\n            'Sender': {\n              select: { name: 'Gizmo' }\n            },\n            'Status': {\n              select: { name: 'unread' }\n            },\n            'Thread ID': {\n              rich_text: [{ text: { content: threadId } }]\n            },\n            'Timestamp': {\n              date: { start: new Date().toISOString() }\n            },\n            'Response Link': {\n              url: result.url\n            }\n          }\n        });\n\n        // Update original message status to responded\n        await notion.pages.update({\n          page_id: pageId,\n          properties: {\n            Status: { select: { name: 'responded' } }\n          }\n        });\n\n        console.log('   ✅ Response sent!');\n      }\n    }\n\n    if (response.results.length === 0) {\n      console.log('📭 No unread messages from Claude');\n    }\n\n  } catch (error) {\n    console.error('❌ Error polling messages:', error);\n    throw error;\n  }\n}\n\n// Check if running as main module (ES module compatible)\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log('🤖 Gizmo Message Poller Started\\n');\n  pollClaudeMessages()\n    .then(() => console.log('\\n✅ Polling complete'))\n    .catch(error => console.error('💥 Polling failed:', error));\n}","usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/syncGovernanceLogToNotion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/jtaylor/wombat-track-scaffold/wombat-track/src/utils/testNotionConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[145,148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[145,148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1131,1134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1131,1134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1183,1186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1183,1186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createNotionClient } from './notionClient';\n\nexport interface ConnectionTestResult {\n  success: boolean;\n  error?: string;\n  userInfo?: any;\n  accessibleDatabases?: Array<{\n    id: string;\n    title: string;\n    url: string;\n  }>;\n}\n\nexport interface ExpectedDatabase {\n  name: string;\n  id?: string;\n}\n\nconst EXPECTED_DATABASES: ExpectedDatabase[] = [\n  { name: 'Complize Home' },\n  { name: 'DMS' },\n  { name: 'Project Management System' },\n  { name: 'RML Projects' },\n];\n\nexport async function testNotionConnection(token?: string): Promise<ConnectionTestResult> {\n  try {\n    const client = createNotionClient(token);\n    \n    // Test 1: Verify token is valid and get user info\n    console.log('🔐 Testing token validity...');\n    const userInfo = await client.getUser();\n    console.log('✅ Token is valid');\n    console.log(`👤 User: ${userInfo.name || 'Unknown'} (${userInfo.type})`);\n    \n    // Test 2: List accessible databases\n    console.log('\\n📊 Fetching accessible databases...');\n    const databasesResponse = await client.listDatabases();\n    const databases = databasesResponse.results\n      .filter((item: any) => item.object === 'database')\n      .map((db: any) => ({\n        id: db.id,\n        title: db.title?.[0]?.plain_text || 'Untitled',\n        url: db.url,\n      }));\n    \n    console.log(`✅ Found ${databases.length} accessible databases:`);\n    databases.forEach((db, index) => {\n      console.log(`  ${index + 1}. ${db.title} (${db.id})`);\n    });\n    \n    // Test 3: Check for expected databases\n    console.log('\\n🔍 Checking for expected databases...');\n    const foundDatabases: string[] = [];\n    const missingDatabases: string[] = [];\n    \n    EXPECTED_DATABASES.forEach(expectedDb => {\n      const found = databases.some(db => \n        db.title.toLowerCase().includes(expectedDb.name.toLowerCase())\n      );\n      if (found) {\n        foundDatabases.push(expectedDb.name);\n        console.log(`  ✅ ${expectedDb.name} - Found`);\n      } else {\n        missingDatabases.push(expectedDb.name);\n        console.log(`  ❌ ${expectedDb.name} - Not found`);\n      }\n    });\n    \n    console.log('\\n📋 Summary:');\n    console.log(`  • Found databases: ${foundDatabases.length}/${EXPECTED_DATABASES.length}`);\n    console.log(`  • Missing databases: ${missingDatabases.length}`);\n    \n    if (missingDatabases.length > 0) {\n      console.log('\\n⚠️  Missing databases may indicate:');\n      console.log('  • Databases not shared with the integration');\n      console.log('  • Different database names than expected');\n      console.log('  • Insufficient permissions');\n    }\n    \n    return {\n      success: true,\n      userInfo,\n      accessibleDatabases: databases,\n    };\n    \n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error('❌ Connection test failed:', errorMessage);\n    \n    if (errorMessage.includes('Unauthorized')) {\n      console.error('🔑 Token appears to be invalid or expired');\n    } else if (errorMessage.includes('NOTION_TOKEN')) {\n      console.error('🔑 NOTION_TOKEN environment variable not set');\n    }\n    \n    return {\n      success: false,\n      error: errorMessage,\n    };\n  }\n}\n\nexport async function validateDatabaseAccess(\n  databaseId: string,\n  token?: string\n): Promise<{ canAccess: boolean; error?: string }> {\n  try {\n    const client = createNotionClient(token);\n    \n    // Try to query the database with minimal parameters\n    await client.queryDatabase({\n      database_id: databaseId,\n      page_size: 1,\n    });\n    \n    return { canAccess: true };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      canAccess: false,\n      error: errorMessage,\n    };\n  }\n}\n\n// CLI script for manual testing\nif (import.meta.main) {\n  console.log('🧪 Notion Connection Test');\n  console.log('========================\\n');\n  \n  testNotionConnection()\n    .then(result => {\n      if (result.success) {\n        console.log('\\n🎉 Connection test completed successfully!');\n        process.exit(0);\n      } else {\n        console.log('\\n💥 Connection test failed');\n        process.exit(1);\n      }\n    })\n    .catch(error => {\n      console.error('💥 Unexpected error:', error);\n      process.exit(1);\n    });\n}","usedDeprecatedRules":[]}]