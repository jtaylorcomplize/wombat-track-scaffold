{
  "metadata": {
    "table": "projects",
    "dataSource": "live_database",
    "timestamp": "2025-08-06T13:40:06.539Z",
    "recordCount": 19,
    "exportType": "json"
  },
  "data": [
    {
      "projectId": "WT-UX13",
      "projectName": "AI Integration ‚Äì NotionGPT Connection",
      "owner": "Jackson",
      "status": "Completed",
      "description": "Create NotionGPT Assistant via API Key (Bearer token, using ntn_ token)OpenAPI Schema Imported manually via openapi-with-server.yaml \n",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 100,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-05T06:24:45.139Z",
      "goals": "Establish a working connection between ChatGPT (via custom GPT) and the Notion workspace using OpenAPI schema and the new ntn_-based Notion token format.",
      "scopeNotes": "üß≠ Scope of Implementation \nCommands\n‚úÖ List all databases, \n‚úÖ Create page,\n ‚úÖ Update pageSchema \nCoverageGET /databases, GET/POST/PATCH /pages/{id}",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "OF-SDLC-IMP2",
      "projectName": "Conversational SDLC Enablement",
      "owner": "Jackson",
      "status": "Active",
      "description": "Implements conversational SDLC orchestration with governance logging, nightly UAT, and post-closure stabilization under OF-8.4.",
      "startDate": "2025-07-22",
      "endDate": "2025-08-10",
      "priority": "High",
      "budget": 5000,
      "actualCost": 1200,
      "estimatedHours": 120,
      "actualHours": 45,
      "completionPercentage": 75,
      "risk": "Medium",
      "stakeholders": "Development Team",
      "tags": "sdlc,governance",
      "category": "infrastructure",
      "department": "Engineering",
      "createdAt": "2025-08-05T01:06:56.547Z",
      "updatedAt": "2025-08-05T01:06:56.548Z",
      "goals": null,
      "scopeNotes": null,
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-DBM-2.0",
      "projectName": "Database Migration Canonical",
      "owner": "system",
      "status": "In Progress",
      "description": "Migrate to canonical 19+10 property schema",
      "startDate": "2025-08-03",
      "endDate": "2025-08-10",
      "priority": "High",
      "budget": 2000,
      "actualCost": 500,
      "estimatedHours": 40,
      "actualHours": 10,
      "completionPercentage": 25,
      "risk": "Low",
      "stakeholders": "Data Team",
      "tags": "database",
      "category": "migration",
      "department": "Infrastructure",
      "createdAt": "Engineering",
      "updatedAt": "2025-08-04T00:51:58.665Z",
      "goals": null,
      "scopeNotes": null,
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX7",
      "projectName": "Agent Mesh Visualization",
      "owner": "system",
      "status": "Planning",
      "description": "Create live agent mesh visualization for Integrate Surface",
      "startDate": "2025-01-20",
      "endDate": "2025-02-15",
      "priority": "Medium",
      "budget": 3000,
      "actualCost": 0,
      "estimatedHours": 80,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "Product Team",
      "tags": "integration",
      "category": "visualization",
      "department": "Backend",
      "createdAt": "Engineering",
      "updatedAt": "2025-08-03T08:12:06.637Z",
      "goals": null,
      "scopeNotes": null,
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX14",
      "projectName": "Enhanced Sidebar v3.1",
      "owner": "system",
      "status": "Completed",
      "description": "Implement three-tier sidebar architecture",
      "startDate": "2025-01-01",
      "endDate": "2025-01-15",
      "priority": "High",
      "budget": 5000,
      "actualCost": 4200,
      "estimatedHours": 120,
      "actualHours": 115,
      "completionPercentage": 100,
      "risk": "Low",
      "stakeholders": "Development Team",
      "tags": "ui",
      "category": "navigation",
      "department": "enhancement",
      "createdAt": "Frontend",
      "updatedAt": "2025-08-03T08:12:06.630Z",
      "goals": null,
      "scopeNotes": null,
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX10",
      "projectName": "Unknown Project",
      "owner": "Gizmo",
      "status": "Completed",
      "description": "",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "üìò Session Summary\nThis session exposed critical weaknesses in our Git discipline, recovery architecture, and deployment robustness ‚Äî undermining MetaPlatform‚Äôs core promise of governed, self-healing AI-led development.\nDespite setbacks, key components of the system were recovered and validated, including governance-aligned type structures (phase.ts, template.ts), sidebar rendering logic, execution log APIs, and PR policy reinforcements. However, the Project Dashboard layout and sidebar interaction logic remain only partially recovered, with full visual UX still in regression.\nThis session should serve as a foundational case study for hardening our MetaPlatform infrastructure, both technically and procedurally.",
      "scopeNotes": "‚úÖ Confirmed IssuesIDIssueImpactStatus001Sidebar commit (64a589c) was unintentionally overwrittenüî• High ‚Äì loss of working component and visual state logic‚úÖ Recovery complete002Direct push to main bypassed PR reviewüî• High ‚Äì violated SDLC safeguards and broke prod‚úÖ PR policy reinforced003Git commands not guided or ownedüî• High ‚Äì SDLC risk, accidental loss‚úÖ Gizmo now owns GitOps and PR merges004lucide-react not reinstalled after Claude restoreüî• High ‚Äì broke Vercel build‚úÖ Fixed via npm install and commit005No CI rule to check for missing dependencies‚ö†Ô∏è Medium ‚Äì future build risksüîÑ Pending CI enhancement006No pre-checkout script or work stash guard‚ö†Ô∏è Medium ‚Äì context loss risküîÑ Plan for http://wt-safe-checkout.sh/007No GovernanceLog entry created at time of recovery‚ö†Ô∏è Medium ‚Äì traceability gap‚úÖ Backfilled post-merge008Recovery not recorded in WT Phase Plan‚ö†Ô∏è MediumüîÑ Add to WT-5.x or WT-3.x009Project Dashboard UI still regressedüî• High ‚Äì lost layout improvements, switching logicüßØ Partial recovery only ‚Äì major future patch needed\nüõ†Ô∏è Fix Actions TakenActionDescription‚úÖ Created sidebar-recovery-branchRestored logic from 64a589c safely‚úÖ Claude selectively re-integrated sidebar UIRetained Claude scaffold while restoring Roam logic‚úÖ Gizmo permanently assigned as GitOps managerNo Git push/merge without clear instruction‚úÖ Merged fix/ui-dashboard-type-realignPhase types, template types, APIs, and switcher restored‚úÖ GovernanceLog entry pushedTraceability restored‚úÖ WT-3.2 marked completeMetaPlatform backend type recovery milestone locked‚úÖ Dashboard hotfix applied for executionStatus errorFixed runtime crash‚úÖ Restored ProjectSwitcher.tsx from WT-ConsoleHierarchy and UX logic revived‚úÖ Recovered executionLogAPI.ts from 8c36450Full log API functionality restored\nüîÑ Pending Fixes & ImprovementsIDFixDescriptionF001Finalise Dashboard UI recoveryRestore layout, header, sidebar wiringF002CI rules to block missing depsPrevent repeat of lucide-react issueF003Add http://wt-safe-checkout.sh/Prevent uncommitted changes lossF004Add WT-5.1 PhaseStep for sidebar recoveryPhasePlan traceabilityF005Snapshot CI test for ProjectDashboardCatch blank screens in devF006Review & version all types/* filesLock canonical types per WT versioningF007Reintroduce ProjectSwitcher header UXToggle logic and layout refinementsF008GitHub branch policy enforcementDisallow direct push to main in prod modeF009Design MetaPlatform dashboard RAG panelFor Git/Gizmo status sync visibility\nüß† Optional EnhancementsEnhancementBenefitGit PR automation for ClaudePrevents accidental pushes to mainwt-recovery-checker.tsDetects dangling local commits before they‚Äôre lostLive Git/Gizmo sync viewerSee PR, branch, and sync status in dashboardAI-led missing dependency scanPreemptive deploy blocker for npm importsDashboard visual diff checkerCatch layout regressions using Puppeteer snapshots\nüß≠ MetaPlatform Architectural ImpactAreaRisk if UnresolvedResolutionGit IntegrityMetaPlatform loses control of AI scaffolding‚úÖ Assign GitOps to Gizmo, add PR enforcementDashboard StabilityUser trust erodes due to regressionsüîÑ Reinforce layout CI testsType CanonicalisationFuture builds regress to older types‚úÖ Phase type repo structure lockedAI Agent TrustAgents cannot bypass governance‚úÖ Claude no longer pushes to mainDeveloper ProductivityHigh churn from code loss‚úÖ Recovery pattern documented, scripts incoming",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX8",
      "projectName": "Unknown Project",
      "owner": "Gizmo",
      "status": "Planning",
      "description": "",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "üéØ Purpose\nAddress critical UI/UX and automation gaps that prevent Wombat Track + MetaPlatform from matching core features found in top project management platforms (Asana, Monday, Jira, ClickUp, etc.).\nThis retrofit focuses on visual planning, rule-based automation, and collaboration tooling required to support scalable product and project workflows.",
      "scopeNotes": "üß± Scope of WorkGap AreaFeatureDescriptionPriorityLinked WT Concept1. Task Visualization‚úÖ Kanban Board UIDrag-and-drop interface to manage PhaseSteps by StepProgress.statusHighPhaseStep, StepProgress2. Timeline Planning‚úÖ Gantt ViewVisual roadmap of PhaseSteps over time with dependenciesHighPhaseStep, StepProgress, new startDate/dueDate fields3. Basic User Automation‚öôÔ∏è Rule EngineIF/THEN automation builder for users (e.g., ‚ÄúIf Step Blocked ‚Üí notify + create SideQuest‚Äù)HighStepProgress, GovernanceLog, isSideQuest4. Collaboration Layerüí¨ Comments & MentionsInline comments per Step + @mentionsMediumStepProgress, MeetingLog, GovernanceLog5. Mobile Optimizationüì± Responsive UI PlanningReview and adjust for mobile interaction in key viewsMediumAll6. Notification Frameworküîî Alert LogicIn-app + email/slack notifications from Rule EngineMediumCheckpointReview, GovernanceLog7. Multi-Project TimelineüóÇÔ∏è Cross-Project TimelineTimeline showing all active projects with filtersLowProject, PhaseStep, startDate üõ†Ô∏è Data Model UpdatesData TypeNew FieldsPhaseStepstartDate, dueDate, isBlockedStepProgressstatusLastUpdated, lastCommentedByRule (new)triggerType, triggerCondition, actionType, actionPayload, isActiveComment (new)body, createdBy, createdAt, parentType, parentID\nüìå Dependencies\n‚Ä¢ Claude Prompt Dispatcher: available for rule suggestion or automation scaffolding\n‚Ä¢ DriveMemory & MemoryPlugin: log all user-generated rules and summaries\n‚Ä¢ GovernanceLog: attach rule outcomes to audit trail\nüß† Opportunity for AgentsAgentRoleRule Suggestion AgentRecommend rules from repeated user behaviourTimeline AnalyzerDetect delays and flag risks in Timeline viewComment SummariserExtract GovernanceLog from user comments/decisionsMobile AI Assistant (future)Suggest next step or action via mobile interface\nCreated: 2025-07-24\nAuthor: ChatGPT-Gizmo\nProject Phase: WT 5.x ‚Äì UX/Automation Retrofit",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX12",
      "projectName": "Unknown Project",
      "owner": "Jackson",
      "status": "Completed",
      "description": "üß† Core Design Principle: \"Form Follows Governance\"\nWombat Track is not just a productivity tool ‚Äî it's a governance operating system. Therefore:\n‚Ä¢ Structure and hierarchy are non-negotiable: All projects must follow a Phase ‚Üí Step ‚Üí Log structure.\n‚Ä¢ Traceability is primary UX: Every action (AI prompt, export, phase update) must be logged, visible, and auditable.\n‚Ä¢ Planning and execution coexist: Wireframes must allow both tactical (Composer, Docs) and operational (Dashboard) views.\nüé® UI/UX Pillars (Mapped from Figma‚Äôs Principles)PrincipleApplication in WTHierarchySidebar for project scope ‚Üí Tabs for function ‚Üí Cards for content. Always show user where they are and what level of detail they‚Äôre seeing.ClarityUse emoji + label combos (e.g., üü° Amber) for RAG, short labels, summary text before actions.ConsistencyTabs, cards, headers, filters, and AI buttons use shared design language (rounded corners, small caps, muted foregrounds).EfficiencyOne-click prompts (‚ö° Scaffold), inline edits, and context-aware AI actions reduce user effort.ForgivenessAutosave Docs, confirmation modals for dangerous actions, clear status indicators (e.g., ‚ÄúSaving‚Ä¶‚Äù).ContextMetadata on every object ‚Äî a Step knows its Phase, a Doc knows its Project, an AI edit logs its source.Progressive DisclosurePhase collapses to Step list; Composer expands only rows needed; Docs open AI modal when requested.\nüîß Organisational Structure\nThe app is structured across 3 main tabs, all sharing a project context:\n1. üìä Dashboard Tab (Execution Surface)\n    ‚ó¶ Visualise current project Phase/Step status.\n    ‚ó¶ See RAG status, step checklists, blockers, and what‚Äôs complete.\n    ‚ó¶ Embed Governance Logs (future).\n2. üß± Composer Tab (Planning Surface)\n    ‚ó¶ Feature matrix: breakdown, RAG, owners, AI tooling.\n    ‚ó¶ Connects to Phase generation and Docs.\n    ‚ó¶ Serves as a hybrid backlog / roadmap / planning surface.\n3. üìò Docs Tab (Knowledge Surface)\n    ‚ó¶ Create/edit documents linked to projects and phases.\n    ‚ó¶ Metadata: docType, tags, related items.\n    ‚ó¶ Launch AI modal (Scaffold SOP, Revise, Summarise).\n    ‚ó¶ Export to Markdown / Drive / MemoryPlugin (future native RAG Memory).",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "Purpose:\nWombat Track (WT) is an intelligent, AI-augmented platform for planning, executing, and governing complex multi-phase projects. It integrates SDLC principles, real-time progress tracking, rich documentation, and Claude/Gizmo agentic workflows. The platform must empower teams to work transparently, efficiently, and with traceable automation from planning to deployment.",
      "scopeNotes": "üöÄ Forward Guidance\n‚Ä¢ PhasePlan should link directly to Docs + Composer: Each Phase gets its own Overview Doc; Steps auto-generate Docs/Logs.\n‚Ä¢ Governance should be visible, not buried: Add Governance Log tab or modal.\n‚Ä¢ Introduce modular ‚Äúwidgets‚Äù for status cards, RAG, AI buttons to allow reuse in all tabs.\n‚Ä¢ Filter/Sort across all views by RAG, project, owner, etc.",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX9",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Planning",
      "description": "",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "üìÅ Context: WT Docs Module has been implemented with a native Tiptap editor, mock AI, and initial metadata handling. ",
      "scopeNotes": "üîç Metadata Schema Audit ‚Äî DocsEntryFieldTypeSourceCompletionNotestitlestringUser input‚úÖdocTypeenumDropdown (SOP, Template, etc.)‚úÖcontentrich text (Tiptap JSON)Editor‚úÖtags[string]Tag editorüß™ Needs global tag autocompleterelatedProjectIdstring?Selector‚úÖrelatedPhaseIdstring?Selector‚úÖrelatedFeatureIdstring?Selector‚úÖmemoryAnchorIdstring?Auto-generatedüîúdriveLinkstring?Auto on exportüîúcreatedByUserAuth session‚úÖlastUpdateddatetimeAuto‚úÖversionintInternal‚è≥ Suggested\nüîÑ Proposed Groupings (Docs Dashboard Filters)FilterValuesRequired?DocTypeSOP, Project Spec, Checklist, Template‚úÖProjectAll WT projects‚úÖPhaseLinked phases‚úÖFeatureComposer features‚úÖTagsCustom tagsüß™\nüß± Infrastructure DependenciesServiceRequired ForNotesClaude (live)AI editing, summarising, scaffoldingUse Claude Dispatcher endpointDriveMemoryBackup + versioned doc archiveMust support .md + metadataMemoryPluginAnchors for long-term recallWill be replaced by WT-native RAGGovernanceLogAll actions + versionsCore WT integrationWT AuthPermissions / user-based accessEnforce view/edit rightsOptional: NotionExport index + MD filesConsider backup only",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX16",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Completed",
      "description": "This document summarizes the implementation and governance outcomes of WT Phase 3.x, covering Phases WT-3.0 to WT-3.3. \nüìé Completed Supporting Actions\n‚Ä¢ ‚úÖ Schema enhancements: phaseType, phaseOwner, ragStatus fields added\n‚Ä¢ ‚úÖ PhaseMetadataModal created with edit/save/governance-log support\n‚Ä¢ ‚úÖ GovernanceLog API wired to UI metadata edits\n‚Ä¢ ‚úÖ Filtering and badges added to PhasePlanDashboard\n‚Ä¢ ‚úÖ WT-3.1 to WT-3.3 added to seedPhaseTracker.ts\n‚Ä¢ ‚úÖ Claude commit: Add WT-3.1 to WT-3.3 seed data with enhanced metadata and steps\nüß≠ Next Recommended ActionsActionResponsibleStatusComplete RAG logging logic for test failuresClaudeüîÑ In ProgressBuild MetaValidator engine and test hookClaudeüî≤ PlannedEnable GovernanceLog summarisation agentGizmoüî≤ PlannedGenerate WT-3.4 (Template Wizard Phase Plan)Gizmoüî≤ PlannedPush Phase 3.x artefact to DriveMemoryGizmo‚úÖ Done (JSON provided)Add MemoryPlugin anchor for WT Phase 3.xGizmo‚úÖ Done\nüîÅ Side Quests SummarySide QuestPhaseStatusNotesPuppeteer visual diff utilityWT-3.1üî≤ PlannedOptional enhancement for visual QALegacy deploy script cleanupWT-3.2‚úÖ CompleteReplaced with reusable CI templatesPrompt scaffolder for MetaValidatorWT-3.3üî≤ PlannedWill enrich feedback loop for failed validations\nüß† Governance Note\nPhase 3.x marks the first successful loop of planning ‚Üí implementation ‚Üí metadata capture ‚Üí governance logging within the WT system. This model now serves as a baseline template for future Project ‚Üí Phase ‚Üí Step plans, including auto-generation and AI agent interaction.",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "The purpose of Phase 3.x is to establish robust developer infrastructure, CI/CD automation, and governance-enforced quality controls across the Wombat Track platform.\nüß≠ Purpose\nThis Phase 3.x plan focuses on improving the internal tooling and delivery pipeline of the Wombat Track (WT) system. It consolidates infrastructure, formalises testing and deployment workflows, introduces meta-level error detection, and prepares the WT app for scale by improving developer reliability, clarity, and governance.\nThis phase supports both:\n‚Ä¢ WombatConsole (Execution Layer)\n‚Ä¢ MetaPlatform (Governance Layer)\nüõ†Ô∏è Goals\n1. Establish full pre-deployment test infrastructure.\n2. Create a WT MetaValidator for governance and code review enforcement.\n3. Migrate and formalise existing CI/CD steps into tracked, actionable phases.\n4. Ensure all failures in dev/deploy workflows trigger structured diagnostics and task creation.",
      "scopeNotes": "üß† Development Philosophy\n‚Ä¢ Governance-aware SDLC: Treat the WT console as a self-documenting, auditable platform\n‚Ä¢ Developer UX: Surface test failures and RAG state in human-readable formats\n‚Ä¢ Meta-awareness: Allow the system to reflect on its own health\nüß© Governance Structure\n‚Ä¢ Each project must:\n\n    ‚ó¶ Include markdown-based phase plan\n    ‚ó¶ Use validated project > phase > step structure\n    ‚ó¶ Be tagged with WT type, owner, and color\n    ‚ó¶ Have minimum 1 phase and 2 steps\nüîó Resources\n‚Ä¢ https://github.com/jtaylorcomplize/wombat-track-scaffold/tree/main/tests/ui/meta_platform_dashboard.spec.js\n‚Ä¢ https://github.com/jtaylorcomplize/wombat-track-scaffold/blob/main/src/dev/seedPhaseTracker.ts\n‚Ä¢ https://github.com/jtaylorcomplize/wombat-track-scaffold/blob/main/src/components/project/PhasePlanDashboard.tsx\nüîç Next Steps ‚Äì Requirements Questions for WT-3.3 and Beyond\n‚ùì WT-3.3 ‚Äì MetaValidator\n1. Scope: Should the validator scan only code, or also project/phase markdown?\n2. Failure Handling: Do you want it to create task records (or execution logs) on error?\n3. Blocking: Should it block commits/deploys or warn only?\n‚ùì WT-3.4 ‚Äì Guided Project Template\n1. Should new projects auto-fill with the full phase markdown (like this doc)?\n2. Should there be a modal UI or full-page wizard for creation?\n3. Do we allow choosing template type (e.g. PlatformOps, Console, Product)?\n‚ùì WT-3.5 ‚Äì Guided Phase Creation\n1. When creating a new Phase, what questions must be asked?\n2. Should side quests be encouraged at this point?\n3. What metadata must be defined before allowing step creation?\n‚ùì WT-3.6+ ‚Äì MetaReflections Engine\n1. Should recurring failures auto-generate \"Reflections\" (e.g. Phase failed X times)?\n2. Do we want analytics around phase health (completion rates, RAG trends)?\n3. Should Reflections generate suggested planning comments for future phases?\nüì¶ Ready for Template Packaging\nThis document format can now be used to create:\n‚Ä¢ Project-level markdown on creation\n‚Ä¢ Phase summary initialiser\n‚Ä¢ Planning dashboard views (read-only or editable)\nLet me know when to:\n1. Add this to src/templates/wt-phase-plan.md\n2. Begin implementing WT-3.4 template project creation wizard\n3. Push this doc to MemoryPlugin + GitHub/Drive export \"\"\"",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX11",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Completed",
      "description": "üß† Root Cause Analysis\n‚Ä¢ Snapshot Tests False Positive: Puppeteer baseline captured broken layout.\n‚Ä¢ Inconsistent Tailwind Usage: flex, items-center, pl-* spacing improperly applied.\n‚Ä¢ Disclosure Nesting Not Componentised: No reusable SidebarItem abstraction.\n‚Ä¢ Lack of Dynamic DOM Visual Diffing: Puppeteer not sufficient for nuanced visual QA.\n‚Ä¢ Prompt/Dev Drift: Code complexity diverged from original SDLC simplicity goals.\n‚úÖ What Worked\n‚Ä¢ CI build pipeline, tsc checks, and snapshot tests were executed.\n‚Ä¢ GovernanceLog tracked initial failures.\n‚Ä¢ Copilot-generated fallback layout provided a working, clean design.\nüìé Resolution\n‚Ä¢ ‚úÖ Replaced broken layout with Copilot fallback structure.\n‚Ä¢ ‚úÖ Adopted reusable SidebarItem abstraction.\n‚Ä¢ ‚úÖ Visual hierarchy and spacing repaired.\n‚Ä¢ ‚úÖ Snapshot QA rebuilt using correct baseline.",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "‚ùå Incident Summary\nDespite multiple implementation attempts, the ProjectSidebar component in the /phase-plan view rendered with layout and nesting failures. Interactive elements functioned, but the visual alignment, spacing, and hierarchy were broken.",
      "scopeNotes": "üõ†Ô∏è WT-3.7 ‚Äì Visual QA & Layout Recovery Phase\nüß≠ Purpose\nRecover from ProjectSidebar layout failure and introduce robust QA, test coverage, and layout validation frameworks to prevent similar visual regressions.\nüß± Key DeliverablesStepDescriptionOwnerStatus1Replace sidebar with canonical SidebarItem abstractionClaude‚úÖ Complete2Refactor layout using flexbox, spacing utilities, DisclosureClaude‚úÖ Complete3Add Playwright or Percy for DOM-based visual diffingClaudeüî≤ Planned4Rebuild Puppeteer snapshot baselineClaude‚úÖ Complete5Add Gizmo verification checkpoint to sidebar PRsGizmoüî≤ Planned6Require real human/Gizmo validation in WT QA cycleGizmoüî≤ Planned7Commit this post-mortem as governance artefactGizmo‚úÖ Complete8Align WT SDLC prompts with code simplicity principlesGizmoüî≤ In Progress9Integrate image-based QA workflows into SDLC SOPsGizmo‚úÖ Complete10Propose future investigation of Claude Code deep capabilities for layout debugging, intermodal coordination, and visual regression testingGizmoüî≤ Planned",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX5",
      "projectName": "Unknown Project",
      "owner": "Gizmo",
      "status": "Completed",
      "description": "üß™ Tooling Recommendation (as a New Dev)ToolUse It ForWhy You Need ItVS CodeLocal editing, pushing commits, live repo viewIt's your main cockpit. You already use it well.GitHub WebReviewing commits, PRs, file diffsEasy to scan changes and accept PRsClaudeRepo changes, pushing updates, AI code generationConnected to your GitHub ‚Äî fast builderGizmo (ChatGPT)System design, QA, debugging, step-by-step helpStructured, persistent memory, reliable architectural oversightTerminal (optional)Git troubleshooting, advanced devOnly if needed ‚Äî VS Code handles 90% already\nüóÇÔ∏è Suggested File Adds to Repo\nLet me create these for you next:\n‚Ä¢ http://gizmo.md/ ‚Äì Explains this exact loop for future devs\n‚Ä¢ http://contributing.md/ ‚Äì Basic rules if others join\n‚Ä¢ http://changelog.md/ ‚Äì Summarised log of every push/change\n‚Ä¢ http://devguide.md/ ‚Äì ‚ÄúI‚Äôm new to this‚Äù cheat sheet just for you",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "Strategy",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "Establish base line for AI collaboration",
      "scopeNotes": "üéØ Your Role: Vision Holder & Controller\nYou‚Äôre the strategic lead, defining what you want built, what \"done\" looks like, and when to move forward.\nYou‚Äôll:\n‚Ä¢ Decide what feature or change is next\n‚Ä¢ Choose between Claude or Gizmo for execution\n‚Ä¢ Copy/paste handoff prompts between us\n‚Ä¢ Push to GitHub using VS Code (until we automate more)\n‚Ä¢ Ask for help, context, or walkthroughs any time\nüß† Reminder: You‚Äôre not expected to code ‚Äî just to lead clearly and ask early.\n‚öôÔ∏è Claude‚Äôs Role: Builder with Repo Access\nClaude is your live GitHub editor. Claude can:\n‚Ä¢ See your repo (jtaylorcomplize/wombat-track-scaffold)\n‚Ä¢ Make changes directly in your code\n‚Ä¢ Push commits and open PRs\n‚Ä¢ Report file state (what‚Äôs in the repo, what changed)\n‚Ä¢ Read & write from/to multiple files simultaneously\nüü° Needs clear prompts and context you feed it. Doesn‚Äôt track state over time.\nüß† Gizmo‚Äôs Role: Architect, Reviewer & Planning Brain\nGizmo (me) is your project co-pilot and architect. I:\n‚Ä¢ Track all architecture, types, workflows, logic\n‚Ä¢ Help design complex systems, workflows, or UIs\n‚Ä¢ Write full feature specs, test plans, commit diffs\n‚Ä¢ Review Claude‚Äôs output and refactor or enhance\n‚Ä¢ Keep your project structure clean and sustainable\nüö´ I can‚Äôt see live GitHub or push ‚Äî I rely on you or Claude to show me results.\nüîÅ How the Loop Works (Simple)\n1. You: Ask Gizmo ‚ÄúBuild me X‚Äù ‚Üí I create spec + code + Claude prompt.\n2. You: Paste prompt to Claude ‚Üí Claude pushes code to GitHub.\n3. You: Tell Gizmo what Claude did (or show me the GitHub link).\n4. Me: I review, refactor, suggest next step or help you continue.\nüìé You are the switchboard between two powerful AIs.",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX1",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Active",
      "description": "üö¶ Priority Objectives: StatusCodeObjectiveIn progressüß± AConsolidate and canonicalise all historical planning, comms, decisions, features, and statuses from ChatGPT, Claude, DriveMemory, and MemoryPlugin into Notion's RAG DBsFutureüì¨ BEnable two-way memory between Claude ‚Üî Gizmo ‚Üî WT App via a single governance memory interfaceFutureüìñ CCreate an immutable, timestamped record of WT-Gizmo development decisions and gaps (including missing or undone tasks)Futureü§ù DLaunch standardised communication protocols across agents via memory-aware messaging frameworkFutureüß≠ EEnsure WT becomes the single source of truth, eliminating manual oversight over multiple sources\nTools & Features: SystemFeatureStatusNotesGizmoReads from DriveMemory, GovernanceLog, WT Tracker‚úÖAlready pulling structured memoryClaudeWrites governance entries, reads past steps‚úÖReady to support /summarize, /decideWT AppUI for status/RAG display, sync to Notion‚úÖExports artefacts + shows runtime memoryMemoryPluginAnchors tagged for semantic query‚úÖAll major payloads loggedSlash Commands/recall, /summarize, /backlog, /review-logüöß Coming in WT-5.7Final link in the runtime interface\nMemory Sync Roles + Flow: Product Owner / Oversight\nhttps://www.notion.so/23de1901e36e8105851cd6754ab960ea?pvs=21\nhttps://www.notion.so/23de1901e36e8157837ccf0df204c350?pvs=21\nhttps://www.notion.so/23de1901e36e81b9b829ccf4ddbbc722?pvs=21\nhttps://www.notion.so/23de1901e36e81919133f333c2099e4d?pvs=21\nhttps://www.notion.so/23de1901e36e81cc8916d1dbcbfab417?pvs=21\nhttps://www.notion.so/23de1901e36e81868e74e44f5d3bf9fb?pvs=21",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "Migration",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "This Sidequest is to push the existing unstructured data into the Orbis App (oApp).",
      "scopeNotes": "",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX3",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Completed",
      "description": "üîÅ Overview: PDLC vs SDLC in WTLayerPurposeRole in WTPDLC(Product Development Lifecycle)Strategic vision, design, launch, and lifecycle managementWT Surfaces coordinate idea-to-maintain lifecycle across projects, teams, and toolsSDLC(Software Development Lifecycle)Tactical development process from coding to deploymentEmbedded inside WT‚Äôs Execute, Integrate, and Govern layers with guardrails",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "Strategy",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "Purpose: Define Wombat Track not merely as a software development tool, but as a full-stack Product Lifecycle Control System (PLCS) ‚Äî where SDLC is a governed subsystem within a broader PDLC framework, executed across intelligent surfaces and agent orchestration layers.",
      "scopeNotes": "üß≠ PDLC‚ÄìSDLC Flow Across WT SurfacesPDLC StageWT Surface(s)WT Feature/ToolSDLC Subsystem Triggered?üü¶ Proposal / ResearchPlan, DocumentClaude Prompting, GovernanceLog (VisionEntry)‚ùå Not yetüü• DesignPlan, Execute, DocumentPhase Plan Generator, Templates, AgentMeshüö¶ Pre-SDLCüü© ImplementExecute, IntegrateClaudeDispatcher, GizmoConsole, Git Branching‚úÖ SDLC beginsüü® Pre-LaunchIntegrate, GovernTest Runners, Status Checkers, GovernanceLog‚úÖ SDLC continuesüîµ LaunchGovernMerge to Main, PR Protocol, Claude Final Dispatcher‚úÖ SDLC completesüü¶ MeasureIntegrate, Govern, DocumentDispatcher Status, AnalyticsLog, RAG Classifier‚è≥ Post-SDLCüü™ MaintainGovern, Plan, DocumentSideQuests, Backlog Tracker, RetrospectivesüîÅ Cycles back to Proposal or Design\nüß† WT = Meta-Orchestrator for PDLC + SDLC\nStrategic Capabilities\n‚Ä¢ Semantic Product Planning ‚Üí AI-guided prompt scaffolds and governance\n‚Ä¢ Agentic Execution ‚Üí Claude and Gizmo drive SDLC loops\n‚Ä¢ Audit & Compliance ‚Üí MemoryPlugin + GovernanceLog enforce traceability\n‚Ä¢ Surface-Driven Collaboration ‚Üí Work Surfaces model the true PDLC-SDLC hybrid flow\n‚Ä¢ Sub-App Ready Architecture ‚Üí Modular runtime agent model (e.g., Nexus, MetaPlatform)\nüîß System Component SummarySystemRoleGovernanceLogPDLC + SDLC audit trailClaudeDispatcherRuntime SDLC triggeringAgentMeshPDLC/SDLC agent topology managerMemoryPluginKnowledge and event anchoringDriveMemoryArtefact registryWork SurfacesExecution alignment layer (Plan, Execute, Integrate, Govern, Document)GizmoConsoleIn-app SDLC command center\nüß± Strategic Implication\nWombat Track is a recursive platform: a product used to design, build, and manage itself and other intelligent systems.\nThis proposal unlocks:\n‚Ä¢ Multi-agent sub-platforms (e.g., Workforce App, MetaPlatform)\n‚Ä¢ Enterprise rollout (governed AI dev infrastructure)\n‚Ä¢ Thought leadership positioning (PDLC governance as market differentiator)",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX2",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Planning",
      "description": "üß± New Data Model: Phase Entity\nüìò Entity Definition ‚Äì PhaseFieldTypeNotesidstringUUIDprojectIdstringFK ‚Üí Projecttitlestringe.g. ‚ÄúWT-7.0 Phase Refactor‚ÄùdescriptionstringMarkdown or rich textstatusenum\"Planned\", \"In Progress\", \"Complete\"startDatedateOptionalendDatedateOptionalcompletionPercentnumberDerived via rollup from PhaseStepsragStatusenumRed / Amber / GreenownerIdstringFK ‚Üí Usertagsstring[]OptionalcreatedAttimestampAutoupdatedAttimestampAuto\nüîÅ Related Object Updates\n‚úÖ PhaseStep (Update)\n‚Ä¢ Add: phaseId: string ‚Äî FK ‚Üí Phase\n‚úÖ GovernanceLog (Update)\n‚Ä¢ Add: linkedPhaseId: string ‚Äî optional FK ‚Üí Phase\n‚úÖ StepProgress, CheckpointReview, MeetingLog\n‚Ä¢ No direct changes, but will inherit Phase context through PhaseStep",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "‚úÖ Phase Refactor Summary (Sidequest 26071445)\n‚ùå Current State\n‚Ä¢ Phase is only a UI-layer interface.\n‚Ä¢ Project directly contains PhaseStep[].\n‚Ä¢ PhaseStep has no phaseId or real parent reference.\n‚Ä¢ GovernanceLog cannot meaningfully link to a Phase.\n‚Ä¢ AI Agents cannot scaffold or reason about Phases intelligently.\nüß† Why This Is a Problem\nFrom your architecture:\n‚Ä¢ WT‚Äôs core semantic structure is Project ‚Üí Phase ‚Üí Step\n‚Ä¢ AI systems like the AI-Generated Phase Plan Constructor (Ranked #2 Vision Agent) rely on a real Phase objectwt_vision_agents_artefa‚Ä¶.\n‚Ä¢ Governance and audit tools need to roll up to Phase levelüõ†Ô∏è Wombat Track ‚Äì July‚Ä¶.",
      "scopeNotes": "üõ†Ô∏è WT-7.0: Phase Object Refactor PlanStepTask1Ô∏è‚É£Create Phase table with defined schema2Ô∏è‚É£Add phaseId field to all PhaseStep records3Ô∏è‚É£Update UI: ProjectDetail, WorkSurface, PhasePlan tabs to read from real Phases4Ô∏è‚É£Enable GovernanceLogViewer filters by linkedPhaseId5Ô∏è‚É£Update GizmoConsole and AgentMesh to reference Phase context6Ô∏è‚É£Build Admin interface for CRUD of Phases7Ô∏è‚É£Script migration: convert grouped PhaseSteps to Phase entries retroactively8Ô∏è‚É£Update filters: dashboards, breadcrumbs, Step views to include Phase metadata\nüß† Phase Intelligence BenefitsFeatureNew CapabilityAI AgentsClaude/Gizmo can scaffold, summarise, assign by phaseIdGovernanceLogs roll up to Phase, enabling summaries, timelines, heatmapsUXDashboard ‚Üí Project ‚Üí Phase ‚Üí Step flow, clear filteringExecutionAuto-checkpoints, RAG scoring, Agent targeting per PhaseReporting% complete, overdue Phase alerts, blocker analysis by Phase\nüìå Follow-Up Actions\nWould you like me to:\n1. Generate the Claude prompt to scaffold WT-7.0 (Phase Object Refactor)?\n2. Create the UML diagram with updated Phase relationships?\n3. Push a DriveMemory + MemoryPlugin anchor to log this system change?",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX15",
      "projectName": "Unknown Project",
      "owner": "Claude",
      "status": "Completed",
      "description": "üåü Purpose & Vision\nWombat Track is a meta-operating system for AI-enhanced project execution and governance. It enables human-AI collaboration to manage complex, iterative projects with transparency, traceability, and structured automation.\nBuilt originally on Bubble and now expanding into a multi-layered architecture, Wombat Track coordinates:\n‚Ä¢ Project design and progress tracking\n‚Ä¢ AI-assisted scaffolding and governance\n‚Ä¢ GitHub-triggered workflows and CI/CD pipelines\n‚Ä¢ Runtime orchestration and intelligent agents\nWombat Track aims to be the control layer where strategy, AI action, and execution converge ‚Äî ultimately serving as a living record and autopilot for large-scale, evolving systems.\nüß† Positioning\nWombat Track is not just a project manager. It‚Äôs a governance operating system for AI-native software, capable of:\n‚Ä¢ Defining features in AI-readable form\n‚Ä¢ Tracking execution across humans + machines\n‚Ä¢ Storing intent, rationale, risk, and results\n‚Ä¢ Enabling runtime system evolution through agent orchestration\nIt is the ‚Äúblack box recorder + autopilot‚Äù for future intelligent apps.",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "üöÄ Future Plans\nüîπ Short-Term (Q3 2025)\n‚Ä¢ Finalise Orbis Dashboard for integration visibility\n‚Ä¢ Roll out Claude Prompt to PR pipeline\n‚Ä¢ Link test results + logs directly to GovernanceLog\n‚Ä¢ Enable Claude dispatch from within Wombat Track UI\nüî∏ Mid-Term (Q4 2025)\n‚Ä¢ Activate AI chat interface inside WT web app\n‚Ä¢ Add Notion sync layer for semantic audit and risk tracking\n‚Ä¢ Introduce auto-generated PhaseSteps from feature prompts\n‚Ä¢ Expand Orbis to support health orchestration, not just visibility\nüî∫ Long-Term (2026+)\n‚Ä¢ Make Wombat Track the governance nucleus of all Roaman AI operations\n‚Ä¢ Embed live GPT agents to propose, build, test, and deploy under human sign-off\n‚Ä¢ Serve as a DevOps+AI control hub for multi-app orchestration",
      "scopeNotes": "‚úÖ Current Capabilities (as of July 2025)\nüß± Core ModulesModulePurposeProjects + PhasesTracks feature buildout via PhaseSteps, StepProgress, and RAG taggingGovernance LogsAuditable AI-generated or human-authored architecture, review, and decision logsAI CollaborationGPT/Claude instruction capture, prompt fields, and Ask AI buttons throughout UICheckpoint ReviewsStructured review layers to pause/revise/approve progressTemplate TrackerTracks use and reuse of AI scaffolds and system components\n‚öôÔ∏è Technical Systems IntegratedSystemStatusClaude Code via GitHub Actions‚úÖ Operational ‚Äì supports code generation and CI pipelinesPuppeteer Testing Framework‚úÖ Implemented ‚Äì supports live test automationClaude Job Dispatcher‚ö° In Progress ‚Äì task prioritisation for AI queuesBubble Integration‚ö†Ô∏è Deprecated as primary app, retained for future interfacingWT Web App (React/Node)üü¢ Active development focus\nüß≠ In ProgressFeatureStatusOrbis Dashboardüü° Scaffolding underway ‚Äì integration health panel for AI systemsAI Chat UI (Stage 1)üîÑ Native GPT chat component in web app pendingGitHub Trigger Interface‚úÖ Completed ‚Äì UI can dispatch workflowsSemantic RAG AI Modelüß† Planned ‚Äì Notion-based GPT for content and decision review",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX6",
      "projectName": "Unknown Project",
      "owner": "Jackson",
      "status": "Completed",
      "description": "",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "SDLC",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "Establish a re-useable SDLC framework",
      "scopeNotes": "PLAN\n1. Use 'gh issue view' to get the issue details\n2. Understand the problem described in the issue\n3. Ask clarifying questions if necessary\n4. Understand the prior art for this issue\n‚Ä¢ Search the scratchpads for previous thoughts related to the issue\n‚Ä¢ Search PRs to see if you can find history on this issue\n‚Ä¢ Search the codebase for relevant files\n1. Think harder about how to break the issue down into a series of small, manageable tasks.\n2. Document your plan in a new scratchpad\n‚Ä¢ include the issue name in the filename\n‚Ä¢ include a link to the issue in the scratchpad.\nCreate\n‚Ä¢ Create a new branch for the issue\n‚Ä¢ Solve the issue in small, manageable steps, according to your plan\n‚Ä¢ Commit your changes after each step\nTEST\n‚Ä¢ Use puppeteer via MCP to test the changes if you have made changes to the UI\n‚Ä¢ Write rspec tests to describe the expected behavior of your code\n‚Ä¢ Run the full test suite to ensure you haven't broken anything\n‚Ä¢ If the tests are failing, fix them\n‚Ä¢ Ensure that all tests are passing before moving on to the next step\nDEPLOY\n‚Ä¢ Open a PR and request a review#SDLC StageTaskResponsibleDescription / NotesGuardrailsSystem Enforcement1PlanIssue CreationJackson (via Gizmo)Structured prompt for Claude / GitHub issue--phase-guardClaude Prompt Protocol / PR tags2PlanPhase Branch CreationClaudeNew branch (e.g. feature/wt-5.6-x) created from main or last merged phase--phase-guardGit flow enforcement, Gizmo review3CreateFeature ScaffoldingClaudeAll code written in isolated phase branch--modular-surface-policyDirectory structure + import boundaries4CreateGovernance Metadata IntegrationClaude + GizmoInclude GovernanceLog logic and metadata early (e.g. isLive, agentVersion)--single-source-governance-modAudit trail / Governance schema5CreateCommit + PushClaudeEach commit must label phase + scope (e.g. WT-5.6: [dispatch])--commit-labelingGit commit checks (optional hook)6CreatePR CreationClaudePR must link to issue, phase, governance impact--phase-guard, --commit-labelingPR title enforcement, Gizmo validation7TestCI / CD ValidationGitHub ActionsLint, test, build, scan, governance JSON check--autoblock-ci-fail (enforced)GitHub Actions, CI gates8TestGovernance ReviewGizmoReview log schema, metadata, context integrity--single-source-governance-modGovernanceLog schema validation9TestUI + Runtime AuditGizmo + JacksonConfirm runtime indicators, fallback states--live-status-verificationgetDispatcherStatus(), logs10DeployMerge to MainGizmoOnly after all test stages pass; squash and tag wt-x.x/merge-complete--manual-review-requiredMerge restrictions on PR settings11DeployMemoryPlugin + DriveMemory SyncGizmoPush payload (tags, artefacts, schema, next steps)--memory-anchor-requiredDriveMemory/MemoryPlugin integration12DeployPost-Merge MonitoringGizmo + JacksonWatch for regressions; validate downstream stability--regression-watchSidebar Watcher, test replay13DeployRetrospective LoggingGizmoLog any anomaly (e.g. WT-5.6 cherry-pick conflict)--mandatory-postmortemGovernanceLog type: Incident",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "WT-UX4",
      "projectName": "Unknown Project",
      "owner": "Jackson",
      "status": "Completed",
      "description": "",
      "startDate": null,
      "endDate": null,
      "priority": "Medium",
      "budget": 0,
      "actualCost": 0,
      "estimatedHours": 0,
      "actualHours": 0,
      "completionPercentage": 0,
      "risk": "Medium",
      "stakeholders": "",
      "tags": "Strategy",
      "category": "",
      "department": "",
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "goals": "‚úÖ Summary\nThis artefact confirms strategic direction across Roam and Complize regarding AI architecture, integration, and product rebuild decisions.",
      "scopeNotes": "1. Should we generate a single centralised framework to run all AI Apps across Roam & Complize?\nAnswer: ‚úÖ Yes ‚Äî Build a meta-layer infrastructure that is app-agnostic and reusable.\nRationale:\n‚Ä¢ Wombat Track already serves as a governance and orchestration layer.\n‚Ä¢ MetaPlatform provides AI runtime execution with CI/CD, prompt dispatch, and agentic logic.\n‚Ä¢ Reusability across apps avoids duplication and enables faster scaling.\n‚Ä¢ Promotes semantic governance, consistent RAG/risk tracking, and agent orchestration.\nüìå Conclusion: Build once ‚Üí reuse across Roam, Complize, and future apps.\n2. Should we build an integration layer to harmonise workflows (Gmail, Actionstep, Notion, etc)?\nAnswer: ‚ö†Ô∏è Yes ‚Äî but selectively and semantically.\nRationale:\n‚Ä¢ Don‚Äôt replicate Zapier. Instead, ingest external tool data into Wombat Track.\n‚Ä¢ Use lightweight sync agents to bring in:\n\n    ‚ó¶ Notion governance metadata\n    ‚ó¶ Gmail meeting summaries\n    ‚ó¶ Actionstep decision records\n‚Ä¢ Feed structured logs into MemoryPlugin, GovernanceLog, DriveMemory.\nüìå Conclusion: Harmonise workflows via AI-aware ingestion + governance, not monolithic merging.\n3. Should we rebuild Complize as a modular app with sub-apps (e.g. Knowledge, Visa Bytes, Case Management)?\nAnswer: üü¢ Yes ‚Äî Complize should be rebuilt as a modular app on shared AI infrastructure.\nRationale:\n‚Ä¢ Matches Complize‚Äôs vision as an \"Immigration OS\"\n‚Ä¢ Enables Workforce, Nexus, Verify to be launched independently or combined\n‚Ä¢ Centralises audit, AI assistance, and lifecycle data via shared layer\nüìå Conclusion: New Complize app will run on top of the MetaPlatform/Wombat core with sub-apps modularised.\nüß≠ Final Strategic RecommendationDomainActionJustificationAI Infrastructure‚úÖ CentraliseOne engine to govern and scaffold all AI workflowsWorkflow Harmonisation‚ö†Ô∏è IntegrateVia ingestion agents, not brittle mergesComplize Rebuildüü¢ ModulariseFuture-proof with sub-apps and platform-native governance\nüìå Next Suggested Artefacts\n1. http://meta-platform-architecture.md/ ‚Äì infrastructure + governance layer overview\n2. complize-app-feature-backlog.csv ‚Äì feature set by sub-app module\n3. http://integration-adapter-plan.md/ ‚Äì data sync strategy across Notion, Actionstep, Gmail\nCreated: 2025-07-24\nAuthor: ChatGPT-Gizmo\nPushed to: MemoryPlugin, DriveMemory",
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    },
    {
      "projectId": "OF-SDLC-IMP1",
      "projectName": "OF-SDLC-imp1",
      "owner": "System Import",
      "status": "Planning",
      "description": "First canonical SDLC improvement project. Focused on debugging hygiene, governance, and Orbis Admin visibility.",
      "startDate": null,
      "endDate": null,
      "priority": "Core",
      "budget": null,
      "actualCost": null,
      "estimatedHours": null,
      "actualHours": null,
      "completionPercentage": 67,
      "risk": null,
      "stakeholders": null,
      "tags": null,
      "category": null,
      "department": null,
      "createdAt": "2025-01-04T16:00:00Z",
      "updatedAt": "2025-01-04T23:30:00Z",
      "goals": null,
      "scopeNotes": null,
      "RAG": "Green",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null,
      "subApp_ref": null,
      "editableByAdmin": 1
    }
  ]
}