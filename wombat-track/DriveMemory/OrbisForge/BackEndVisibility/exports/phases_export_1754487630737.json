{
  "metadata": {
    "table": "phases",
    "dataSource": "live_database",
    "timestamp": "2025-08-06T13:40:30.736Z",
    "recordCount": 48,
    "exportType": "json"
  },
  "data": [
    {
      "phaseid": "OF-8.4",
      "phasename": "Post-Closure Stabilization & Migration Prep",
      "project_ref": "OF-SDLC-IMP2",
      "status": "Active",
      "startDate": "2025-08-05",
      "endDate": "2025-08-10",
      "RAG": "Green",
      "notes": "Nightly UAT, governance log visibility fix, and Azure migration prep.",
      "estimatedDuration": 5,
      "actualDuration": 1,
      "createdAt": "2025-08-05T01:07:37.568Z",
      "updatedAt": "2025-08-05T01:07:37.568Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-8.3",
      "phasename": "SDLC Velocity Dashboard",
      "project_ref": "OF-SDLC-IMP2",
      "status": "Closed",
      "startDate": "2025-07-29",
      "endDate": "2025-08-02",
      "RAG": "Green",
      "notes": "Build and deploy the Velocity Dashboard for SDLC governance monitoring.",
      "estimatedDuration": 4,
      "actualDuration": 4,
      "createdAt": "2025-08-05T01:07:31.981Z",
      "updatedAt": "2025-08-05T01:07:31.981Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-8.2",
      "phasename": "Conversational SDLC Enablement",
      "project_ref": "OF-SDLC-IMP2",
      "status": "Closed",
      "startDate": "2025-07-22",
      "endDate": "2025-07-28",
      "RAG": "Green",
      "notes": "Initial rollout of conversational SDLC flows with governance logging and CI/CD linkages.",
      "estimatedDuration": 6,
      "actualDuration": 6,
      "createdAt": "2025-08-05T01:07:25.957Z",
      "updatedAt": "2025-08-05T01:07:25.957Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-SDLC-IMP1-P4",
      "phasename": "Governance & Memory Anchoring",
      "project_ref": "OF-SDLC-IMP1",
      "status": "In Progress",
      "startDate": "2025-01-04T23:30:00Z",
      "endDate": null,
      "RAG": "Green",
      "notes": null,
      "estimatedDuration": null,
      "actualDuration": null,
      "createdAt": "2025-01-04T23:30:00Z",
      "updatedAt": "2025-08-04T07:57:41.203Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-SDLC-IMP1-P3",
      "phasename": "Debug & QA",
      "project_ref": "OF-SDLC-IMP1",
      "status": "In Progress",
      "startDate": "2025-01-04T18:30:00Z",
      "endDate": null,
      "RAG": "Green",
      "notes": null,
      "estimatedDuration": null,
      "actualDuration": null,
      "createdAt": "2025-01-04T18:30:00Z",
      "updatedAt": "2025-08-04T07:57:41.202Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-SDLC-IMP1-P2",
      "phasename": "Build & Integration",
      "project_ref": "OF-SDLC-IMP1",
      "status": "In Progress",
      "startDate": "2025-01-04T16:30:00Z",
      "endDate": null,
      "RAG": "Green",
      "notes": null,
      "estimatedDuration": null,
      "actualDuration": null,
      "createdAt": "2025-01-04T16:30:00Z",
      "updatedAt": "2025-08-04T07:57:41.201Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "DBM-2.2",
      "phasename": "Import Phase",
      "project_ref": "WT-DBM-2.0",
      "status": "In Progress",
      "startDate": "2025-08-03",
      "endDate": "2025-08-03",
      "RAG": "Green",
      "notes": "CSV import in progress",
      "estimatedDuration": 1,
      "actualDuration": 0.5,
      "createdAt": "2025-08-03T08:12:06.675Z",
      "updatedAt": "2025-08-03T08:12:06.675Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "DBM-2.1",
      "phasename": "Archive Phase",
      "project_ref": "WT-DBM-2.0",
      "status": "Completed",
      "startDate": "2025-08-03",
      "endDate": "2025-08-03",
      "RAG": "Green",
      "notes": "Data archived successfully",
      "estimatedDuration": 1,
      "actualDuration": 1,
      "createdAt": "2025-08-03T08:12:06.666Z",
      "updatedAt": "2025-08-03T08:12:06.666Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "AMV-1.1",
      "phasename": "Planning Phase",
      "project_ref": "WT-UX7",
      "status": "Planned",
      "startDate": "2025-01-20",
      "endDate": "2025-01-25",
      "RAG": "Yellow",
      "notes": "Requirements gathering in progress",
      "estimatedDuration": 5,
      "actualDuration": 0,
      "createdAt": "2025-08-03T08:12:06.660Z",
      "updatedAt": "2025-08-03T08:12:06.660Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "ESB-1.3",
      "phasename": "Testing Phase",
      "project_ref": "WT-UX14",
      "status": "Completed",
      "startDate": "2025-01-13",
      "endDate": "2025-01-15",
      "RAG": "Green",
      "notes": "All tests passing",
      "estimatedDuration": null,
      "actualDuration": 3,
      "createdAt": "2025-08-03T08:12:06.655Z",
      "updatedAt": "2025-08-03T08:12:06.655Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "ESB-1.2",
      "phasename": "Implementation Phase",
      "project_ref": "WT-UX14",
      "status": "Completed",
      "startDate": "2025-01-06",
      "endDate": "2025-01-12",
      "RAG": "Green",
      "notes": "Core components implemented successfully",
      "estimatedDuration": 7,
      "actualDuration": 6,
      "createdAt": "2025-08-03T08:12:06.651Z",
      "updatedAt": "2025-08-03T08:12:06.651Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "ESB-1.1",
      "phasename": "Design Phase",
      "project_ref": "WT-UX14",
      "status": "Completed",
      "startDate": "2025-01-01",
      "endDate": "2025-01-05",
      "RAG": "Green",
      "notes": "Architecture and wireframe design complete",
      "estimatedDuration": 5,
      "actualDuration": 4,
      "createdAt": "2025-08-03T08:12:06.646Z",
      "updatedAt": "2025-08-03T08:12:06.646Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.5 ",
      "phasename": "Unknown Phase",
      "project_ref": "Wombat Track – Gizmo",
      "status": "Complete",
      "startDate": "July 21, 2025",
      "endDate": "July 22, 2025",
      "RAG": "Green",
      "notes": "All console interactions are now logged with metadata",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "Orb-1.3 ",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX13",
      "status": "In Progress",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "The conversation about Orbis branding might be stored in:\n\n1. Project Memory: ./CLAUDE.md (team-shared)\n2. User Memory: ~/.claude/CLAUDE.md (your personal memory)\n\n● Bash(ls -la ~/.claude/ 2>/dev/null || echo \"No ~/.claude directory found\")\n⎿  total 4\ndrwxr-xr-x 1 jtaylor jtaylor  104 Jul 26 14:15 .\ndrwxr-xr-x 1 jtaylor jtaylor  522 Jul 28 13:03 ..\n… +5 lines (ctrl+r to expand)\n\n● Bash(find ~/.claude -name \"http://claude.md/\" -o -name \"*.md\" | head -10)\n⎿  (No content)\n\n● List(../../.claude/projects)\n⎿  Listed 29 paths (ctrl+r to expand)",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "Orb-1.4 ",
      "phasename": "Unknown Phase",
      "project_ref": "Design Principles (https://www.notion.so/Design-Principles-23ee1901e36e80d99b34fe4f9df8e231?pvs=21)",
      "status": "In Progress",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "Orb-1.2 ",
      "phasename": "Unknown Phase",
      "project_ref": "Design Principles (https://www.notion.so/Design-Principles-23ee1901e36e80d99b34fe4f9df8e231?pvs=21)",
      "status": "In Progress",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🌌 ORBIS BRAND CONCEPT EVOLUTIONS\n🔵 1. Orbis Core\n“The center of intelligent systems.”\n\nCircular, recursive, fundamental. This name embodies the philosophical nucleus of Orbis — a semantic engine driving governance, memory, AI interaction, and system orchestration.\n✴️ Core Themes:\n• Cognition loops (Hofstadter’s “Strange Loop”)\n• Autopoiesis — systems that regenerate themselves\n• Governance kernel — a semantic OS at the heart of digital infrastructure\n• Circular logic → Rational coherence → Auditability\n🌈 Visual Mood:\n• Minimalist, high-contrast\n• Monoline circle glyphs / stacked concentric rings\n• Echoes of operating system boot loaders or schematic cores\n🔤 Logo Direction:\n• Stylised “O” with pulsing center\n• Typography: geometric sans (e.g., Space Grotesk / Inter / Satoshi)\n• Variant: 0rbis Core (logo glyph only)\n🔥 2. Orbis Forge\n“The intelligence foundry.”\n\nSymbolic of both heat and transformation, Forge reflects a platform where AI and human intent co-create new systems. It's not passive — it’s molten, shaping intelligence like ancient smiths shaped metal.\n✴️ Core Themes:\n• Techno-alchemy — crafting AI tools from raw prompts and system intent\n• Industrial → Digital revolution parallel\n• Agentic systems forged into tools, protocols, workflows\n• Signals to founders, builders, and creators\n🌈 Visual Mood:\n• Warm copper / forged steel tones\n• Hammer-and-spark motifs\n• Glowing ember or furnace-core visuals\n• Modular UI “ingots” that combine into features\n🔤 Logo Direction:\n• Wordmark with flare accents on “F”\n• Symbol: Anvil + Orbit, or “O” encircling a flame glyph\n• Font: Sturdy but refined — consider Degular, Neue Haas, Founders Grotesk\n🔁 3. Orbis Loop (Honourable Mention)\n“I am a strange loop.”\n\nA self-observing system. Less grounded than Core or Forge, but poetic and AI-native.\nCould be used as a product or feature name later (e.g., Orbis Loop: Lifecycle Autopilot)\n🧬 SHARED DESIGN SYSTEM ELEMENTS (All Variants)\n🧠 Voice & Language:ElementStyleCopyControlled, system-aware, semanticTonePrecision with calm clarityAgents“Forged intelligence” (Forge), “Core threads” (Core)\n🎨 Shared Color FoundationRoleColorBackground#0C0C0E (Obsidian Black)Accent A#D77B28 (Copper Ember – Forge)Accent B#1C5D99 (Nebula Blue – Core)Surface#F2F0E6 (Lumen Cream)Status#3FB8AF (Signal Teal)Trace Layer#B3B6B7 (Orbit Gray)\n🧩 Shared UI Concepts\n• Governance Thread View → Like metal wire drawn through structure\n• Prompt Console = Foundry Surface (Forge) or Semantic Kernel (Core)\n• Visual Tags = alloy tokens / stackable schema\n• Runtime Indicators = heat map (Forge) or pulse ring (Core)\n🏁 Summary & Next Step OptionsNameSymbolismToneFuture SimplicityStrong Use CasesOrbis CoreNucleus, self-governing loopElegant, systemic✅ Easily collapses to OrbisOS, governance platformOrbis ForgeTransformation, AI smithingCreative, founder-friendly✅ Iconic as Forge → OrbisTooling, agents, dev infra",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "Orb-1.1",
      "phasename": "Unknown Phase",
      "project_ref": "Design Principles (https://www.notion.so/Design-Principles-23ee1901e36e80d99b34fe4f9df8e231?pvs=21)",
      "status": "Done",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🌌 ORBIS BRAND CONCEPT EVOLUTIONS\n🔵 1. Orbis Core\n“The center of intelligent systems.”\n\nCircular, recursive, fundamental. This name embodies the philosophical nucleus of Orbis — a semantic engine driving governance, memory, AI interaction, and system orchestration.\n✴️ Core Themes:\n• Cognition loops (Hofstadter’s “Strange Loop”)\n• Autopoiesis — systems that regenerate themselves\n• Governance kernel — a semantic OS at the heart of digital infrastructure\n• Circular logic → Rational coherence → Auditability\n🌈 Visual Mood:\n• Minimalist, high-contrast\n• Monoline circle glyphs / stacked concentric rings\n• Echoes of operating system boot loaders or schematic cores\n🔤 Logo Direction:\n• Stylised “O” with pulsing center\n• Typography: geometric sans (e.g., Space Grotesk / Inter / Satoshi)\n• Variant: 0rbis Core (logo glyph only)\n🔥 2. Orbis Forge\n“The intelligence foundry.”\n\nSymbolic of both heat and transformation, Forge reflects a platform where AI and human intent co-create new systems. It's not passive — it’s molten, shaping intelligence like ancient smiths shaped metal.\n✴️ Core Themes:\n• Techno-alchemy — crafting AI tools from raw prompts and system intent\n• Industrial → Digital revolution parallel\n• Agentic systems forged into tools, protocols, workflows\n• Signals to founders, builders, and creators\n🌈 Visual Mood:\n• Warm copper / forged steel tones\n• Hammer-and-spark motifs\n• Glowing ember or furnace-core visuals\n• Modular UI “ingots” that combine into features\n🔤 Logo Direction:\n• Wordmark with flare accents on “F”\n• Symbol: Anvil + Orbit, or “O” encircling a flame glyph\n• Font: Sturdy but refined — consider Degular, Neue Haas, Founders Grotesk\n🔁 3. Orbis Loop (Honourable Mention)\n“I am a strange loop.”\n\nA self-observing system. Less grounded than Core or Forge, but poetic and AI-native.\nCould be used as a product or feature name later (e.g., Orbis Loop: Lifecycle Autopilot)\n🧬 SHARED DESIGN SYSTEM ELEMENTS (All Variants)\n🧠 Voice & Language:ElementStyleCopyControlled, system-aware, semanticTonePrecision with calm clarityAgents“Forged intelligence” (Forge), “Core threads” (Core)\n🎨 Shared Color FoundationRoleColorBackground#0C0C0E (Obsidian Black)Accent A#D77B28 (Copper Ember – Forge)Accent B#1C5D99 (Nebula Blue – Core)Surface#F2F0E6 (Lumen Cream)Status#3FB8AF (Signal Teal)Trace Layer#B3B6B7 (Orbit Gray)\n🧩 Shared UI Concepts\n• Governance Thread View → Like metal wire drawn through structure\n• Prompt Console = Foundry Surface (Forge) or Semantic Kernel (Core)\n• Visual Tags = alloy tokens / stackable schema\n• Runtime Indicators = heat map (Forge) or pulse ring (Core)\n🏁 Summary & Next Step OptionsNameSymbolismToneFuture SimplicityStrong Use CasesOrbis CoreNucleus, self-governing loopElegant, systemic✅ Easily collapses to OrbisOS, governance platformOrbis ForgeTransformation, AI smithingCreative, founder-friendly✅ Iconic as Forge → OrbisTooling, agents, dev infra",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "DM-1.1",
      "phasename": "Unknown Phase",
      "project_ref": "Docs Module (https://www.notion.so/Docs-Module-23ee1901e36e803dad14e25804f430b4?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "Feature EnhancementsPage / LocationComponentActionIntegrationStatusNotesDocsEditor.tsxClaude DispatcherReplace mock AI with live Claude endpoint✅ Claude🔜 To implementUse dispatchClaude(promptType, context)DocsEditor.tsxExport HandlerEnable DriveMemory export (.md)✅ DriveMemory🔜 Placeholder existsRequires auth + API keyDocsEditor.tsxMemory SyncPush anchor to MemoryPlugin on save✅ MemoryPlugin🔜 Use anchor creation APIDocsEditor.tsxGovernance ViewerShow GovernanceLog entries per docWT Internal🔜 Component to be addedDocsPage.tsxDoc Grouping UIAdd filters for project/phase/moduleNone🔜 Suggest GroupBySelector or visual foldersDocsEditor.tsxTags FieldImprove tag entry with autocompleteNone🧪 Partially implementedConnect to global tags storeDocsEditor.tsxEditor CollaborationEnable WebSocket/CRDT for live editFuture WT-native⏳ R&D neededPlan using Y.js or similarDocsPage.tsxExport-to-NotionExport doc index + .md to NotionOptional🧪 Future API syncConsider .zip import/export bridgeDocsEditor.tsxFull Version HistoryImplement diff view of prior savesInternal⏳ SuggestedRequires change logging modelDocsEditor.tsxAuthor Role LogicEnforce role-based permissionsWT Auth🔜 View / Edit / Approve rolesDocsEditor.tsxMemory MigrationReplace MemoryPlugin with native RAG storeWT-native🧠 Future phaseAlign with internal SDLC memoryDocsPage.tsxMulti-format ExportAdd .csv, .json export optionsNone✅ Markdown doneAdd format toggle buttonsDocsEditor.tsxClaude Prompt TemplatesCentralise reusable GPT prompt libraryWT Claude Dispatcher🔜 PhaseSteps + Docs use same promptsDocsEditor.tsxSave IndicatorsAdd persistent toast or log on successful saveNone✅ Basic save indicator presentEnhance visibilityDocsEditor.tsxAI Suggest → GovernanceLogAuto-log AI summaries directly on usageWT Internal🔜 Stubbed in placeConfirm logging schema 🔍 Metadata Schema Audit — DocsEntryFieldTypeSourceCompletionNotestitlestringUser input✅docTypeenumDropdown (SOP, Template, etc.)✅contentrich text (Tiptap JSON)Editor✅tags[string]Tag editor🧪 Needs global tag autocompleterelatedProjectIdstring?Selector✅relatedPhaseIdstring?Selector✅relatedFeatureIdstring?Selector✅memoryAnchorIdstring?Auto-generated🔜driveLinkstring?Auto on export🔜createdByUserAuth session✅lastUpdateddatetimeAuto✅versionintInternal⏳ Suggested\n🔄 Proposed Groupings (Docs Dashboard Filters)FilterValuesRequired?DocTypeSOP, Project Spec, Checklist, Template✅ProjectAll WT projects✅PhaseLinked phases✅FeatureComposer features✅TagsCustom tags🧪\n🧱 Infrastructure DependenciesServiceRequired ForNotesClaude (live)AI editing, summarising, scaffoldingUse Claude Dispatcher endpointDriveMemoryBackup + versioned doc archiveMust support .md + metadataMemoryPluginAnchors for long-term recallWill be replaced by WT-native RAGGovernanceLogAll actions + versionsCore WT integrationWT AuthPermissions / user-based accessEnforce view/edit rightsOptional: NotionExport index + MD filesConsider backup only",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "DM-1.0",
      "phasename": "Unknown Phase",
      "project_ref": "Docs Module (https://www.notion.so/Docs-Module-23ee1901e36e803dad14e25804f430b4?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-3.3",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX9",
      "status": "Done",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "WT-3.3 – MetaValidator System\nStatus: 🔵 Planned Objective: Build CLI and CI-integrated validator to enforce governance compliance in project metadata and structure\nKey Steps (Planned):\n1. 🔲 Build Validator Engine (WTMetaValidator.ts)\n2. 🔲 Add rules for markdown, step counts, RAG enforcement\n3. 🔲 Hook into CI pipeline or Git pre-push\n4. 🔲 Post failures to ExecutionLog with suggested backlog tasks\nSide Quest (Planned):\n• Create reusable prompt scaffolder for validator errors",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-3.2",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX10",
      "status": "Planned",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "WT-3.2 – CI/CD Pipeline Migration\nStatus: ✅ Complete Objective: Formalise deployment workflow with rollback, governance logging, and CI validation\nKey Steps:\n1. ✅ Create reusable CI pipeline (ci.yml, deploy.yml)\n2. ✅ Configure deploy + rollback\n3. ✅ Add structured governance hooks\n4. ✅ Integrate RAG signals post-deploy\nSide Quest (Complete):\n• Claude refactor of legacy deploy scripts and log writers",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-3.1 ",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX11",
      "status": "Planned",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "WT-3.1 – Advanced Testing Infrastructure\nStatus: 🟡 In Progress Objective: Implement CI-integrated Puppeteer test suite with standardised coverage and logging\nKey Steps:\n1. ✅ Implement Puppeteer-based test suite (Phase Tracker, Dispatcher, Dashboard)\n2. ✅ Integrate GitHub Action test runner\n3. ⚠️ Standardise coverage thresholds\n4. ⚠️ Add failure logging + RAG dashboard visibility\nSide Quest (Planned):\n• Develop Puppeteer screenshot diff utility for visual regression",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-3.0",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX12",
      "status": "Complete",
      "startDate": "January 1, 2000",
      "endDate": "December 1, 2000",
      "RAG": "Green",
      "notes": "📦 Overview\nThis document summarizes the implementation and governance outcomes of WT Phase 3.x, covering Phases WT-3.0 to WT-3.3. The purpose of Phase 3.x is to establish robust developer infrastructure, CI/CD automation, and governance-enforced quality controls across the Wombat Track platform.\n✅ Phase Breakdown\nWT-3.0 – Architecture Reconciliation\nStatus: ✅ Complete Summary:\n• Refactored orbis-* naming to wombat-console\n• Unified phase hierarchy under WT naming\n• Enhanced UX vertical nesting: Project > Phase > Step",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "PM-1.1",
      "phasename": "Unknown Phase",
      "project_ref": "Post-mortem - sidebar rendering failure (https://www.notion.so/Post-mortem-sidebar-rendering-failure-23ee1901e36e8000a4e2f117bb1bbfad?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "PM 2.1",
      "phasename": "Unknown Phase",
      "project_ref": "Post-mortem - sidebar rendering failure (https://www.notion.so/Post-mortem-sidebar-rendering-failure-23ee1901e36e8000a4e2f117bb1bbfad?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "📘 Session Summary\nThis session surfaced and resolved critical Git integrity, sidebar recovery, and CI build reliability issues. The robustness of these workflows is essential for the long-term viability of the MetaPlatform and Wombat Track as an AI-governed SDLC nucleus.\n✅ Confirmed IssuesIDIssueImpactStatus001Sidebar commit (64a589c) was unintentionally overwrittenHigh – loss of local work and visual logic✅ Recovery complete002Direct push to main bypassed PR reviewHigh – violated SDLC safeguards🛠️ PR review policy reinforced003Git operations not guided → user uncertaintyHigh – SDLC risk for MetaPlatform✅ Gizmo now owns all Git workflows004lucide-react not installed after Claude restoreHigh – broke Vercel production build✅ Pending fix via npm install + commit005Missing CI safety check for new dependenciesMedium – future risk🔄 Pending CI enhancement006No Git pre-checkout safety scriptsMedium – context loss on branch switch🔄 Add http://wt-safe-checkout.sh/007No GovernanceLog entry for recovery eventMedium – traceability gap🔄 Pending log creation008Recovery not logged as PhaseStep in WTMedium🔄 Needs WT-5.1 entry\n🛠️ Fix Actions TakenActionDescription✅ Created sidebar-recovery-branchSafely restored lost logic from commit 64a589c✅ Claude selectively reintegrated sidebar UI + logicPreserved Claude scaffold, restored visual hierarchy✅ Gizmo assigned as GitOps and PR reviewerEnsures controlled merges, version integrity✅ Full PR plan and GovernanceLog scaffold generatedSemantic traceability restored✅ Seed script generated for WT PhasePlanEnables traceable UI feature linking\n🔄 Pending Fixes / ImprovementsIDFixDescriptionF001Install lucide-reactRequired for production build to succeedF002Commit + push package.json, package-lock.jsonFinalise sidebar icon fixF003Create GovernanceLog entry for sidebar recoveryCapture key decisions + traceable eventF004Update WT-5.x PhasePlan to include sidebar recoveryInclude all PhaseSteps tied to UI fixF005Add pre-checkout script (http://wt-safe-checkout.sh/)Prevents work loss when switching branchesF006Add CI rule to catch missing dependenciese.g., validate imports vs package.json\n🧠 Optional EnhancementsEnhancementBenefitGit PR automation for ClaudeClaude commits auto-tagged, PRs generated without push to mainwt-recovery-checker.ts scriptDetect unmerged/dangling commits and prevent data lossReal-time Git/Gizmo sync layer in MetaPlatformPush/pull status updates surfaced in UIBuild-stage AI warning systemDetects missing modules or unresolved imports before deploy\n🧭 MetaPlatform ImpactAreaRisk if UnresolvedResolution PathSDLC EnforcementMetaPlatform cannot offer true governance without Git integrity✅ Assign GitOps to Gizmo + CI rulesRuntime Build StabilityBreaks “self-healing system” promise if prod build fails silently🔄 Add automated dependency check + lock auditTrust in AI CollaborationAI agents must not bypass governance (e.g., push to main)✅ Require PR layer with Gizmo as reviewerDeveloper ConfidenceLoss of work reduces dev velocity, faith in automation🔄 Git pre-checkout and recovery monitoringArtefact TraceabilityMetaPlatform requires memory + log sync🔄 Log sidebar recovery + link to WT-5.1 PhaseStep\n📌 Suggested Phase EntryPhaseNamePurposeWT-6.0GitOps + Runtime IntegrityImplement full guardrails for GitHub, Dev environment, and build pipeline integrity\n📂 Artefacts Generated\n• http://sidebar-recovery-pr-plan.md/\n• http://sidebar-recovery-diff-summary.md/\n• sidebarRecoveryPhasePlan.ts\n• Claude prompt for selective reintroduction\n• Claude prompt for lucide-react install fix\n• Git workflow policy (for inclusion in http://git-workflow.md/)",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.2",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX2",
      "status": "Active",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "Tag data using structured taxonomy\nhttps://www.notion.so/23de1901e36e8137a195dad4fc3c2969?pvs=21\nhttps://www.notion.so/23de1901e36e81ae9c9fcdf031dc5d46?pvs=21\nhttps://www.notion.so/23de1901e36e81209f7be82646197560?pvs=21\nhttps://www.notion.so/23de1901e36e81ca8353c8b78687ea31?pvs=21\nhttps://www.notion.so/23de1901e36e8138ac74f21f38df3755?pvs=21",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.4",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX4",
      "status": "Active",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "🤝 Define Message Types\nhttps://www.notion.so/23ce1901e36e80b980e3de9693a794a2?pvs=21\nhttps://www.notion.so/23ce1901e36e800092b8dea9bd01d4fa?pvs=21\nhttps://www.notion.so/23ce1901e36e80f9b926e811585a0a47?pvs=21\nhttps://www.notion.so/23de1901e36e81f19354f40da684c301?pvs=21\nhttps://www.notion.so/23de1901e36e8109b38ff1089b8ae018?pvs=21",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.6",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX6",
      "status": "Active",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "# 💽Unstructured Data\n\nhttps://www.notion.so/23de1901e36e8046a103de4a184d48a7?pvs=21https://www.notion.so/23de1901e36e80508edee2e0ecc105d3?pvs=21https://www.notion.so/23de1901e36e80218c31c5284c2fbf9c?pvs=21https://www.notion.so/23de1901e36e8024a138dabd27edd421?pvs=21https://www.notion.so/23de1901e36e800d81a7f6f5c62022b6?pvs=21https://www.notion.so/23de1901e36e8126bd71f9c49b6af071?pvs=21https://www.notion.so/23de1901e36e81859deec1a52fb6c958?pvs=21https://www.notion.so/23de1901e36e81fc9e6ee94fc3b8e926?pvs=21",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-2.0 ",
      "phasename": "Unknown Phase",
      "project_ref": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🌟 Purpose\nEstablish Wombat Track as its own project governance and management environment — tracking the WT app’s own evolution within the WT platform.\nThis project formalises the goal of replacing local artefacts and external documentation with WT-native project management, execution, and governance capabilities.\n🧭 Strategic Goal\nMigrate all planning, execution, documentation, and governance activities of the WT app into the WT platform itself.\nWombat Track must be used to manage Wombat Track.\n📘 Project SummaryElementDescriptionProject NameWT Self-Managed App MigrationLeadGizmo (AI) + JacksonStart Date2025-07-25Status🟡 In ProgressGovernanceLog Ref\"Self-Management Initiative\" (Proposal + Phase Logs)\n🧠 Governance Hooks\n• Proposal: WT should manage itself.\n• Decisions: Logged at each project intake and schema change.\n• Changes: Linked to data model PRs.\n• Reviews: Every feature must have its own GovernanceLog.\n🛡️ Integrity Requirements\n• Every WT feature/project must be traceable in WT.\n• No markdown-only artefacts should exist outside WT unless exported.\n• Claude and Gizmo must both log AI actions to GovernanceLog.\n✅ Blocker CheckAreaStatusNotesData Model❌ IncompleteNeeds 3 new data types + extensionsUI Surfaces⚠️ PartialMostly functional, needs richer metadata fieldsGovernance Logging✅ CompleteJust needs more usageAI Prompt Hooks✅ AvailableClaude and Gizmo ready to trigger create/import\n🔚 Output Goals\n• Every active WT artefact tracked as WT project\n• Self-documented change history\n• MetaPlatform fully monitored from within WT\n• WT becomes a self-reflexive governance operating system",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-2.4",
      "phasename": "Unknown Phase",
      "project_ref": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
      "status": "In Progress",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🚀 Phase 4: Operational LoopStepTaskOutput4.1Run future features using WT nativelyE.g., MetaPlatform Dashboard, Docs Module enhancements4.2Claude auto-generates PhasePlans and Governance entriesAI-authored entries4.3Agent Mesh manages visual layer of dependenciesRuntime visualisation4.4WT manages its own versioning and deployment logsSelf-documenting infra",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-2.3",
      "phasename": "Unknown Phase",
      "project_ref": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🔁 Phase 3: MetaProject ActivationStepTaskOutput3.1Ingest current WT artefacts (Agent Mesh, AI Strategy, etc.) as projectsWT-native planning entries3.2Rebuild GovernanceLog from markdown historyTrue WT governance archive3.3Build default dashboards for WT internal projectsView progress from within app3.4Claude prompt layer: “Scaffold as WT Project”Prompt-based self-registration",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-2.2",
      "phasename": "Unknown Phase",
      "project_ref": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "🛠️ Phase 2: WT App EnhancementsStepTaskOutput2.1Add fields: techStack, outputFiles, repoRefs, governanceLinksUpdated Project and Phase schemas2.2Add support for CIWorkflow, PhaseCompletionChecklistExecute surface improvements2.3Add mesh-specific entryType to GovernanceLogSupports traceability2.4UI support for document linking to projectsBidirectional visibility",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-2.1",
      "phasename": "Unknown Phase",
      "project_ref": "WT Project Overview (https://www.notion.so/WT-Project-Overview-23ee1901e36e80158be7f4c78cbc062b?pvs=21)",
      "status": "Complete",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "📍 Phases & Steps\n✅ Phase 1: Assessment & Gap AnalysisStepTaskOutput1.1Evaluate WT surfaces vs artefact requirementsCompatibility matrix1.2Identify missing fields for Plan, Execute, Document, GovernStructured recommendations1.3Propose data model changesAgent, AgentConnection, ExternalService data types1.4Confirm blockersNone beyond data model and UX additions",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "SDLC-2.0 ",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX8",
      "status": "In Progress",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "🧭 Runtime Enforcement: SDLC vs PDLCAreaSDLC (Software)PDLC (Product/Project)🔄 Claude RoleScaffold & PR creationTrigger agent-based product specs🧠 Gizmo RoleMerge enforcement, test strategy, CI verificationGovernance logging, traceability enforcement✅ Required GatesPR link confirmation, GitHub label check, GovernanceLog entryPhasePlan entry, artefact attachment, metadata schema🚨 Runtime AlertsPR not confirmed → ❌ no mergeArtefact not logged → 🚨 prompt to log via Gizmo📌 Storage LocationGitHub, DriveMemory, MemoryPluginWT Docs, Project Tracker, MemoryPlugin🧪 TestingPuppeteer via MCPNarrative, doc review, RAG classification\n✅ From WT-6.0 onward, all SDLC flows are runtime-enforced using this model.",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.1",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX1",
      "status": "Planned",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "Create UI surface and metadata visibility for SDLC guardrails, compliance state, and technical risk score\n\nExpected Outcome: Users and agents can query guardrails, see CI risk score, view enforcement history, and propose mitigations\n\nTags: sdlc-governance, oApp-migration, runtime-risk, wt-8.0\n\nLinked DBs: wt-sdlc-visibility-spec, wt-sdlc-guardrails, wt-tech-debt-register\n\nCanonical: true",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.3",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX3",
      "status": "Active",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "🔒 Mark Notion as RAG Source of Truth\nhttps://www.notion.so/23de1901e36e80209fb8f912636baa3e?pvs=21\nhttps://www.notion.so/23de1901e36e80be9bf4c2c5163bc68b?pvs=21\nhttps://www.notion.so/23de1901e36e80c9a221ecddd1eeece5?pvs=21\nhttps://www.notion.so/23de1901e36e8143a44cf87588bf730b?pvs=21\nhttps://www.notion.so/23de1901e36e8141ba08e61ee8fe0879?pvs=21",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WP-1.5",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX5",
      "status": "Active",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-6.1",
      "phasename": "Unknown Phase",
      "project_ref": "WP-UX7",
      "status": "Planned",
      "startDate": "January 1, 2000",
      "endDate": null,
      "RAG": "Green",
      "notes": "This phase enables real-time visibility into AI agent activity (Claude and Gizmo) within the Orbis UI. It includes UI enhancements to display agent status, last prompt time, and activity metrics. Backend tracking of `agentStatus`, `lastPromptTime`, and `responseTime` will feed the console and support future runtime diagnostics. Designed to improve user trust and enable runtime orchestration for the Vision Layer.",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:51",
      "updatedAt": "2025-08-03 09:16:51",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "AMV-1.4",
      "phasename": "Unknown Phase",
      "project_ref": "Agent Mesh Visualisation (Integrate Surface) (https://www.notion.so/Agent-Mesh-Visualisation-Integrate-Surface-23ee1901e36e8096914ae499b3d494d7?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "StepTaskOutput4.1Import AgentMesh.tsx into MetaPlatformDashboard.tsxRendered diagram within dashboard4.2Link view filter to agent registry card (Agent Tracker)Interactive dashboard toggle4.3Add dispatch overlay when MetaPlatform agent is clickedActionable UI hook4.4Enable live-sync toggle in Meta contextRuntime control layer",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "AMV-1.3",
      "phasename": "Unknown Phase",
      "project_ref": "Agent Mesh Visualisation (Integrate Surface) (https://www.notion.so/Agent-Mesh-Visualisation-Integrate-Surface-23ee1901e36e8096914ae499b3d494d7?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "StepTaskOutput3.1Add status field to each link (e.g., active, planned, deprecated)Updated JSON3.2Add visual styling for active/planned/deprecated edgesEdge color coding3.3Pull live state from GitHub / Claude Dispatcher status (future)Runtime sync hooks (optional)3.4Add RAG status badge overlays where applicableOptional Governance overlay",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "AMV-1.2",
      "phasename": "Unknown Phase",
      "project_ref": "Agent Mesh Visualisation (Integrate Surface) (https://www.notion.so/Agent-Mesh-Visualisation-Integrate-Surface-23ee1901e36e8096914ae499b3d494d7?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "StepTaskOutput2.1Create AgentMesh.tsx component scaffoldComponent file2.2Create source-of-truth file integrationMap.jsonJSON registry2.3Render diagram using Mermaid wrapper (@mermaid-js/react) or custom D3Live diagram inside WT UI2.4Add toggle views (CodeOps, Memory, Runtime, Governance)UI filters2.5Connect diagram hover/click events to metadata or modal detailInteraction layer2.6Log component and source config in Template TrackerGovernance linkage",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.4",
      "phasename": "Unknown Phase",
      "project_ref": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "WT 5.4 – Mobile + Cross-Project View\n• Responsive updates to core components\n• Timeline: add global view with filters by tag/status",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.3",
      "phasename": "Unknown Phase",
      "project_ref": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "WT 5.3 – Collaboration & Alerts\n• Add inline comment threads per PhaseStep\n• Support user mentions and task ownership\n• Build Slack/email notification connector",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.2",
      "phasename": "Unknown Phase",
      "project_ref": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "WT 5.2 – Rule Engine MVP\n• Define Rule, Trigger, Action data types\n• Implement Rule builder UI + logic processor\n• Link rules to Step events and Logs",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.1",
      "phasename": "Unknown Phase",
      "project_ref": "Core Feature Retrofit (https://www.notion.so/Core-Feature-Retrofit-23ee1901e36e80c79980f25071cdb8e8?pvs=21)",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Green",
      "notes": "WT 5.1 – Kanban & Timeline Foundations\n• Add startDate, dueDate, statusLastUpdated fields\n• Create Kanban UI: drag/drop PhaseSteps grouped by status\n• Create Gantt UI: timeline bar per PhaseStep",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.7 ",
      "phasename": "Unknown Phase",
      "project_ref": "Wombat Track – Gizmo",
      "status": "Planned",
      "startDate": null,
      "endDate": null,
      "RAG": "Amber",
      "notes": "Slash commands, memory summarisation, recall and context injection",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "WT-5.6 ",
      "phasename": "Unknown Phase",
      "project_ref": "Wombat Track – Gizmo",
      "status": "Complete",
      "startDate": "July 23, 2025",
      "endDate": "July 25, 2025",
      "RAG": "Green",
      "notes": "Live API wiring to Claude and Gizmo agents",
      "estimatedDuration": 0,
      "actualDuration": 0,
      "createdAt": "2025-08-03 09:16:50",
      "updatedAt": "2025-08-03 09:16:50",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    },
    {
      "phaseid": "OF-SDLC-IMP1-P1",
      "phasename": "Planning & Setup",
      "project_ref": "OF-SDLC-IMP1",
      "status": "Completed",
      "startDate": null,
      "endDate": "2025-01-04T16:30:00Z",
      "RAG": "Green",
      "notes": null,
      "estimatedDuration": null,
      "actualDuration": null,
      "createdAt": "2025-08-04T07:57:41.200Z",
      "updatedAt": "2025-01-04T16:30:00Z",
      "isDraft": 0,
      "draftEditedBy": null,
      "draftEditedAt": null
    }
  ]
}